// Fortnite SDK

#ifdef _MSC_VER
#pragma pack(push, 0x8)
#endif

#include "../SDK.hpp"

namespace SDK
{
    //---------------------------------------------------------------------------
    //Functions
    //---------------------------------------------------------------------------

    // Function Engine.Actor.WasRecentlyRendered
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Tolerance                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AActor::WasRecentlyRendered(float Tolerance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.WasRecentlyRendered");

        AActor_WasRecentlyRendered_Params params;
        params.Tolerance = Tolerance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.UserConstructionScript
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)

    void AActor::UserConstructionScript()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UserConstructionScript");

        AActor_UserConstructionScript_Params params;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.TearOff
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AActor::TearOff()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TearOff");

        AActor_TearOff_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.SnapRootComponentTo
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  InParentActor                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   InSocketName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SnapRootComponentTo");

        AActor_SnapRootComponentTo_Params params;
        params.InParentActor = InParentActor;
        params.InSocketName = InSocketName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.SetTickGroup
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<ETickingGroup>     NewTickGroup                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTickGroup");

        AActor_SetTickGroup_Params params;
        params.NewTickGroup = NewTickGroup;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.SetTickableWhenPaused
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bTickableWhenPaused            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::SetTickableWhenPaused(bool bTickableWhenPaused)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTickableWhenPaused");

        AActor_SetTickableWhenPaused_Params params;
        params.bTickableWhenPaused = bTickableWhenPaused;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.SetReplicates
    // (FUNC_Final, FUNC_BlueprintAuthorityOnly, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bInReplicates                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::SetReplicates(bool bInReplicates)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetReplicates");

        AActor_SetReplicates_Params params;
        params.bInReplicates = bInReplicates;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.SetReplicateMovement
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bInReplicateMovement           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::SetReplicateMovement(bool bInReplicateMovement)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetReplicateMovement");

        AActor_SetReplicateMovement_Params params;
        params.bInReplicateMovement = bInReplicateMovement;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.SetOwner
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  NewOwner                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::SetOwner(class AActor* NewOwner)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetOwner");

        AActor_SetOwner_Params params;
        params.NewOwner = NewOwner;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.SetNetDormancy
    // (FUNC_Final, FUNC_BlueprintAuthorityOnly, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<ENetDormancy>      NewDormancy                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::SetNetDormancy(TEnumAsByte<ENetDormancy> NewDormancy)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetNetDormancy");

        AActor_SetNetDormancy_Params params;
        params.NewDormancy = NewDormancy;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.SetLifeSpan
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InLifespan                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::SetLifeSpan(float InLifespan)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetLifeSpan");

        AActor_SetLifeSpan_Params params;
        params.InLifespan = InLifespan;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.SetActorTickInterval
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          TickInterval                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::SetActorTickInterval(float TickInterval)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorTickInterval");

        AActor_SetActorTickInterval_Params params;
        params.TickInterval = TickInterval;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.SetActorTickEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnabled                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::SetActorTickEnabled(bool bEnabled)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorTickEnabled");

        AActor_SetActorTickEnabled_Params params;
        params.bEnabled = bEnabled;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.SetActorScale3D
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewScale3D                     (CPF_Parm, CPF_IsPlainOldData)

    void AActor::SetActorScale3D(const struct FVector& NewScale3D)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorScale3D");

        AActor_SetActorScale3D_Params params;
        params.NewScale3D = NewScale3D;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.SetActorRelativeScale3D
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewRelativeScale               (CPF_Parm, CPF_IsPlainOldData)

    void AActor::SetActorRelativeScale3D(const struct FVector& NewRelativeScale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorRelativeScale3D");

        AActor_SetActorRelativeScale3D_Params params;
        params.NewRelativeScale = NewRelativeScale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.SetActorHiddenInGame
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewHidden                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::SetActorHiddenInGame(bool bNewHidden)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorHiddenInGame");

        AActor_SetActorHiddenInGame_Params params;
        params.bNewHidden = bNewHidden;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.SetActorEnableCollision
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewActorEnableCollision       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::SetActorEnableCollision(bool bNewActorEnableCollision)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorEnableCollision");

        AActor_SetActorEnableCollision_Params params;
        params.bNewActorEnableCollision = bNewActorEnableCollision;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.RemoveTickPrerequisiteComponent
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UActorComponent*         PrerequisiteComponent          (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

    void AActor::RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RemoveTickPrerequisiteComponent");

        AActor_RemoveTickPrerequisiteComponent_Params params;
        params.PrerequisiteComponent = PrerequisiteComponent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.RemoveTickPrerequisiteActor
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  PrerequisiteActor              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RemoveTickPrerequisiteActor");

        AActor_RemoveTickPrerequisiteActor_Params params;
        params.PrerequisiteActor = PrerequisiteActor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.ReceiveTick
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // float                          DeltaSeconds                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::ReceiveTick(float DeltaSeconds)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveTick");

        AActor_ReceiveTick_Params params;
        params.DeltaSeconds = DeltaSeconds;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.ReceiveRadialDamage
    // (FUNC_BlueprintAuthorityOnly, FUNC_Event, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintEvent)
    // Parameters:
    // float                          DamageReceived                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UDamageType*             DamageType                     (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Origin                         (CPF_Parm, CPF_IsPlainOldData)
    // struct FHitResult              HitInfo                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // class AController*             InstigatedBy                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  DamageCauser                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveRadialDamage");

        AActor_ReceiveRadialDamage_Params params;
        params.DamageReceived = DamageReceived;
        params.DamageType = DamageType;
        params.Origin = Origin;
        params.HitInfo = HitInfo;
        params.InstigatedBy = InstigatedBy;
        params.DamageCauser = DamageCauser;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.ReceivePointDamage
    // (FUNC_BlueprintAuthorityOnly, FUNC_Event, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintEvent)
    // Parameters:
    // float                          Damage                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UDamageType*             DamageType                     (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 HitLocation                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 HitNormal                      (CPF_Parm, CPF_IsPlainOldData)
    // class UPrimitiveComponent*     HitComponent                   (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ShotFromDirection              (CPF_Parm, CPF_IsPlainOldData)
    // class AController*             InstigatedBy                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  DamageCauser                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              HitInfo                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void AActor::ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceivePointDamage");

        AActor_ReceivePointDamage_Params params;
        params.Damage = Damage;
        params.DamageType = DamageType;
        params.HitLocation = HitLocation;
        params.HitNormal = HitNormal;
        params.HitComponent = HitComponent;
        params.BoneName = BoneName;
        params.ShotFromDirection = ShotFromDirection;
        params.InstigatedBy = InstigatedBy;
        params.DamageCauser = DamageCauser;
        params.HitInfo = HitInfo;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.ReceiveHit
    // (FUNC_Event, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintEvent)
    // Parameters:
    // class UPrimitiveComponent*     MyComp                         (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // class AActor*                  Other                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UPrimitiveComponent*     OtherComp                      (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // bool                           bSelfMoved                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 HitLocation                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 HitNormal                      (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 NormalImpulse                  (CPF_Parm, CPF_IsPlainOldData)
    // struct FHitResult              Hit                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void AActor::ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveHit");

        AActor_ReceiveHit_Params params;
        params.MyComp = MyComp;
        params.Other = Other;
        params.OtherComp = OtherComp;
        params.bSelfMoved = bSelfMoved;
        params.HitLocation = HitLocation;
        params.HitNormal = HitNormal;
        params.NormalImpulse = NormalImpulse;
        params.Hit = Hit;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.ReceiveEndPlay
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // TEnumAsByte<EEndPlayReason>    EndPlayReason                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveEndPlay");

        AActor_ReceiveEndPlay_Params params;
        params.EndPlayReason = EndPlayReason;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.ReceiveDestroyed
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)

    void AActor::ReceiveDestroyed()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveDestroyed");

        AActor_ReceiveDestroyed_Params params;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.ReceiveBeginPlay
    // (FUNC_Event, FUNC_Protected, FUNC_BlueprintEvent)

    void AActor::ReceiveBeginPlay()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveBeginPlay");

        AActor_ReceiveBeginPlay_Params params;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.ReceiveAnyDamage
    // (FUNC_BlueprintAuthorityOnly, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // float                          Damage                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UDamageType*             DamageType                     (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AController*             InstigatedBy                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  DamageCauser                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveAnyDamage");

        AActor_ReceiveAnyDamage_Params params;
        params.Damage = Damage;
        params.DamageType = DamageType;
        params.InstigatedBy = InstigatedBy;
        params.DamageCauser = DamageCauser;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.ReceiveActorOnReleased
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // struct FKey                    ButtonReleased                 (CPF_Parm)

    void AActor::ReceiveActorOnReleased(const struct FKey& ButtonReleased)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnReleased");

        AActor_ReceiveActorOnReleased_Params params;
        params.ButtonReleased = ButtonReleased;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.ReceiveActorOnInputTouchLeave
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // TEnumAsByte<ETouchIndex>       FingerIndex                    (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnInputTouchLeave");

        AActor_ReceiveActorOnInputTouchLeave_Params params;
        params.FingerIndex = FingerIndex;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.ReceiveActorOnInputTouchEnter
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // TEnumAsByte<ETouchIndex>       FingerIndex                    (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnInputTouchEnter");

        AActor_ReceiveActorOnInputTouchEnter_Params params;
        params.FingerIndex = FingerIndex;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.ReceiveActorOnInputTouchEnd
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // TEnumAsByte<ETouchIndex>       FingerIndex                    (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnInputTouchEnd");

        AActor_ReceiveActorOnInputTouchEnd_Params params;
        params.FingerIndex = FingerIndex;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.ReceiveActorOnInputTouchBegin
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // TEnumAsByte<ETouchIndex>       FingerIndex                    (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnInputTouchBegin");

        AActor_ReceiveActorOnInputTouchBegin_Params params;
        params.FingerIndex = FingerIndex;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.ReceiveActorOnClicked
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // struct FKey                    ButtonPressed                  (CPF_Parm)

    void AActor::ReceiveActorOnClicked(const struct FKey& ButtonPressed)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnClicked");

        AActor_ReceiveActorOnClicked_Params params;
        params.ButtonPressed = ButtonPressed;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.ReceiveActorEndOverlap
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class AActor*                  OtherActor                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::ReceiveActorEndOverlap(class AActor* OtherActor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorEndOverlap");

        AActor_ReceiveActorEndOverlap_Params params;
        params.OtherActor = OtherActor;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.ReceiveActorEndCursorOver
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)

    void AActor::ReceiveActorEndCursorOver()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorEndCursorOver");

        AActor_ReceiveActorEndCursorOver_Params params;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.ReceiveActorBeginOverlap
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class AActor*                  OtherActor                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::ReceiveActorBeginOverlap(class AActor* OtherActor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorBeginOverlap");

        AActor_ReceiveActorBeginOverlap_Params params;
        params.OtherActor = OtherActor;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.ReceiveActorBeginCursorOver
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)

    void AActor::ReceiveActorBeginCursorOver()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorBeginCursorOver");

        AActor_ReceiveActorBeginCursorOver_Params params;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.OnRep_ReplicateMovement
    // (FUNC_Native, FUNC_Public)

    void AActor::OnRep_ReplicateMovement()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRep_ReplicateMovement");

        AActor_OnRep_ReplicateMovement_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.OnRep_ReplicatedMovement
    // (FUNC_Native, FUNC_Public)

    void AActor::OnRep_ReplicatedMovement()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRep_ReplicatedMovement");

        AActor_OnRep_ReplicatedMovement_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.OnRep_Owner
    // (FUNC_Native, FUNC_Protected)

    void AActor::OnRep_Owner()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRep_Owner");

        AActor_OnRep_Owner_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.OnRep_Instigator
    // (FUNC_Native, FUNC_Public)

    void AActor::OnRep_Instigator()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRep_Instigator");

        AActor_OnRep_Instigator_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.OnRep_AttachmentReplication
    // (FUNC_Native, FUNC_Public)

    void AActor::OnRep_AttachmentReplication()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRep_AttachmentReplication");

        AActor_OnRep_AttachmentReplication_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.MakeNoise
    // (FUNC_Final, FUNC_BlueprintAuthorityOnly, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Loudness                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class APawn*                   NoiseInstigator                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 NoiseLocation                  (CPF_Parm, CPF_IsPlainOldData)
    // float                          MaxRange                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   Tag                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MakeNoise");

        AActor_MakeNoise_Params params;
        params.Loudness = Loudness;
        params.NoiseInstigator = NoiseInstigator;
        params.NoiseLocation = NoiseLocation;
        params.MaxRange = MaxRange;
        params.Tag = Tag;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.MakeMIDForMaterial
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterialInterface*      Parent                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInstanceDynamic* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UMaterialInstanceDynamic* AActor::MakeMIDForMaterial(class UMaterialInterface* Parent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MakeMIDForMaterial");

        AActor_MakeMIDForMaterial_Params params;
        params.Parent = Parent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.K2_TeleportTo
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 DestLocation                   (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                DestRotation                   (CPF_Parm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AActor::K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_TeleportTo");

        AActor_K2_TeleportTo_Params params;
        params.DestLocation = DestLocation;
        params.DestRotation = DestRotation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.K2_SetActorTransform
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FTransform              NewTransform                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AActor::K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorTransform");

        AActor_K2_SetActorTransform_Params params;
        params.NewTransform = NewTransform;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;

        return params.ReturnValue;
    }


    // Function Engine.Actor.K2_SetActorRotation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FRotator                NewRotation                    (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bTeleportPhysics               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AActor::K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorRotation");

        AActor_K2_SetActorRotation_Params params;
        params.NewRotation = NewRotation;
        params.bTeleportPhysics = bTeleportPhysics;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.K2_SetActorRelativeTransform
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FTransform              NewRelativeTransform           (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorRelativeTransform");

        AActor_K2_SetActorRelativeTransform_Params params;
        params.NewRelativeTransform = NewRelativeTransform;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.Actor.K2_SetActorRelativeRotation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FRotator                NewRelativeRotation            (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorRelativeRotation");

        AActor_K2_SetActorRelativeRotation_Params params;
        params.NewRelativeRotation = NewRelativeRotation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.Actor.K2_SetActorRelativeLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewRelativeLocation            (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorRelativeLocation");

        AActor_K2_SetActorRelativeLocation_Params params;
        params.NewRelativeLocation = NewRelativeLocation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.Actor.K2_SetActorLocationAndRotation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewLocation                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                NewRotation                    (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AActor::K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorLocationAndRotation");

        AActor_K2_SetActorLocationAndRotation_Params params;
        params.NewLocation = NewLocation;
        params.NewRotation = NewRotation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;

        return params.ReturnValue;
    }


    // Function Engine.Actor.K2_SetActorLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewLocation                    (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AActor::K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorLocation");

        AActor_K2_SetActorLocation_Params params;
        params.NewLocation = NewLocation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;

        return params.ReturnValue;
    }


    // Function Engine.Actor.K2_OnReset
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)

    void AActor::K2_OnReset()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_OnReset");

        AActor_K2_OnReset_Params params;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.K2_OnEndViewTarget
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class APlayerController*       PC                             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::K2_OnEndViewTarget(class APlayerController* PC)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_OnEndViewTarget");

        AActor_K2_OnEndViewTarget_Params params;
        params.PC = PC;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.K2_OnBecomeViewTarget
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class APlayerController*       PC                             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::K2_OnBecomeViewTarget(class APlayerController* PC)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_OnBecomeViewTarget");

        AActor_K2_OnBecomeViewTarget_Params params;
        params.PC = PC;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.K2_GetRootComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class USceneComponent*         ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class USceneComponent* AActor::K2_GetRootComponent()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_GetRootComponent");

        AActor_K2_GetRootComponent_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.K2_GetActorRotation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator AActor::K2_GetActorRotation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_GetActorRotation");

        AActor_K2_GetActorRotation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.K2_GetActorLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector AActor::K2_GetActorLocation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_GetActorLocation");

        AActor_K2_GetActorLocation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.K2_DetachFromActor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // EDetachmentRule                LocationRule                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EDetachmentRule                RotationRule                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EDetachmentRule                ScaleRule                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_DetachFromActor");

        AActor_K2_DetachFromActor_Params params;
        params.LocationRule = LocationRule;
        params.RotationRule = RotationRule;
        params.ScaleRule = ScaleRule;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.K2_DestroyComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UActorComponent*         Component                      (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

    void AActor::K2_DestroyComponent(class UActorComponent* Component)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_DestroyComponent");

        AActor_K2_DestroyComponent_Params params;
        params.Component = Component;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.K2_DestroyActor
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AActor::K2_DestroyActor()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_DestroyActor");

        AActor_K2_DestroyActor_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.K2_AttachToComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class USceneComponent*         Parent                         (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   SocketName                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EAttachmentRule                LocationRule                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EAttachmentRule                RotationRule                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EAttachmentRule                ScaleRule                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bWeldSimulatedBodies           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AttachToComponent");

        AActor_K2_AttachToComponent_Params params;
        params.Parent = Parent;
        params.SocketName = SocketName;
        params.LocationRule = LocationRule;
        params.RotationRule = RotationRule;
        params.ScaleRule = ScaleRule;
        params.bWeldSimulatedBodies = bWeldSimulatedBodies;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.K2_AttachToActor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  ParentActor                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   SocketName                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EAttachmentRule                LocationRule                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EAttachmentRule                RotationRule                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EAttachmentRule                ScaleRule                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bWeldSimulatedBodies           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AttachToActor");

        AActor_K2_AttachToActor_Params params;
        params.ParentActor = ParentActor;
        params.SocketName = SocketName;
        params.LocationRule = LocationRule;
        params.RotationRule = RotationRule;
        params.ScaleRule = ScaleRule;
        params.bWeldSimulatedBodies = bWeldSimulatedBodies;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.K2_AttachRootComponentToActor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  InParentActor                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   InSocketName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EAttachLocation>   AttachLocationType             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bWeldSimulatedBodies           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AttachRootComponentToActor");

        AActor_K2_AttachRootComponentToActor_Params params;
        params.InParentActor = InParentActor;
        params.InSocketName = InSocketName;
        params.AttachLocationType = AttachLocationType;
        params.bWeldSimulatedBodies = bWeldSimulatedBodies;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.K2_AttachRootComponentTo
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class USceneComponent*         InParent                       (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   InSocketName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EAttachLocation>   AttachLocationType             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bWeldSimulatedBodies           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AttachRootComponentTo");

        AActor_K2_AttachRootComponentTo_Params params;
        params.InParent = InParent;
        params.InSocketName = InSocketName;
        params.AttachLocationType = AttachLocationType;
        params.bWeldSimulatedBodies = bWeldSimulatedBodies;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.K2_AddActorWorldTransform
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FTransform              DeltaTransform                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AddActorWorldTransform");

        AActor_K2_AddActorWorldTransform_Params params;
        params.DeltaTransform = DeltaTransform;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.Actor.K2_AddActorWorldRotation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FRotator                DeltaRotation                  (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AddActorWorldRotation");

        AActor_K2_AddActorWorldRotation_Params params;
        params.DeltaRotation = DeltaRotation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.Actor.K2_AddActorWorldOffset
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 DeltaLocation                  (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AddActorWorldOffset");

        AActor_K2_AddActorWorldOffset_Params params;
        params.DeltaLocation = DeltaLocation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.Actor.K2_AddActorLocalTransform
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FTransform              NewTransform                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AddActorLocalTransform");

        AActor_K2_AddActorLocalTransform_Params params;
        params.NewTransform = NewTransform;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.Actor.K2_AddActorLocalRotation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FRotator                DeltaRotation                  (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AddActorLocalRotation");

        AActor_K2_AddActorLocalRotation_Params params;
        params.DeltaRotation = DeltaRotation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.Actor.K2_AddActorLocalOffset
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 DeltaLocation                  (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AddActorLocalOffset");

        AActor_K2_AddActorLocalOffset_Params params;
        params.DeltaLocation = DeltaLocation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.Actor.IsOverlappingActor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AActor*                  Other                          (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AActor::IsOverlappingActor(class AActor* Other)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsOverlappingActor");

        AActor_IsOverlappingActor_Params params;
        params.Other = Other;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.IsChildActor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AActor::IsChildActor()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsChildActor");

        AActor_IsChildActor_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.IsActorTickEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AActor::IsActorTickEnabled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsActorTickEnabled");

        AActor_IsActorTickEnabled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.IsActorBeingDestroyed
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AActor::IsActorBeingDestroyed()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsActorBeingDestroyed");

        AActor_IsActorBeingDestroyed_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.HasAuthority
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AActor::HasAuthority()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.HasAuthority");

        AActor_HasAuthority_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetVerticalDistanceTo
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AActor*                  OtherActor                     (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float AActor::GetVerticalDistanceTo(class AActor* OtherActor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetVerticalDistanceTo");

        AActor_GetVerticalDistanceTo_Params params;
        params.OtherActor = OtherActor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetVelocity
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector AActor::GetVelocity()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetVelocity");

        AActor_GetVelocity_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetTransform
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FTransform              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FTransform AActor::GetTransform()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTransform");

        AActor_GetTransform_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetTickableWhenPaused
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AActor::GetTickableWhenPaused()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTickableWhenPaused");

        AActor_GetTickableWhenPaused_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetSquaredDistanceTo
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AActor*                  OtherActor                     (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float AActor::GetSquaredDistanceTo(class AActor* OtherActor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetSquaredDistanceTo");

        AActor_GetSquaredDistanceTo_Params params;
        params.OtherActor = OtherActor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetRemoteRole
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TEnumAsByte<ENetRole>          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    TEnumAsByte<ENetRole> AActor::GetRemoteRole()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetRemoteRole");

        AActor_GetRemoteRole_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetParentComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UChildActorComponent*    ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UChildActorComponent* AActor::GetParentComponent()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetParentComponent");

        AActor_GetParentComponent_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetParentActor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AActor* AActor::GetParentActor()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetParentActor");

        AActor_GetParentActor_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetOwner
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AActor* AActor::GetOwner()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetOwner");

        AActor_GetOwner_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetOverlappingComponents
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TArray<class UPrimitiveComponent*> OverlappingComponents          (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)

    void AActor::GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetOverlappingComponents");

        AActor_GetOverlappingComponents_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OverlappingComponents != nullptr)
            *OverlappingComponents = params.OverlappingComponents;
    }


    // Function Engine.Actor.GetOverlappingActors
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TArray<class AActor*>          OverlappingActors              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // class UClass*                  ClassFilter                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetOverlappingActors");

        AActor_GetOverlappingActors_Params params;
        params.ClassFilter = ClassFilter;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OverlappingActors != nullptr)
            *OverlappingActors = params.OverlappingActors;
    }


    // Function Engine.Actor.GetLifeSpan
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float AActor::GetLifeSpan()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetLifeSpan");

        AActor_GetLifeSpan_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetInstigatorController
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AController*             ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AController* AActor::GetInstigatorController()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInstigatorController");

        AActor_GetInstigatorController_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetInstigator
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class APawn*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class APawn* AActor::GetInstigator()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInstigator");

        AActor_GetInstigator_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetInputVectorAxisValue
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FKey                    InputAxisKey                   (CPF_ConstParm, CPF_Parm)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector AActor::GetInputVectorAxisValue(const struct FKey& InputAxisKey)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInputVectorAxisValue");

        AActor_GetInputVectorAxisValue_Params params;
        params.InputAxisKey = InputAxisKey;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetInputAxisValue
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   InputAxisName                  (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float AActor::GetInputAxisValue(const struct FName& InputAxisName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInputAxisValue");

        AActor_GetInputAxisValue_Params params;
        params.InputAxisName = InputAxisName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetInputAxisKeyValue
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FKey                    InputAxisKey                   (CPF_ConstParm, CPF_Parm)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float AActor::GetInputAxisKeyValue(const struct FKey& InputAxisKey)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInputAxisKeyValue");

        AActor_GetInputAxisKeyValue_Params params;
        params.InputAxisKey = InputAxisKey;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetHorizontalDotProductTo
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AActor*                  OtherActor                     (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float AActor::GetHorizontalDotProductTo(class AActor* OtherActor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetHorizontalDotProductTo");

        AActor_GetHorizontalDotProductTo_Params params;
        params.OtherActor = OtherActor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetHorizontalDistanceTo
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AActor*                  OtherActor                     (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float AActor::GetHorizontalDistanceTo(class AActor* OtherActor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetHorizontalDistanceTo");

        AActor_GetHorizontalDistanceTo_Params params;
        params.OtherActor = OtherActor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetGameTimeSinceCreation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float AActor::GetGameTimeSinceCreation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetGameTimeSinceCreation");

        AActor_GetGameTimeSinceCreation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetDotProductTo
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AActor*                  OtherActor                     (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float AActor::GetDotProductTo(class AActor* OtherActor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetDotProductTo");

        AActor_GetDotProductTo_Params params;
        params.OtherActor = OtherActor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetDistanceTo
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AActor*                  OtherActor                     (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float AActor::GetDistanceTo(class AActor* OtherActor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetDistanceTo");

        AActor_GetDistanceTo_Params params;
        params.OtherActor = OtherActor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetComponentsByTag
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UClass*                  ComponentClass                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   Tag                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class UActorComponent*> ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    TArray<class UActorComponent*> AActor::GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetComponentsByTag");

        AActor_GetComponentsByTag_Params params;
        params.ComponentClass = ComponentClass;
        params.Tag = Tag;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetComponentsByClass
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UClass*                  ComponentClass                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class UActorComponent*> ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    TArray<class UActorComponent*> AActor::GetComponentsByClass(class UClass* ComponentClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetComponentsByClass");

        AActor_GetComponentsByClass_Params params;
        params.ComponentClass = ComponentClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetComponentByClass
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UClass*                  ComponentClass                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UActorComponent*         ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UActorComponent* AActor::GetComponentByClass(class UClass* ComponentClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetComponentByClass");

        AActor_GetComponentByClass_Params params;
        params.ComponentClass = ComponentClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetAttachParentSocketName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FName AActor::GetAttachParentSocketName()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAttachParentSocketName");

        AActor_GetAttachParentSocketName_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetAttachParentActor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AActor* AActor::GetAttachParentActor()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAttachParentActor");

        AActor_GetAttachParentActor_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetAttachedActors
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TArray<class AActor*>          OutActors                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)

    void AActor::GetAttachedActors(TArray<class AActor*>* OutActors)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAttachedActors");

        AActor_GetAttachedActors_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutActors != nullptr)
            *OutActors = params.OutActors;
    }


    // Function Engine.Actor.GetAllChildActors
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TArray<class AActor*>          ChildActors                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           bIncludeDescendants            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAllChildActors");

        AActor_GetAllChildActors_Params params;
        params.bIncludeDescendants = bIncludeDescendants;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (ChildActors != nullptr)
            *ChildActors = params.ChildActors;
    }


    // Function Engine.Actor.GetActorUpVector
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector AActor::GetActorUpVector()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorUpVector");

        AActor_GetActorUpVector_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetActorTimeDilation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float AActor::GetActorTimeDilation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorTimeDilation");

        AActor_GetActorTimeDilation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetActorTickInterval
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float AActor::GetActorTickInterval()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorTickInterval");

        AActor_GetActorTickInterval_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetActorScale3D
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector AActor::GetActorScale3D()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorScale3D");

        AActor_GetActorScale3D_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetActorRightVector
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector AActor::GetActorRightVector()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorRightVector");

        AActor_GetActorRightVector_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetActorRelativeScale3D
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector AActor::GetActorRelativeScale3D()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorRelativeScale3D");

        AActor_GetActorRelativeScale3D_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetActorForwardVector
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector AActor::GetActorForwardVector()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorForwardVector");

        AActor_GetActorForwardVector_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetActorEyesViewPoint
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 OutLocation                    (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FRotator                OutRotation                    (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void AActor::GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorEyesViewPoint");

        AActor_GetActorEyesViewPoint_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutLocation != nullptr)
            *OutLocation = params.OutLocation;
        if (OutRotation != nullptr)
            *OutRotation = params.OutRotation;
    }


    // Function Engine.Actor.GetActorEnableCollision
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AActor::GetActorEnableCollision()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorEnableCollision");

        AActor_GetActorEnableCollision_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.GetActorBounds
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           bOnlyCollidingComponents       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Origin                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 BoxExtent                      (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void AActor::GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorBounds");

        AActor_GetActorBounds_Params params;
        params.bOnlyCollidingComponents = bOnlyCollidingComponents;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Origin != nullptr)
            *Origin = params.Origin;
        if (BoxExtent != nullptr)
            *BoxExtent = params.BoxExtent;
    }


    // Function Engine.Actor.ForceNetUpdate
    // (FUNC_BlueprintAuthorityOnly, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AActor::ForceNetUpdate()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ForceNetUpdate");

        AActor_ForceNetUpdate_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.FlushNetDormancy
    // (FUNC_Final, FUNC_BlueprintAuthorityOnly, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AActor::FlushNetDormancy()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FlushNetDormancy");

        AActor_FlushNetDormancy_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.EnableInput
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class APlayerController*       PlayerController               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::EnableInput(class APlayerController* PlayerController)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EnableInput");

        AActor_EnableInput_Params params;
        params.PlayerController = PlayerController;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.DisableInput
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class APlayerController*       PlayerController               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::DisableInput(class APlayerController* PlayerController)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DisableInput");

        AActor_DisableInput_Params params;
        params.PlayerController = PlayerController;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.DetachRootComponentFromParent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bMaintainWorldPosition         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::DetachRootComponentFromParent(bool bMaintainWorldPosition)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DetachRootComponentFromParent");

        AActor_DetachRootComponentFromParent_Params params;
        params.bMaintainWorldPosition = bMaintainWorldPosition;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.AddTickPrerequisiteComponent
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UActorComponent*         PrerequisiteComponent          (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

    void AActor::AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddTickPrerequisiteComponent");

        AActor_AddTickPrerequisiteComponent_Params params;
        params.PrerequisiteComponent = PrerequisiteComponent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.AddTickPrerequisiteActor
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  PrerequisiteActor              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AActor::AddTickPrerequisiteActor(class AActor* PrerequisiteActor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddTickPrerequisiteActor");

        AActor_AddTickPrerequisiteActor_Params params;
        params.PrerequisiteActor = PrerequisiteActor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Actor.AddComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   TemplateName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bManualAttachment              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              RelativeTransform              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // class UObject*                 ComponentTemplateContext       (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UActorComponent*         ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UActorComponent* AActor::AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddComponent");

        AActor_AddComponent_Params params;
        params.TemplateName = TemplateName;
        params.bManualAttachment = bManualAttachment;
        params.RelativeTransform = RelativeTransform;
        params.ComponentTemplateContext = ComponentTemplateContext;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Actor.ActorHasTag
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   Tag                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AActor::ActorHasTag(const struct FName& Tag)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorHasTag");

        AActor_ActorHasTag_Params params;
        params.Tag = Tag;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.BlueprintFunctionLibrary.MakeStringAssetReference
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 AssetLongPathname              (CPF_Parm, CPF_ZeroConstructor)
    // struct FStringAssetReference   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FStringAssetReference UBlueprintFunctionLibrary::STATIC_MakeStringAssetReference(const struct FString& AssetLongPathname)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintFunctionLibrary.MakeStringAssetReference");

        UBlueprintFunctionLibrary_MakeStringAssetReference_Params params;
        params.AssetLongPathname = AssetLongPathname;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.ActorComponent.ToggleActive
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UActorComponent::ToggleActive()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ToggleActive");

        UActorComponent_ToggleActive_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ActorComponent.SetTickGroup
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<ETickingGroup>     NewTickGroup                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UActorComponent::SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetTickGroup");

        UActorComponent_SetTickGroup_Params params;
        params.NewTickGroup = NewTickGroup;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ActorComponent.SetTickableWhenPaused
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bTickableWhenPaused            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UActorComponent::SetTickableWhenPaused(bool bTickableWhenPaused)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetTickableWhenPaused");

        UActorComponent_SetTickableWhenPaused_Params params;
        params.bTickableWhenPaused = bTickableWhenPaused;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ActorComponent.SetIsReplicated
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           ShouldReplicate                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UActorComponent::SetIsReplicated(bool ShouldReplicate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetIsReplicated");

        UActorComponent_SetIsReplicated_Params params;
        params.ShouldReplicate = ShouldReplicate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ActorComponent.SetComponentTickInterval
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          TickInterval                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UActorComponent::SetComponentTickInterval(float TickInterval)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetComponentTickInterval");

        UActorComponent_SetComponentTickInterval_Params params;
        params.TickInterval = TickInterval;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ActorComponent.SetComponentTickEnabled
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnabled                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UActorComponent::SetComponentTickEnabled(bool bEnabled)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetComponentTickEnabled");

        UActorComponent_SetComponentTickEnabled_Params params;
        params.bEnabled = bEnabled;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ActorComponent.SetAutoActivate
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewAutoActivate               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UActorComponent::SetAutoActivate(bool bNewAutoActivate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetAutoActivate");

        UActorComponent_SetAutoActivate_Params params;
        params.bNewAutoActivate = bNewAutoActivate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ActorComponent.SetActive
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewActive                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bReset                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UActorComponent::SetActive(bool bNewActive, bool bReset)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetActive");

        UActorComponent_SetActive_Params params;
        params.bNewActive = bNewActive;
        params.bReset = bReset;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ActorComponent.RemoveTickPrerequisiteComponent
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UActorComponent*         PrerequisiteComponent          (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

    void UActorComponent::RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.RemoveTickPrerequisiteComponent");

        UActorComponent_RemoveTickPrerequisiteComponent_Params params;
        params.PrerequisiteComponent = PrerequisiteComponent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ActorComponent.RemoveTickPrerequisiteActor
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  PrerequisiteActor              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UActorComponent::RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.RemoveTickPrerequisiteActor");

        UActorComponent_RemoveTickPrerequisiteActor_Params params;
        params.PrerequisiteActor = PrerequisiteActor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ActorComponent.ReceiveTick
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // float                          DeltaSeconds                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UActorComponent::ReceiveTick(float DeltaSeconds)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ReceiveTick");

        UActorComponent_ReceiveTick_Params params;
        params.DeltaSeconds = DeltaSeconds;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ActorComponent.ReceiveEndPlay
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // TEnumAsByte<EEndPlayReason>    EndPlayReason                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UActorComponent::ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ReceiveEndPlay");

        UActorComponent_ReceiveEndPlay_Params params;
        params.EndPlayReason = EndPlayReason;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ActorComponent.ReceiveBeginPlay
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)

    void UActorComponent::ReceiveBeginPlay()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ReceiveBeginPlay");

        UActorComponent_ReceiveBeginPlay_Params params;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ActorComponent.OnRep_IsActive
    // (FUNC_Final, FUNC_Native, FUNC_Public)

    void UActorComponent::OnRep_IsActive()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.OnRep_IsActive");

        UActorComponent_OnRep_IsActive_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ActorComponent.K2_DestroyComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UActorComponent::K2_DestroyComponent(class UObject* Object)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.K2_DestroyComponent");

        UActorComponent_K2_DestroyComponent_Params params;
        params.Object = Object;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ActorComponent.IsComponentTickEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UActorComponent::IsComponentTickEnabled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.IsComponentTickEnabled");

        UActorComponent_IsComponentTickEnabled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.ActorComponent.IsBeingDestroyed
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UActorComponent::IsBeingDestroyed()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.IsBeingDestroyed");

        UActorComponent_IsBeingDestroyed_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.ActorComponent.IsActive
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UActorComponent::IsActive()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.IsActive");

        UActorComponent_IsActive_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.ActorComponent.GetOwner
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AActor* UActorComponent::GetOwner()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.GetOwner");

        UActorComponent_GetOwner_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.ActorComponent.GetComponentTickInterval
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UActorComponent::GetComponentTickInterval()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.GetComponentTickInterval");

        UActorComponent_GetComponentTickInterval_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.ActorComponent.Deactivate
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UActorComponent::Deactivate()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.Deactivate");

        UActorComponent_Deactivate_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ActorComponent.ComponentHasTag
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   Tag                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UActorComponent::ComponentHasTag(const struct FName& Tag)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ComponentHasTag");

        UActorComponent_ComponentHasTag_Params params;
        params.Tag = Tag;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.ActorComponent.AddTickPrerequisiteComponent
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UActorComponent*         PrerequisiteComponent          (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

    void UActorComponent::AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.AddTickPrerequisiteComponent");

        UActorComponent_AddTickPrerequisiteComponent_Params params;
        params.PrerequisiteComponent = PrerequisiteComponent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ActorComponent.AddTickPrerequisiteActor
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  PrerequisiteActor              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UActorComponent::AddTickPrerequisiteActor(class AActor* PrerequisiteActor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.AddTickPrerequisiteActor");

        UActorComponent_AddTickPrerequisiteActor_Params params;
        params.PrerequisiteActor = PrerequisiteActor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ActorComponent.Activate
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bReset                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UActorComponent::Activate(bool bReset)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.Activate");

        UActorComponent_Activate_Params params;
        params.bReset = bReset;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneComponent.ToggleVisibility
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bPropagateToChildren           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::ToggleVisibility(bool bPropagateToChildren)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.ToggleVisibility");

        USceneComponent_ToggleVisibility_Params params;
        params.bPropagateToChildren = bPropagateToChildren;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneComponent.SnapTo
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class USceneComponent*         InParent                       (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   InSocketName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool USceneComponent::SnapTo(class USceneComponent* InParent, const struct FName& InSocketName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SnapTo");

        USceneComponent_SnapTo_Params params;
        params.InParent = InParent;
        params.InSocketName = InSocketName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.SetWorldScale3D
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewScale                       (CPF_Parm, CPF_IsPlainOldData)

    void USceneComponent::SetWorldScale3D(const struct FVector& NewScale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetWorldScale3D");

        USceneComponent_SetWorldScale3D_Params params;
        params.NewScale = NewScale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneComponent.SetVisibility
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewVisibility                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bPropagateToChildren           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::SetVisibility(bool bNewVisibility, bool bPropagateToChildren)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetVisibility");

        USceneComponent_SetVisibility_Params params;
        params.bNewVisibility = bNewVisibility;
        params.bPropagateToChildren = bPropagateToChildren;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneComponent.SetRelativeScale3D
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewScale3D                     (CPF_Parm, CPF_IsPlainOldData)

    void USceneComponent::SetRelativeScale3D(const struct FVector& NewScale3D)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetRelativeScale3D");

        USceneComponent_SetRelativeScale3D_Params params;
        params.NewScale3D = NewScale3D;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneComponent.SetHiddenInGame
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           NewHidden                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bPropagateToChildren           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::SetHiddenInGame(bool NewHidden, bool bPropagateToChildren)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetHiddenInGame");

        USceneComponent_SetHiddenInGame_Params params;
        params.NewHidden = NewHidden;
        params.bPropagateToChildren = bPropagateToChildren;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneComponent.SetAbsolute
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewAbsoluteLocation           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bNewAbsoluteRotation           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bNewAbsoluteScale              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetAbsolute");

        USceneComponent_SetAbsolute_Params params;
        params.bNewAbsoluteLocation = bNewAbsoluteLocation;
        params.bNewAbsoluteRotation = bNewAbsoluteRotation;
        params.bNewAbsoluteScale = bNewAbsoluteScale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneComponent.ResetRelativeTransform
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void USceneComponent::ResetRelativeTransform()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.ResetRelativeTransform");

        USceneComponent_ResetRelativeTransform_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneComponent.OnRep_Visibility
    // (FUNC_Final, FUNC_Native, FUNC_Private)
    // Parameters:
    // bool                           OldValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::OnRep_Visibility(bool OldValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.OnRep_Visibility");

        USceneComponent_OnRep_Visibility_Params params;
        params.OldValue = OldValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneComponent.OnRep_Transform
    // (FUNC_Final, FUNC_Native, FUNC_Private)

    void USceneComponent::OnRep_Transform()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.OnRep_Transform");

        USceneComponent_OnRep_Transform_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneComponent.OnRep_AttachSocketName
    // (FUNC_Final, FUNC_Native, FUNC_Private)

    void USceneComponent::OnRep_AttachSocketName()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.OnRep_AttachSocketName");

        USceneComponent_OnRep_AttachSocketName_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneComponent.OnRep_AttachParent
    // (FUNC_Final, FUNC_Native, FUNC_Private)

    void USceneComponent::OnRep_AttachParent()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.OnRep_AttachParent");

        USceneComponent_OnRep_AttachParent_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneComponent.OnRep_AttachChildren
    // (FUNC_Final, FUNC_Native, FUNC_Private)

    void USceneComponent::OnRep_AttachChildren()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.OnRep_AttachChildren");

        USceneComponent_OnRep_AttachChildren_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneComponent.K2_SetWorldTransform
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FTransform              NewTransform                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetWorldTransform");

        USceneComponent_K2_SetWorldTransform_Params params;
        params.NewTransform = NewTransform;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.SceneComponent.K2_SetWorldRotation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FRotator                NewRotation                    (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetWorldRotation");

        USceneComponent_K2_SetWorldRotation_Params params;
        params.NewRotation = NewRotation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.SceneComponent.K2_SetWorldLocationAndRotation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewLocation                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                NewRotation                    (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetWorldLocationAndRotation");

        USceneComponent_K2_SetWorldLocationAndRotation_Params params;
        params.NewLocation = NewLocation;
        params.NewRotation = NewRotation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.SceneComponent.K2_SetWorldLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewLocation                    (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetWorldLocation");

        USceneComponent_K2_SetWorldLocation_Params params;
        params.NewLocation = NewLocation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.SceneComponent.K2_SetRelativeTransform
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FTransform              NewTransform                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetRelativeTransform");

        USceneComponent_K2_SetRelativeTransform_Params params;
        params.NewTransform = NewTransform;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.SceneComponent.K2_SetRelativeRotation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FRotator                NewRotation                    (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetRelativeRotation");

        USceneComponent_K2_SetRelativeRotation_Params params;
        params.NewRotation = NewRotation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewLocation                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                NewRotation                    (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation");

        USceneComponent_K2_SetRelativeLocationAndRotation_Params params;
        params.NewLocation = NewLocation;
        params.NewRotation = NewRotation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.SceneComponent.K2_SetRelativeLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewLocation                    (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetRelativeLocation");

        USceneComponent_K2_SetRelativeLocation_Params params;
        params.NewLocation = NewLocation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.SceneComponent.K2_GetComponentToWorld
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FTransform              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FTransform USceneComponent::K2_GetComponentToWorld()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_GetComponentToWorld");

        USceneComponent_K2_GetComponentToWorld_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.K2_GetComponentScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USceneComponent::K2_GetComponentScale()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_GetComponentScale");

        USceneComponent_K2_GetComponentScale_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.K2_GetComponentRotation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator USceneComponent::K2_GetComponentRotation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_GetComponentRotation");

        USceneComponent_K2_GetComponentRotation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.K2_GetComponentLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USceneComponent::K2_GetComponentLocation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_GetComponentLocation");

        USceneComponent_K2_GetComponentLocation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.K2_DetachFromComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // EDetachmentRule                LocationRule                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EDetachmentRule                RotationRule                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EDetachmentRule                ScaleRule                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bCallModify                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_DetachFromComponent");

        USceneComponent_K2_DetachFromComponent_Params params;
        params.LocationRule = LocationRule;
        params.RotationRule = RotationRule;
        params.ScaleRule = ScaleRule;
        params.bCallModify = bCallModify;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneComponent.K2_AttachToComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class USceneComponent*         Parent                         (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   SocketName                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EAttachmentRule                LocationRule                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EAttachmentRule                RotationRule                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EAttachmentRule                ScaleRule                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bWeldSimulatedBodies           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool USceneComponent::K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AttachToComponent");

        USceneComponent_K2_AttachToComponent_Params params;
        params.Parent = Parent;
        params.SocketName = SocketName;
        params.LocationRule = LocationRule;
        params.RotationRule = RotationRule;
        params.ScaleRule = ScaleRule;
        params.bWeldSimulatedBodies = bWeldSimulatedBodies;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.K2_AttachTo
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class USceneComponent*         InParent                       (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   InSocketName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EAttachLocation>   AttachType                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bWeldSimulatedBodies           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool USceneComponent::K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AttachTo");

        USceneComponent_K2_AttachTo_Params params;
        params.InParent = InParent;
        params.InSocketName = InSocketName;
        params.AttachType = AttachType;
        params.bWeldSimulatedBodies = bWeldSimulatedBodies;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.K2_AddWorldTransform
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FTransform              DeltaTransform                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddWorldTransform");

        USceneComponent_K2_AddWorldTransform_Params params;
        params.DeltaTransform = DeltaTransform;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.SceneComponent.K2_AddWorldRotation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FRotator                DeltaRotation                  (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddWorldRotation");

        USceneComponent_K2_AddWorldRotation_Params params;
        params.DeltaRotation = DeltaRotation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.SceneComponent.K2_AddWorldOffset
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 DeltaLocation                  (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddWorldOffset");

        USceneComponent_K2_AddWorldOffset_Params params;
        params.DeltaLocation = DeltaLocation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.SceneComponent.K2_AddRelativeRotation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FRotator                DeltaRotation                  (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddRelativeRotation");

        USceneComponent_K2_AddRelativeRotation_Params params;
        params.DeltaRotation = DeltaRotation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.SceneComponent.K2_AddRelativeLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 DeltaLocation                  (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddRelativeLocation");

        USceneComponent_K2_AddRelativeLocation_Params params;
        params.DeltaLocation = DeltaLocation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.SceneComponent.K2_AddLocalTransform
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FTransform              DeltaTransform                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddLocalTransform");

        USceneComponent_K2_AddLocalTransform_Params params;
        params.DeltaTransform = DeltaTransform;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.SceneComponent.K2_AddLocalRotation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FRotator                DeltaRotation                  (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddLocalRotation");

        USceneComponent_K2_AddLocalRotation_Params params;
        params.DeltaRotation = DeltaRotation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.SceneComponent.K2_AddLocalOffset
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 DeltaLocation                  (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepHitResult                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddLocalOffset");

        USceneComponent_K2_AddLocalOffset_Params params;
        params.DeltaLocation = DeltaLocation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SweepHitResult != nullptr)
            *SweepHitResult = params.SweepHitResult;
    }


    // Function Engine.SceneComponent.IsVisible
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool USceneComponent::IsVisible()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.IsVisible");

        USceneComponent_IsVisible_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.IsSimulatingPhysics
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool USceneComponent::IsSimulatingPhysics(const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.IsSimulatingPhysics");

        USceneComponent_IsSimulatingPhysics_Params params;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.IsAnySimulatingPhysics
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool USceneComponent::IsAnySimulatingPhysics()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.IsAnySimulatingPhysics");

        USceneComponent_IsAnySimulatingPhysics_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.GetUpVector
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USceneComponent::GetUpVector()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetUpVector");

        USceneComponent_GetUpVector_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.GetSocketTransform
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   InSocketName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ERelativeTransformSpace> TransformSpace                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FTransform USceneComponent::GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetSocketTransform");

        USceneComponent_GetSocketTransform_Params params;
        params.InSocketName = InSocketName;
        params.TransformSpace = TransformSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.GetSocketRotation
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   InSocketName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator USceneComponent::GetSocketRotation(const struct FName& InSocketName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetSocketRotation");

        USceneComponent_GetSocketRotation_Params params;
        params.InSocketName = InSocketName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.GetSocketQuaternion
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   InSocketName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FQuat                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FQuat USceneComponent::GetSocketQuaternion(const struct FName& InSocketName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetSocketQuaternion");

        USceneComponent_GetSocketQuaternion_Params params;
        params.InSocketName = InSocketName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.GetSocketLocation
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   InSocketName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USceneComponent::GetSocketLocation(const struct FName& InSocketName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetSocketLocation");

        USceneComponent_GetSocketLocation_Params params;
        params.InSocketName = InSocketName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.GetRightVector
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USceneComponent::GetRightVector()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetRightVector");

        USceneComponent_GetRightVector_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.GetRelativeTransform
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FTransform              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FTransform USceneComponent::GetRelativeTransform()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetRelativeTransform");

        USceneComponent_GetRelativeTransform_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.GetPhysicsVolume
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class APhysicsVolume*          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class APhysicsVolume* USceneComponent::GetPhysicsVolume()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetPhysicsVolume");

        USceneComponent_GetPhysicsVolume_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.GetParentComponents
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TArray<class USceneComponent*> Parents                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)

    void USceneComponent::GetParentComponents(TArray<class USceneComponent*>* Parents)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetParentComponents");

        USceneComponent_GetParentComponents_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Parents != nullptr)
            *Parents = params.Parents;
    }


    // Function Engine.SceneComponent.GetNumChildrenComponents
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int USceneComponent::GetNumChildrenComponents()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetNumChildrenComponents");

        USceneComponent_GetNumChildrenComponents_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.GetForwardVector
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USceneComponent::GetForwardVector()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetForwardVector");

        USceneComponent_GetForwardVector_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.GetComponentVelocity
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USceneComponent::GetComponentVelocity()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetComponentVelocity");

        USceneComponent_GetComponentVelocity_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.GetChildrenComponents
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           bIncludeAllDescendants         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class USceneComponent*> Children                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)

    void USceneComponent::GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetChildrenComponents");

        USceneComponent_GetChildrenComponents_Params params;
        params.bIncludeAllDescendants = bIncludeAllDescendants;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Children != nullptr)
            *Children = params.Children;
    }


    // Function Engine.SceneComponent.GetChildComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ChildIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USceneComponent*         ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class USceneComponent* USceneComponent::GetChildComponent(int ChildIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetChildComponent");

        USceneComponent_GetChildComponent_Params params;
        params.ChildIndex = ChildIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.GetAttachSocketName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FName USceneComponent::GetAttachSocketName()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetAttachSocketName");

        USceneComponent_GetAttachSocketName_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.GetAttachParent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class USceneComponent*         ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class USceneComponent* USceneComponent::GetAttachParent()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetAttachParent");

        USceneComponent_GetAttachParent_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.GetAllSocketNames
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TArray<struct FName>           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    TArray<struct FName> USceneComponent::GetAllSocketNames()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetAllSocketNames");

        USceneComponent_GetAllSocketNames_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.DoesSocketExist
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   InSocketName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool USceneComponent::DoesSocketExist(const struct FName& InSocketName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.DoesSocketExist");

        USceneComponent_DoesSocketExist_Params params;
        params.InSocketName = InSocketName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SceneComponent.DetachFromParent
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bMaintainWorldPosition         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bCallModify                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneComponent::DetachFromParent(bool bMaintainWorldPosition, bool bCallModify)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.DetachFromParent");

        USceneComponent_DetachFromParent_Params params;
        params.bMaintainWorldPosition = bMaintainWorldPosition;
        params.bCallModify = bCallModify;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.WakeRigidBody
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::WakeRigidBody(const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.WakeRigidBody");

        UPrimitiveComponent_WakeRigidBody_Params params;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.WakeAllRigidBodies
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UPrimitiveComponent::WakeAllRigidBodies()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.WakeAllRigidBodies");

        UPrimitiveComponent_WakeAllRigidBodies_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetWalkableSlopeOverride
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FWalkableSlopeOverride  NewOverride                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetWalkableSlopeOverride(const struct FWalkableSlopeOverride& NewOverride)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetWalkableSlopeOverride");

        UPrimitiveComponent_SetWalkableSlopeOverride_Params params;
        params.NewOverride = NewOverride;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetTranslucentSortPriority
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            NewTranslucentSortPriority     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetTranslucentSortPriority(int NewTranslucentSortPriority)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetTranslucentSortPriority");

        UPrimitiveComponent_SetTranslucentSortPriority_Params params;
        params.NewTranslucentSortPriority = NewTranslucentSortPriority;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetSimulatePhysics
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bSimulate                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetSimulatePhysics(bool bSimulate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetSimulatePhysics");

        UPrimitiveComponent_SetSimulatePhysics_Params params;
        params.bSimulate = bSimulate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetRenderInMono
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bValue                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetRenderInMono(bool bValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRenderInMono");

        UPrimitiveComponent_SetRenderInMono_Params params;
        params.bValue = bValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetRenderInMainPass
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bValue                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetRenderInMainPass(bool bValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRenderInMainPass");

        UPrimitiveComponent_SetRenderInMainPass_Params params;
        params.bValue = bValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetRenderCustomDepth
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bValue                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetRenderCustomDepth(bool bValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRenderCustomDepth");

        UPrimitiveComponent_SetRenderCustomDepth_Params params;
        params.bValue = bValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetPhysMaterialOverride
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UPhysicalMaterial*       NewPhysMaterial                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysMaterialOverride");

        UPrimitiveComponent_SetPhysMaterialOverride_Params params;
        params.NewPhysMaterial = NewPhysMaterial;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewMaxAngVel                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAddToCurrent                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity");

        UPrimitiveComponent_SetPhysicsMaxAngularVelocity_Params params;
        params.NewMaxAngVel = NewMaxAngVel;
        params.bAddToCurrent = bAddToCurrent;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewVel                         (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bAddToCurrent                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity");

        UPrimitiveComponent_SetPhysicsLinearVelocity_Params params;
        params.NewVel = NewVel;
        params.bAddToCurrent = bAddToCurrent;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewAngVel                      (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bAddToCurrent                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity");

        UPrimitiveComponent_SetPhysicsAngularVelocity_Params params;
        params.NewAngVel = NewAngVel;
        params.bAddToCurrent = bAddToCurrent;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetOwnerNoSee
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewOwnerNoSee                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetOwnerNoSee(bool bNewOwnerNoSee)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOwnerNoSee");

        UPrimitiveComponent_SetOwnerNoSee_Params params;
        params.bNewOwnerNoSee = bNewOwnerNoSee;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetOnlyOwnerSee
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewOnlyOwnerSee               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetOnlyOwnerSee(bool bNewOnlyOwnerSee)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOnlyOwnerSee");

        UPrimitiveComponent_SetOnlyOwnerSee_Params params;
        params.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewNotifyRigidBodyCollision   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision");

        UPrimitiveComponent_SetNotifyRigidBodyCollision_Params params;
        params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetMaterialByName
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   MaterialSlotName               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInterface*      Material                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetMaterialByName(const struct FName& MaterialSlotName, class UMaterialInterface* Material)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetMaterialByName");

        UPrimitiveComponent_SetMaterialByName_Params params;
        params.MaterialSlotName = MaterialSlotName;
        params.Material = Material;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetMaterial
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            ElementIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInterface*      Material                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetMaterial(int ElementIndex, class UMaterialInterface* Material)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetMaterial");

        UPrimitiveComponent_SetMaterial_Params params;
        params.ElementIndex = ElementIndex;
        params.Material = Material;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetMassScale
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InMassScale                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetMassScale(const struct FName& BoneName, float InMassScale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetMassScale");

        UPrimitiveComponent_SetMassScale_Params params;
        params.BoneName = BoneName;
        params.InMassScale = InMassScale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetMassOverrideInKg
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MassInKg                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bOverrideMass                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetMassOverrideInKg(const struct FName& BoneName, float MassInKg, bool bOverrideMass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetMassOverrideInKg");

        UPrimitiveComponent_SetMassOverrideInKg_Params params;
        params.BoneName = BoneName;
        params.MassInKg = MassInKg;
        params.bOverrideMass = bOverrideMass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetLockedAxis
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<EDOFMode>          LockedAxis                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetLockedAxis(TEnumAsByte<EDOFMode> LockedAxis)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetLockedAxis");

        UPrimitiveComponent_SetLockedAxis_Params params;
        params.LockedAxis = LockedAxis;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetLinearDamping
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InDamping                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetLinearDamping(float InDamping)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetLinearDamping");

        UPrimitiveComponent_SetLinearDamping_Params params;
        params.InDamping = InDamping;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetEnableGravity
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bGravityEnabled                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetEnableGravity(bool bGravityEnabled)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetEnableGravity");

        UPrimitiveComponent_SetEnableGravity_Params params;
        params.bGravityEnabled = bGravityEnabled;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetCustomDepthStencilValue
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetCustomDepthStencilValue(int Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCustomDepthStencilValue");

        UPrimitiveComponent_SetCustomDepthStencilValue_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetCullDistance
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewCullDistance                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetCullDistance(float NewCullDistance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCullDistance");

        UPrimitiveComponent_SetCullDistance_Params params;
        params.NewCullDistance = NewCullDistance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetConstraintMode
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<EDOFMode>          ConstraintMode                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetConstraintMode");

        UPrimitiveComponent_SetConstraintMode_Params params;
        params.ConstraintMode = ConstraintMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetCollisionResponseToChannel
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<ECollisionChannel> Channel                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ECollisionResponse> NewResponse                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionResponseToChannel");

        UPrimitiveComponent_SetCollisionResponseToChannel_Params params;
        params.Channel = Channel;
        params.NewResponse = NewResponse;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<ECollisionResponse> NewResponse                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels");

        UPrimitiveComponent_SetCollisionResponseToAllChannels_Params params;
        params.NewResponse = NewResponse;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetCollisionProfileName
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   InCollisionProfileName         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetCollisionProfileName(const struct FName& InCollisionProfileName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionProfileName");

        UPrimitiveComponent_SetCollisionProfileName_Params params;
        params.InCollisionProfileName = InCollisionProfileName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetCollisionObjectType
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<ECollisionChannel> Channel                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionObjectType");

        UPrimitiveComponent_SetCollisionObjectType_Params params;
        params.Channel = Channel;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetCollisionEnabled
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<ECollisionEnabled> NewType                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionEnabled");

        UPrimitiveComponent_SetCollisionEnabled_Params params;
        params.NewType = NewType;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetCenterOfMass
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 CenterOfMassOffset             (CPF_Parm, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetCenterOfMass(const struct FVector& CenterOfMassOffset, const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCenterOfMass");

        UPrimitiveComponent_SetCenterOfMass_Params params;
        params.CenterOfMassOffset = CenterOfMassOffset;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetCastShadow
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           NewCastShadow                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetCastShadow(bool NewCastShadow)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCastShadow");

        UPrimitiveComponent_SetCastShadow_Params params;
        params.NewCastShadow = NewCastShadow;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetBoundsScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewBoundsScale                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetBoundsScale(float NewBoundsScale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetBoundsScale");

        UPrimitiveComponent_SetBoundsScale_Params params;
        params.NewBoundsScale = NewBoundsScale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetAngularDamping
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InDamping                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetAngularDamping(float InDamping)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAngularDamping");

        UPrimitiveComponent_SetAngularDamping_Params params;
        params.InDamping = InDamping;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewVel                         (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bAddToCurrent                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity");

        UPrimitiveComponent_SetAllPhysicsLinearVelocity_Params params;
        params.NewVel = NewVel;
        params.bAddToCurrent = bAddToCurrent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.SetAllMassScale
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InMassScale                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::SetAllMassScale(float InMassScale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAllMassScale");

        UPrimitiveComponent_SetAllMassScale_Params params;
        params.InMassScale = InMassScale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.ScaleByMomentOfInertia
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 InputVector                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UPrimitiveComponent::ScaleByMomentOfInertia(const struct FVector& InputVector, const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ScaleByMomentOfInertia");

        UPrimitiveComponent_ScaleByMomentOfInertia_Params params;
        params.InputVector = InputVector;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.PutRigidBodyToSleep
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::PutRigidBodyToSleep(const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.PutRigidBodyToSleep");

        UPrimitiveComponent_PutRigidBodyToSleep_Params params;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.K2_LineTraceComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 TraceStart                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 TraceEnd                       (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bShowTrace                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 HitLocation                    (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 HitNormal                      (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              OutHit                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UPrimitiveComponent::K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_LineTraceComponent");

        UPrimitiveComponent_K2_LineTraceComponent_Params params;
        params.TraceStart = TraceStart;
        params.TraceEnd = TraceEnd;
        params.bTraceComplex = bTraceComplex;
        params.bShowTrace = bShowTrace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (HitLocation != nullptr)
            *HitLocation = params.HitLocation;
        if (HitNormal != nullptr)
            *HitNormal = params.HitNormal;
        if (BoneName != nullptr)
            *BoneName = params.BoneName;
        if (OutHit != nullptr)
            *OutHit = params.OutHit;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UPrimitiveComponent::K2_IsQueryCollisionEnabled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled");

        UPrimitiveComponent_K2_IsQueryCollisionEnabled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UPrimitiveComponent::K2_IsPhysicsCollisionEnabled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled");

        UPrimitiveComponent_K2_IsPhysicsCollisionEnabled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.K2_IsCollisionEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UPrimitiveComponent::K2_IsCollisionEnabled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_IsCollisionEnabled");

        UPrimitiveComponent_K2_IsCollisionEnabled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.IsOverlappingComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UPrimitiveComponent*     OtherComp                      (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UPrimitiveComponent::IsOverlappingComponent(class UPrimitiveComponent* OtherComp)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IsOverlappingComponent");

        UPrimitiveComponent_IsOverlappingComponent_Params params;
        params.OtherComp = OtherComp;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.IsOverlappingActor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AActor*                  Other                          (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UPrimitiveComponent::IsOverlappingActor(class AActor* Other)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IsOverlappingActor");

        UPrimitiveComponent_IsOverlappingActor_Params params;
        params.Other = Other;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.IsGravityEnabled
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UPrimitiveComponent::IsGravityEnabled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IsGravityEnabled");

        UPrimitiveComponent_IsGravityEnabled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.IsAnyRigidBodyAwake
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UPrimitiveComponent::IsAnyRigidBodyAwake()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IsAnyRigidBodyAwake");

        UPrimitiveComponent_IsAnyRigidBodyAwake_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.IgnoreComponentWhenMoving
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UPrimitiveComponent*     Component                      (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // bool                           bShouldIgnore                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IgnoreComponentWhenMoving");

        UPrimitiveComponent_IgnoreComponentWhenMoving_Params params;
        params.Component = Component;
        params.bShouldIgnore = bShouldIgnore;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.IgnoreActorWhenMoving
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  Actor                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bShouldIgnore                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IgnoreActorWhenMoving");

        UPrimitiveComponent_IgnoreActorWhenMoving_Params params;
        params.Actor = Actor;
        params.bShouldIgnore = bShouldIgnore;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.GetWalkableSlopeOverride
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FWalkableSlopeOverride  ReturnValue                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    struct FWalkableSlopeOverride UPrimitiveComponent::GetWalkableSlopeOverride()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetWalkableSlopeOverride");

        UPrimitiveComponent_GetWalkableSlopeOverride_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Point                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UPrimitiveComponent::GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint");

        UPrimitiveComponent_GetPhysicsLinearVelocityAtPoint_Params params;
        params.Point = Point;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UPrimitiveComponent::GetPhysicsLinearVelocity(const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity");

        UPrimitiveComponent_GetPhysicsLinearVelocity_Params params;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UPrimitiveComponent::GetPhysicsAngularVelocity(const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity");

        UPrimitiveComponent_GetPhysicsAngularVelocity_Params params;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.GetOverlappingComponents
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TArray<class UPrimitiveComponent*> InOverlappingComponents        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)

    void UPrimitiveComponent::GetOverlappingComponents(TArray<class UPrimitiveComponent*>* InOverlappingComponents)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetOverlappingComponents");

        UPrimitiveComponent_GetOverlappingComponents_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (InOverlappingComponents != nullptr)
            *InOverlappingComponents = params.InOverlappingComponents;
    }


    // Function Engine.PrimitiveComponent.GetOverlappingActors
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TArray<class AActor*>          OverlappingActors              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // class UClass*                  ClassFilter                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetOverlappingActors");

        UPrimitiveComponent_GetOverlappingActors_Params params;
        params.ClassFilter = ClassFilter;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OverlappingActors != nullptr)
            *OverlappingActors = params.OverlappingActors;
    }


    // Function Engine.PrimitiveComponent.GetOverlapInfos
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TArray<struct FOverlapInfo>    ReturnValue                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_ReferenceParm)

    TArray<struct FOverlapInfo> UPrimitiveComponent::GetOverlapInfos()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetOverlapInfos");

        UPrimitiveComponent_GetOverlapInfos_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.GetNumMaterials
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UPrimitiveComponent::GetNumMaterials()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetNumMaterials");

        UPrimitiveComponent_GetNumMaterials_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.GetMaterial
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ElementIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInterface*      ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UMaterialInterface* UPrimitiveComponent::GetMaterial(int ElementIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetMaterial");

        UPrimitiveComponent_GetMaterial_Params params;
        params.ElementIndex = ElementIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.GetMassScale
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UPrimitiveComponent::GetMassScale(const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetMassScale");

        UPrimitiveComponent_GetMassScale_Params params;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.GetMass
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UPrimitiveComponent::GetMass()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetMass");

        UPrimitiveComponent_GetMass_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.GetLinearDamping
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UPrimitiveComponent::GetLinearDamping()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetLinearDamping");

        UPrimitiveComponent_GetLinearDamping_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.GetInertiaTensor
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UPrimitiveComponent::GetInertiaTensor(const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetInertiaTensor");

        UPrimitiveComponent_GetInertiaTensor_Params params;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.GetCollisionResponseToChannel
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TEnumAsByte<ECollisionChannel> Channel                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ECollisionResponse> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    TEnumAsByte<ECollisionResponse> UPrimitiveComponent::GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetCollisionResponseToChannel");

        UPrimitiveComponent_GetCollisionResponseToChannel_Params params;
        params.Channel = Channel;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.GetCollisionProfileName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FName UPrimitiveComponent::GetCollisionProfileName()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetCollisionProfileName");

        UPrimitiveComponent_GetCollisionProfileName_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.GetCollisionObjectType
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TEnumAsByte<ECollisionChannel> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    TEnumAsByte<ECollisionChannel> UPrimitiveComponent::GetCollisionObjectType()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetCollisionObjectType");

        UPrimitiveComponent_GetCollisionObjectType_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.GetCollisionEnabled
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TEnumAsByte<ECollisionEnabled> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    TEnumAsByte<ECollisionEnabled> UPrimitiveComponent::GetCollisionEnabled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetCollisionEnabled");

        UPrimitiveComponent_GetCollisionEnabled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.GetClosestPointOnCollision
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 Point                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 OutPointOnBody                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UPrimitiveComponent::GetClosestPointOnCollision(const struct FVector& Point, const struct FName& BoneName, struct FVector* OutPointOnBody)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetClosestPointOnCollision");

        UPrimitiveComponent_GetClosestPointOnCollision_Params params;
        params.Point = Point;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutPointOnBody != nullptr)
            *OutPointOnBody = params.OutPointOnBody;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.GetCenterOfMass
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UPrimitiveComponent::GetCenterOfMass(const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetCenterOfMass");

        UPrimitiveComponent_GetCenterOfMass_Params params;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.GetAngularDamping
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UPrimitiveComponent::GetAngularDamping()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetAngularDamping");

        UPrimitiveComponent_GetAngularDamping_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            ElementIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInterface*      SourceMaterial                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInstanceDynamic* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UMaterialInstanceDynamic* UPrimitiveComponent::CreateDynamicMaterialInstance(int ElementIndex, class UMaterialInterface* SourceMaterial)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance");

        UPrimitiveComponent_CreateDynamicMaterialInstance_Params params;
        params.ElementIndex = ElementIndex;
        params.SourceMaterial = SourceMaterial;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            ElementIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInterface*      Parent                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInstanceDynamic* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UMaterialInstanceDynamic* UPrimitiveComponent::CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UMaterialInterface* Parent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial");

        UPrimitiveComponent_CreateAndSetMaterialInstanceDynamicFromMaterial_Params params;
        params.ElementIndex = ElementIndex;
        params.Parent = Parent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            ElementIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInstanceDynamic* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UMaterialInstanceDynamic* UPrimitiveComponent::CreateAndSetMaterialInstanceDynamic(int ElementIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic");

        UPrimitiveComponent_CreateAndSetMaterialInstanceDynamic_Params params;
        params.ElementIndex = ElementIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<class UPrimitiveComponent*> ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    TArray<class UPrimitiveComponent*> UPrimitiveComponent::CopyArrayOfMoveIgnoreComponents()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents");

        UPrimitiveComponent_CopyArrayOfMoveIgnoreComponents_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<class AActor*>          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    TArray<class AActor*> UPrimitiveComponent::CopyArrayOfMoveIgnoreActors()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors");

        UPrimitiveComponent_CopyArrayOfMoveIgnoreActors_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.ClearMoveIgnoreComponents
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UPrimitiveComponent::ClearMoveIgnoreComponents()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ClearMoveIgnoreComponents");

        UPrimitiveComponent_ClearMoveIgnoreComponents_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.ClearMoveIgnoreActors
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UPrimitiveComponent::ClearMoveIgnoreActors()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ClearMoveIgnoreActors");

        UPrimitiveComponent_ClearMoveIgnoreActors_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.CanCharacterStepUp
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class APawn*                   Pawn                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UPrimitiveComponent::CanCharacterStepUp(class APawn* Pawn)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CanCharacterStepUp");

        UPrimitiveComponent_CanCharacterStepUp_Params params;
        params.Pawn = Pawn;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PrimitiveComponent.AddTorque
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Torque                         (CPF_Parm, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAccelChange                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::AddTorque(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddTorque");

        UPrimitiveComponent_AddTorque_Params params;
        params.Torque = Torque;
        params.BoneName = BoneName;
        params.bAccelChange = bAccelChange;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.AddRadialImpulse
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Origin                         (CPF_Parm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Strength                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ERadialImpulseFalloff> Falloff                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bVelChange                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddRadialImpulse");

        UPrimitiveComponent_AddRadialImpulse_Params params;
        params.Origin = Origin;
        params.Radius = Radius;
        params.Strength = Strength;
        params.Falloff = Falloff;
        params.bVelChange = bVelChange;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.AddRadialForce
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Origin                         (CPF_Parm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Strength                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ERadialImpulseFalloff> Falloff                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAccelChange                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddRadialForce");

        UPrimitiveComponent_AddRadialForce_Params params;
        params.Origin = Origin;
        params.Radius = Radius;
        params.Strength = Strength;
        params.Falloff = Falloff;
        params.bAccelChange = bAccelChange;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.AddImpulseAtLocation
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Impulse                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddImpulseAtLocation");

        UPrimitiveComponent_AddImpulseAtLocation_Params params;
        params.Impulse = Impulse;
        params.Location = Location;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.AddImpulse
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Impulse                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bVelChange                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::AddImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddImpulse");

        UPrimitiveComponent_AddImpulse_Params params;
        params.Impulse = Impulse;
        params.BoneName = BoneName;
        params.bVelChange = bVelChange;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.AddForceAtLocation
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Force                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::AddForceAtLocation(const struct FVector& Force, const struct FVector& Location, const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddForceAtLocation");

        UPrimitiveComponent_AddForceAtLocation_Params params;
        params.Force = Force;
        params.Location = Location;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.AddForce
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Force                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAccelChange                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::AddForce(const struct FVector& Force, const struct FName& BoneName, bool bAccelChange)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddForce");

        UPrimitiveComponent_AddForce_Params params;
        params.Force = Force;
        params.BoneName = BoneName;
        params.bAccelChange = bAccelChange;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PrimitiveComponent.AddAngularImpulse
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Impulse                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bVelChange                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPrimitiveComponent::AddAngularImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddAngularImpulse");

        UPrimitiveComponent_AddAngularImpulse_Params params;
        params.Impulse = Impulse;
        params.BoneName = BoneName;
        params.bVelChange = bVelChange;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.WorldSettings.OnRep_WorldGravityZ
    // (FUNC_Native, FUNC_Public)

    void AWorldSettings::OnRep_WorldGravityZ()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldSettings.OnRep_WorldGravityZ");

        AWorldSettings_OnRep_WorldGravityZ_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MeshComponent.SetVectorParameterValueOnMaterials
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ParameterName                  (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ParameterValue                 (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)

    void UMeshComponent::SetVectorParameterValueOnMaterials(const struct FName& ParameterName, const struct FVector& ParameterValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.SetVectorParameterValueOnMaterials");

        UMeshComponent_SetVectorParameterValueOnMaterials_Params params;
        params.ParameterName = ParameterName;
        params.ParameterValue = ParameterValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MeshComponent.SetScalarParameterValueOnMaterials
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ParameterName                  (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ParameterValue                 (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UMeshComponent::SetScalarParameterValueOnMaterials(const struct FName& ParameterName, float ParameterValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.SetScalarParameterValueOnMaterials");

        UMeshComponent_SetScalarParameterValueOnMaterials_Params params;
        params.ParameterName = ParameterName;
        params.ParameterValue = ParameterValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MeshComponent.IsMaterialSlotNameValid
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   MaterialSlotName               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UMeshComponent::IsMaterialSlotNameValid(const struct FName& MaterialSlotName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.IsMaterialSlotNameValid");

        UMeshComponent_IsMaterialSlotNameValid_Params params;
        params.MaterialSlotName = MaterialSlotName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MeshComponent.GetMaterialSlotNames
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TArray<struct FName>           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    TArray<struct FName> UMeshComponent::GetMaterialSlotNames()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.GetMaterialSlotNames");

        UMeshComponent_GetMaterialSlotNames_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MeshComponent.GetMaterials
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TArray<class UMaterialInterface*> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    TArray<class UMaterialInterface*> UMeshComponent::GetMaterials()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.GetMaterials");

        UMeshComponent_GetMaterials_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MeshComponent.GetMaterialIndex
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   MaterialSlotName               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UMeshComponent::GetMaterialIndex(const struct FName& MaterialSlotName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.GetMaterialIndex");

        UMeshComponent_GetMaterialIndex_Params params;
        params.MaterialSlotName = MaterialSlotName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.StaticMeshComponent.SetStaticMesh
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UStaticMesh*             NewMesh                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UStaticMeshComponent::SetStaticMesh(class UStaticMesh* NewMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetStaticMesh");

        UStaticMeshComponent_SetStaticMesh_Params params;
        params.NewMesh = NewMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.StaticMeshComponent.SetForcedLodModel
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            NewForcedLodModel              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UStaticMeshComponent::SetForcedLodModel(int NewForcedLodModel)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetForcedLodModel");

        UStaticMeshComponent_SetForcedLodModel_Params params;
        params.NewForcedLodModel = NewForcedLodModel;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UStaticMeshComponent::SetDistanceFieldSelfShadowBias(float NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias");

        UStaticMeshComponent_SetDistanceFieldSelfShadowBias_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.StaticMeshComponent.OnRep_StaticMesh
    // (FUNC_Final, FUNC_Native, FUNC_Public)
    // Parameters:
    // class UStaticMesh*             OldStaticMesh                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UStaticMeshComponent::OnRep_StaticMesh(class UStaticMesh* OldStaticMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.OnRep_StaticMesh");

        UStaticMeshComponent_OnRep_StaticMesh_Params params;
        params.OldStaticMesh = OldStaticMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.StaticMeshComponent.GetLocalBounds
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 Min                            (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 Max                            (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void UStaticMeshComponent::GetLocalBounds(struct FVector* Min, struct FVector* Max)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.GetLocalBounds");

        UStaticMeshComponent_GetLocalBounds_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Min != nullptr)
            *Min = params.Min;
        if (Max != nullptr)
            *Max = params.Max;
    }


    // Function Engine.Pawn.SpawnDefaultController
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void APawn::SpawnDefaultController()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpawnDefaultController");

        APawn_SpawnDefaultController_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Pawn.SetCanAffectNavigationGeneration
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewValue                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bForceUpdate                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APawn::SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetCanAffectNavigationGeneration");

        APawn_SetCanAffectNavigationGeneration_Params params;
        params.bNewValue = bNewValue;
        params.bForceUpdate = bForceUpdate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Pawn.ReceiveUnpossessed
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class AController*             OldController                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APawn::ReceiveUnpossessed(class AController* OldController)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReceiveUnpossessed");

        APawn_ReceiveUnpossessed_Params params;
        params.OldController = OldController;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Pawn.ReceivePossessed
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class AController*             NewController                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APawn::ReceivePossessed(class AController* NewController)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReceivePossessed");

        APawn_ReceivePossessed_Params params;
        params.NewController = NewController;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Pawn.PawnMakeNoise
    // (FUNC_Final, FUNC_BlueprintAuthorityOnly, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Loudness                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 NoiseLocation                  (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bUseNoiseMakerLocation         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  NoiseMaker                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APawn::PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PawnMakeNoise");

        APawn_PawnMakeNoise_Params params;
        params.Loudness = Loudness;
        params.NoiseLocation = NoiseLocation;
        params.bUseNoiseMakerLocation = bUseNoiseMakerLocation;
        params.NoiseMaker = NoiseMaker;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Pawn.OnRep_PlayerState
    // (FUNC_Native, FUNC_Public)

    void APawn::OnRep_PlayerState()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnRep_PlayerState");

        APawn_OnRep_PlayerState_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Pawn.OnRep_Controller
    // (FUNC_Native, FUNC_Public)

    void APawn::OnRep_Controller()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnRep_Controller");

        APawn_OnRep_Controller_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Pawn.LaunchPawn
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 LaunchVelocity                 (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bXYOverride                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bZOverride                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APawn::LaunchPawn(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.LaunchPawn");

        APawn_LaunchPawn_Params params;
        params.LaunchVelocity = LaunchVelocity;
        params.bXYOverride = bXYOverride;
        params.bZOverride = bZOverride;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Pawn.K2_GetMovementInputVector
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector APawn::K2_GetMovementInputVector()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.K2_GetMovementInputVector");

        APawn_K2_GetMovementInputVector_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Pawn.IsPlayerControlled
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APawn::IsPlayerControlled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsPlayerControlled");

        APawn_IsPlayerControlled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Pawn.IsMoveInputIgnored
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APawn::IsMoveInputIgnored()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsMoveInputIgnored");

        APawn_IsMoveInputIgnored_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Pawn.IsLocallyControlled
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APawn::IsLocallyControlled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsLocallyControlled");

        APawn_IsLocallyControlled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Pawn.IsControlled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APawn::IsControlled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsControlled");

        APawn_IsControlled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Pawn.GetPendingMovementInputVector
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector APawn::GetPendingMovementInputVector()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetPendingMovementInputVector");

        APawn_GetPendingMovementInputVector_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Pawn.GetNavAgentLocation
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector APawn::GetNavAgentLocation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetNavAgentLocation");

        APawn_GetNavAgentLocation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Pawn.GetMovementComponent
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UPawnMovementComponent*  ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UPawnMovementComponent* APawn::GetMovementComponent()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetMovementComponent");

        APawn_GetMovementComponent_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Pawn.GetMovementBaseActor
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class APawn*                   Pawn                           (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AActor* APawn::STATIC_GetMovementBaseActor(class APawn* Pawn)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetMovementBaseActor");

        APawn_GetMovementBaseActor_Params params;
        params.Pawn = Pawn;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Pawn.GetLastMovementInputVector
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector APawn::GetLastMovementInputVector()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetLastMovementInputVector");

        APawn_GetLastMovementInputVector_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Pawn.GetControlRotation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator APawn::GetControlRotation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetControlRotation");

        APawn_GetControlRotation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Pawn.GetController
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AController*             ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AController* APawn::GetController()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetController");

        APawn_GetController_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Pawn.GetBaseAimRotation
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator APawn::GetBaseAimRotation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetBaseAimRotation");

        APawn_GetBaseAimRotation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Pawn.DetachFromControllerPendingDestroy
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void APawn::DetachFromControllerPendingDestroy()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DetachFromControllerPendingDestroy");

        APawn_DetachFromControllerPendingDestroy_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Pawn.ConsumeMovementInputVector
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector APawn::ConsumeMovementInputVector()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ConsumeMovementInputVector");

        APawn_ConsumeMovementInputVector_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Pawn.AddMovementInput
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 WorldDirection                 (CPF_Parm, CPF_IsPlainOldData)
    // float                          ScaleValue                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bForce                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APawn::AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddMovementInput");

        APawn_AddMovementInput_Params params;
        params.WorldDirection = WorldDirection;
        params.ScaleValue = ScaleValue;
        params.bForce = bForce;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Pawn.AddControllerYawInput
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Val                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APawn::AddControllerYawInput(float Val)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddControllerYawInput");

        APawn_AddControllerYawInput_Params params;
        params.Val = Val;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Pawn.AddControllerRollInput
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Val                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APawn::AddControllerRollInput(float Val)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddControllerRollInput");

        APawn_AddControllerRollInput_Params params;
        params.Val = Val;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Pawn.AddControllerPitchInput
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Val                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APawn::AddControllerPitchInput(float Val)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddControllerPitchInput");

        APawn_AddControllerPitchInput_Params params;
        params.Val = Val;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.UnCrouch
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bClientSimulation              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::UnCrouch(bool bClientSimulation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.UnCrouch");

        ACharacter_UnCrouch_Params params;
        params.bClientSimulation = bClientSimulation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.StopJumping
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void ACharacter::StopJumping()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.StopJumping");

        ACharacter_StopJumping_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.StopAnimMontage
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UAnimMontage*            AnimMontage                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::StopAnimMontage(class UAnimMontage* AnimMontage)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.StopAnimMontage");

        ACharacter_StopAnimMontage_Params params;
        params.AnimMontage = AnimMontage;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.SetReplicateMovement
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bInReplicateMovement           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::SetReplicateMovement(bool bInReplicateMovement)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.SetReplicateMovement");

        ACharacter_SetReplicateMovement_Params params;
        params.bInReplicateMovement = bInReplicateMovement;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.ServerMoveOld
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)
    // Parameters:
    // float                          OldTimeStamp                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector_NetQuantize10   OldAccel                       (CPF_Parm)
    // unsigned char                  OldMoveFlags                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::ServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize10& OldAccel, unsigned char OldMoveFlags)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ServerMoveOld");

        ACharacter_ServerMoveOld_Params params;
        params.OldTimeStamp = OldTimeStamp;
        params.OldAccel = OldAccel;
        params.OldMoveFlags = OldMoveFlags;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.ServerMoveNoBase
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)
    // Parameters:
    // float                          TimeStamp                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector_NetQuantize10   InAccel                        (CPF_Parm)
    // struct FVector_NetQuantize100  ClientLoc                      (CPF_Parm)
    // unsigned char                  CompressedMoveFlags            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ClientRoll                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // uint32_t                       View                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ClientMovementMode             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::ServerMoveNoBase(float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, unsigned char ClientMovementMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ServerMoveNoBase");

        ACharacter_ServerMoveNoBase_Params params;
        params.TimeStamp = TimeStamp;
        params.InAccel = InAccel;
        params.ClientLoc = ClientLoc;
        params.CompressedMoveFlags = CompressedMoveFlags;
        params.ClientRoll = ClientRoll;
        params.View = View;
        params.ClientMovementMode = ClientMovementMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.ServerMoveDualNoBase
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)
    // Parameters:
    // float                          TimeStamp0                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector_NetQuantize10   InAccel0                       (CPF_Parm)
    // unsigned char                  PendingFlags                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // uint32_t                       View0                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          TimeStamp                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector_NetQuantize10   InAccel                        (CPF_Parm)
    // struct FVector_NetQuantize100  ClientLoc                      (CPF_Parm)
    // unsigned char                  NewFlags                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ClientRoll                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // uint32_t                       View                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ClientMovementMode             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::ServerMoveDualNoBase(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, unsigned char ClientMovementMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ServerMoveDualNoBase");

        ACharacter_ServerMoveDualNoBase_Params params;
        params.TimeStamp0 = TimeStamp0;
        params.InAccel0 = InAccel0;
        params.PendingFlags = PendingFlags;
        params.View0 = View0;
        params.TimeStamp = TimeStamp;
        params.InAccel = InAccel;
        params.ClientLoc = ClientLoc;
        params.NewFlags = NewFlags;
        params.ClientRoll = ClientRoll;
        params.View = View;
        params.ClientMovementMode = ClientMovementMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.ServerMoveDualHybridRootMotion
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)
    // Parameters:
    // float                          TimeStamp0                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector_NetQuantize10   InAccel0                       (CPF_Parm)
    // unsigned char                  PendingFlags                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // uint32_t                       View0                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          TimeStamp                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector_NetQuantize10   InAccel                        (CPF_Parm)
    // struct FVector_NetQuantize100  ClientLoc                      (CPF_Parm)
    // unsigned char                  NewFlags                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ClientRoll                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // uint32_t                       View                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UPrimitiveComponent*     ClientMovementBase             (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   ClientBaseBoneName             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ClientMovementMode             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::ServerMoveDualHybridRootMotion(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ServerMoveDualHybridRootMotion");

        ACharacter_ServerMoveDualHybridRootMotion_Params params;
        params.TimeStamp0 = TimeStamp0;
        params.InAccel0 = InAccel0;
        params.PendingFlags = PendingFlags;
        params.View0 = View0;
        params.TimeStamp = TimeStamp;
        params.InAccel = InAccel;
        params.ClientLoc = ClientLoc;
        params.NewFlags = NewFlags;
        params.ClientRoll = ClientRoll;
        params.View = View;
        params.ClientMovementBase = ClientMovementBase;
        params.ClientBaseBoneName = ClientBaseBoneName;
        params.ClientMovementMode = ClientMovementMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.ServerMoveDual
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)
    // Parameters:
    // float                          TimeStamp0                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector_NetQuantize10   InAccel0                       (CPF_Parm)
    // unsigned char                  PendingFlags                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // uint32_t                       View0                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          TimeStamp                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector_NetQuantize10   InAccel                        (CPF_Parm)
    // struct FVector_NetQuantize100  ClientLoc                      (CPF_Parm)
    // unsigned char                  NewFlags                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ClientRoll                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // uint32_t                       View                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UPrimitiveComponent*     ClientMovementBase             (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   ClientBaseBoneName             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ClientMovementMode             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::ServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ServerMoveDual");

        ACharacter_ServerMoveDual_Params params;
        params.TimeStamp0 = TimeStamp0;
        params.InAccel0 = InAccel0;
        params.PendingFlags = PendingFlags;
        params.View0 = View0;
        params.TimeStamp = TimeStamp;
        params.InAccel = InAccel;
        params.ClientLoc = ClientLoc;
        params.NewFlags = NewFlags;
        params.ClientRoll = ClientRoll;
        params.View = View;
        params.ClientMovementBase = ClientMovementBase;
        params.ClientBaseBoneName = ClientBaseBoneName;
        params.ClientMovementMode = ClientMovementMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.ServerMove
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)
    // Parameters:
    // float                          TimeStamp                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector_NetQuantize10   InAccel                        (CPF_Parm)
    // struct FVector_NetQuantize100  ClientLoc                      (CPF_Parm)
    // unsigned char                  CompressedMoveFlags            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ClientRoll                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // uint32_t                       View                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UPrimitiveComponent*     ClientMovementBase             (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   ClientBaseBoneName             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ClientMovementMode             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::ServerMove(float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ServerMove");

        ACharacter_ServerMove_Params params;
        params.TimeStamp = TimeStamp;
        params.InAccel = InAccel;
        params.ClientLoc = ClientLoc;
        params.CompressedMoveFlags = CompressedMoveFlags;
        params.ClientRoll = ClientRoll;
        params.View = View;
        params.ClientMovementBase = ClientMovementBase;
        params.ClientBaseBoneName = ClientBaseBoneName;
        params.ClientMovementMode = ClientMovementMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.PlayAnimMontage
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UAnimMontage*            AnimMontage                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InPlayRate                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   StartSectionName               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float ACharacter::PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.PlayAnimMontage");

        ACharacter_PlayAnimMontage_Params params;
        params.AnimMontage = AnimMontage;
        params.InPlayRate = InPlayRate;
        params.StartSectionName = StartSectionName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Character.OnWalkingOffLedge
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintEvent)
    // Parameters:
    // struct FVector                 PreviousFloorImpactNormal      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 PreviousFloorContactNormal     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 PreviousLocation               (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          TimeDelta                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::OnWalkingOffLedge(const struct FVector& PreviousFloorImpactNormal, const struct FVector& PreviousFloorContactNormal, const struct FVector& PreviousLocation, float TimeDelta)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnWalkingOffLedge");

        ACharacter_OnWalkingOffLedge_Params params;
        params.PreviousFloorImpactNormal = PreviousFloorImpactNormal;
        params.PreviousFloorContactNormal = PreviousFloorContactNormal;
        params.PreviousLocation = PreviousLocation;
        params.TimeDelta = TimeDelta;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.OnRep_RootMotion
    // (FUNC_Final, FUNC_Native, FUNC_Public)

    void ACharacter::OnRep_RootMotion()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnRep_RootMotion");

        ACharacter_OnRep_RootMotion_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.OnRep_ReplicatedBasedMovement
    // (FUNC_Native, FUNC_Public)

    void ACharacter::OnRep_ReplicatedBasedMovement()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnRep_ReplicatedBasedMovement");

        ACharacter_OnRep_ReplicatedBasedMovement_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.OnRep_IsCrouched
    // (FUNC_Native, FUNC_Public)

    void ACharacter::OnRep_IsCrouched()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnRep_IsCrouched");

        ACharacter_OnRep_IsCrouched_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.OnLaunched
    // (FUNC_Event, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintEvent)
    // Parameters:
    // struct FVector                 LaunchVelocity                 (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bXYOverride                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bZOverride                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnLaunched");

        ACharacter_OnLaunched_Params params;
        params.LaunchVelocity = LaunchVelocity;
        params.bXYOverride = bXYOverride;
        params.bZOverride = bZOverride;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.OnLanded
    // (FUNC_Event, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintEvent)
    // Parameters:
    // struct FHitResult              Hit                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void ACharacter::OnLanded(const struct FHitResult& Hit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnLanded");

        ACharacter_OnLanded_Params params;
        params.Hit = Hit;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.OnJumped
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)

    void ACharacter::OnJumped()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnJumped");

        ACharacter_OnJumped_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.LaunchCharacter
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 LaunchVelocity                 (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bXYOverride                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bZOverride                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.LaunchCharacter");

        ACharacter_LaunchCharacter_Params params;
        params.LaunchVelocity = LaunchVelocity;
        params.bXYOverride = bXYOverride;
        params.bZOverride = bZOverride;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.K2_UpdateCustomMovement
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::K2_UpdateCustomMovement(float DeltaTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.K2_UpdateCustomMovement");

        ACharacter_K2_UpdateCustomMovement_Params params;
        params.DeltaTime = DeltaTime;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.K2_OnStartCrouch
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // float                          HalfHeightAdjust               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScaledHalfHeightAdjust         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.K2_OnStartCrouch");

        ACharacter_K2_OnStartCrouch_Params params;
        params.HalfHeightAdjust = HalfHeightAdjust;
        params.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.K2_OnMovementModeChanged
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // TEnumAsByte<EMovementMode>     PrevMovementMode               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EMovementMode>     NewMovementMode                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  PrevCustomMode                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  NewCustomMode                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::K2_OnMovementModeChanged(TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.K2_OnMovementModeChanged");

        ACharacter_K2_OnMovementModeChanged_Params params;
        params.PrevMovementMode = PrevMovementMode;
        params.NewMovementMode = NewMovementMode;
        params.PrevCustomMode = PrevCustomMode;
        params.NewCustomMode = NewCustomMode;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.K2_OnEndCrouch
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // float                          HalfHeightAdjust               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScaledHalfHeightAdjust         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.K2_OnEndCrouch");

        ACharacter_K2_OnEndCrouch_Params params;
        params.HalfHeightAdjust = HalfHeightAdjust;
        params.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.Jump
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void ACharacter::Jump()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.Jump");

        ACharacter_Jump_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.IsPlayingRootMotion
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool ACharacter::IsPlayingRootMotion()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.IsPlayingRootMotion");

        ACharacter_IsPlayingRootMotion_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Character.IsPlayingNetworkedRootMotionMontage
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool ACharacter::IsPlayingNetworkedRootMotionMontage()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.IsPlayingNetworkedRootMotionMontage");

        ACharacter_IsPlayingNetworkedRootMotionMontage_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Character.IsJumpProvidingForce
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool ACharacter::IsJumpProvidingForce()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.IsJumpProvidingForce");

        ACharacter_IsJumpProvidingForce_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Character.GetCurrentMontage
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UAnimMontage*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UAnimMontage* ACharacter::GetCurrentMontage()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.GetCurrentMontage");

        ACharacter_GetCurrentMontage_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Character.GetBaseTranslationOffset
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector ACharacter::GetBaseTranslationOffset()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.GetBaseTranslationOffset");

        ACharacter_GetBaseTranslationOffset_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Character.GetBaseRotationOffsetRotator
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator ACharacter::GetBaseRotationOffsetRotator()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.GetBaseRotationOffsetRotator");

        ACharacter_GetBaseRotationOffsetRotator_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Character.GetAnimRootMotionTranslationScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float ACharacter::GetAnimRootMotionTranslationScale()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.GetAnimRootMotionTranslationScale");

        ACharacter_GetAnimRootMotionTranslationScale_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Character.Crouch
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bClientSimulation              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::Crouch(bool bClientSimulation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.Crouch");

        ACharacter_Crouch_Params params;
        params.bClientSimulation = bClientSimulation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.ClientVeryShortAdjustPosition
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient)
    // Parameters:
    // float                          TimeStamp                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 NewLoc                         (CPF_Parm, CPF_IsPlainOldData)
    // class UPrimitiveComponent*     NewBase                        (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   NewBaseBoneName                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bHasBase                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bBaseRelativePosition          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ServerMovementMode             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::ClientVeryShortAdjustPosition(float TimeStamp, const struct FVector& NewLoc, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientVeryShortAdjustPosition");

        ACharacter_ClientVeryShortAdjustPosition_Params params;
        params.TimeStamp = TimeStamp;
        params.NewLoc = NewLoc;
        params.NewBase = NewBase;
        params.NewBaseBoneName = NewBaseBoneName;
        params.bHasBase = bHasBase;
        params.bBaseRelativePosition = bBaseRelativePosition;
        params.ServerMovementMode = ServerMovementMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.ClientCheatWalk
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)

    void ACharacter::ClientCheatWalk()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientCheatWalk");

        ACharacter_ClientCheatWalk_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.ClientCheatGhost
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)

    void ACharacter::ClientCheatGhost()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientCheatGhost");

        ACharacter_ClientCheatGhost_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.ClientCheatFly
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)

    void ACharacter::ClientCheatFly()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientCheatFly");

        ACharacter_ClientCheatFly_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.ClientAdjustRootMotionSourcePosition
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient)
    // Parameters:
    // float                          TimeStamp                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRootMotionSourceGroup  ServerRootMotion               (CPF_Parm)
    // bool                           bHasAnimRootMotion             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ServerMontageTrackPosition     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ServerLoc                      (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector_NetQuantizeNormal ServerRotation                 (CPF_Parm)
    // float                          ServerVelZ                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UPrimitiveComponent*     ServerBase                     (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   ServerBoneName                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bHasBase                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bBaseRelativePosition          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ServerMovementMode             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::ClientAdjustRootMotionSourcePosition(float TimeStamp, const struct FRootMotionSourceGroup& ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientAdjustRootMotionSourcePosition");

        ACharacter_ClientAdjustRootMotionSourcePosition_Params params;
        params.TimeStamp = TimeStamp;
        params.ServerRootMotion = ServerRootMotion;
        params.bHasAnimRootMotion = bHasAnimRootMotion;
        params.ServerMontageTrackPosition = ServerMontageTrackPosition;
        params.ServerLoc = ServerLoc;
        params.ServerRotation = ServerRotation;
        params.ServerVelZ = ServerVelZ;
        params.ServerBase = ServerBase;
        params.ServerBoneName = ServerBoneName;
        params.bHasBase = bHasBase;
        params.bBaseRelativePosition = bBaseRelativePosition;
        params.ServerMovementMode = ServerMovementMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.ClientAdjustRootMotionPosition
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient)
    // Parameters:
    // float                          TimeStamp                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ServerMontageTrackPosition     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ServerLoc                      (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector_NetQuantizeNormal ServerRotation                 (CPF_Parm)
    // float                          ServerVelZ                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UPrimitiveComponent*     ServerBase                     (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   ServerBoneName                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bHasBase                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bBaseRelativePosition          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ServerMovementMode             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientAdjustRootMotionPosition");

        ACharacter_ClientAdjustRootMotionPosition_Params params;
        params.TimeStamp = TimeStamp;
        params.ServerMontageTrackPosition = ServerMontageTrackPosition;
        params.ServerLoc = ServerLoc;
        params.ServerRotation = ServerRotation;
        params.ServerVelZ = ServerVelZ;
        params.ServerBase = ServerBase;
        params.ServerBoneName = ServerBoneName;
        params.bHasBase = bHasBase;
        params.bBaseRelativePosition = bBaseRelativePosition;
        params.ServerMovementMode = ServerMovementMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.ClientAdjustPosition
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient)
    // Parameters:
    // float                          TimeStamp                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 NewLoc                         (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 NewVel                         (CPF_Parm, CPF_IsPlainOldData)
    // class UPrimitiveComponent*     NewBase                        (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   NewBaseBoneName                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bHasBase                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bBaseRelativePosition          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ServerMovementMode             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::ClientAdjustPosition(float TimeStamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientAdjustPosition");

        ACharacter_ClientAdjustPosition_Params params;
        params.TimeStamp = TimeStamp;
        params.NewLoc = NewLoc;
        params.NewVel = NewVel;
        params.NewBase = NewBase;
        params.NewBaseBoneName = NewBaseBoneName;
        params.bHasBase = bHasBase;
        params.bBaseRelativePosition = bBaseRelativePosition;
        params.ServerMovementMode = ServerMovementMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.ClientAckGoodMove
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // float                          TimeStamp                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ACharacter::ClientAckGoodMove(float TimeStamp)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientAckGoodMove");

        ACharacter_ClientAckGoodMove_Params params;
        params.TimeStamp = TimeStamp;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Character.CanJumpInternal
    // (FUNC_Native, FUNC_Event, FUNC_Protected, FUNC_BlueprintEvent, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool ACharacter::CanJumpInternal()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.CanJumpInternal");

        ACharacter_CanJumpInternal_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Character.CanJump
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool ACharacter::CanJump()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.CanJump");

        ACharacter_CanJump_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Controller.UnPossess
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AController::UnPossess()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.UnPossess");

        AController_UnPossess_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Controller.StopMovement
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AController::StopMovement()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopMovement");

        AController_StopMovement_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Controller.SetInitialLocationAndRotation
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewLocation                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FRotator                NewRotation                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void AController::SetInitialLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetInitialLocationAndRotation");

        AController_SetInitialLocationAndRotation_Params params;
        params.NewLocation = NewLocation;
        params.NewRotation = NewRotation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Controller.SetIgnoreMoveInput
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewMoveInput                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AController::SetIgnoreMoveInput(bool bNewMoveInput)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetIgnoreMoveInput");

        AController_SetIgnoreMoveInput_Params params;
        params.bNewMoveInput = bNewMoveInput;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Controller.SetIgnoreLookInput
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewLookInput                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AController::SetIgnoreLookInput(bool bNewLookInput)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetIgnoreLookInput");

        AController_SetIgnoreLookInput_Params params;
        params.bNewLookInput = bNewLookInput;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Controller.SetControlRotation
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FRotator                NewRotation                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void AController::SetControlRotation(const struct FRotator& NewRotation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetControlRotation");

        AController_SetControlRotation_Params params;
        params.NewRotation = NewRotation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Controller.ResetIgnoreMoveInput
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AController::ResetIgnoreMoveInput()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ResetIgnoreMoveInput");

        AController_ResetIgnoreMoveInput_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Controller.ResetIgnoreLookInput
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AController::ResetIgnoreLookInput()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ResetIgnoreLookInput");

        AController_ResetIgnoreLookInput_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Controller.ResetIgnoreInputFlags
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AController::ResetIgnoreInputFlags()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ResetIgnoreInputFlags");

        AController_ResetIgnoreInputFlags_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Controller.ReceiveInstigatedAnyDamage
    // (FUNC_BlueprintAuthorityOnly, FUNC_Event, FUNC_Protected, FUNC_BlueprintEvent)
    // Parameters:
    // float                          Damage                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UDamageType*             DamageType                     (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  DamagedActor                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  DamageCauser                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AController::ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveInstigatedAnyDamage");

        AController_ReceiveInstigatedAnyDamage_Params params;
        params.Damage = Damage;
        params.DamageType = DamageType;
        params.DamagedActor = DamagedActor;
        params.DamageCauser = DamageCauser;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Controller.Possess
    // (FUNC_BlueprintAuthorityOnly, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class APawn*                   InPawn                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AController::Possess(class APawn* InPawn)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Possess");

        AController_Possess_Params params;
        params.InPawn = InPawn;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Controller.OnRep_PlayerState
    // (FUNC_Native, FUNC_Public)

    void AController::OnRep_PlayerState()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnRep_PlayerState");

        AController_OnRep_PlayerState_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Controller.OnRep_Pawn
    // (FUNC_Native, FUNC_Public)

    void AController::OnRep_Pawn()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnRep_Pawn");

        AController_OnRep_Pawn_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Controller.LineOfSightTo
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AActor*                  Other                          (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ViewPoint                      (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bAlternateChecks               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AController::LineOfSightTo(class AActor* Other, const struct FVector& ViewPoint, bool bAlternateChecks)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.LineOfSightTo");

        AController_LineOfSightTo_Params params;
        params.Other = Other;
        params.ViewPoint = ViewPoint;
        params.bAlternateChecks = bAlternateChecks;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Controller.K2_GetPawn
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class APawn*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class APawn* AController::K2_GetPawn()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.K2_GetPawn");

        AController_K2_GetPawn_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Controller.IsPlayerController
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AController::IsPlayerController()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsPlayerController");

        AController_IsPlayerController_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Controller.IsMoveInputIgnored
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AController::IsMoveInputIgnored()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsMoveInputIgnored");

        AController_IsMoveInputIgnored_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Controller.IsLookInputIgnored
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AController::IsLookInputIgnored()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsLookInputIgnored");

        AController_IsLookInputIgnored_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Controller.IsLocalPlayerController
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AController::IsLocalPlayerController()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsLocalPlayerController");

        AController_IsLocalPlayerController_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Controller.IsLocalController
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AController::IsLocalController()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsLocalController");

        AController_IsLocalController_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Controller.GetViewTarget
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AActor* AController::GetViewTarget()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetViewTarget");

        AController_GetViewTarget_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Controller.GetDesiredRotation
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator AController::GetDesiredRotation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetDesiredRotation");

        AController_GetDesiredRotation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Controller.GetControlRotation
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator AController::GetControlRotation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetControlRotation");

        AController_GetControlRotation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Controller.ClientSetRotation
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient)
    // Parameters:
    // struct FRotator                NewRotation                    (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bResetCamera                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AController::ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetRotation");

        AController_ClientSetRotation_Params params;
        params.NewRotation = NewRotation;
        params.bResetCamera = bResetCamera;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Controller.ClientSetLocation
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient)
    // Parameters:
    // struct FVector                 NewLocation                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                NewRotation                    (CPF_Parm, CPF_IsPlainOldData)

    void AController::ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetLocation");

        AController_ClientSetLocation_Params params;
        params.NewLocation = NewLocation;
        params.NewRotation = NewRotation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Controller.CastToPlayerController
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class APlayerController*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class APlayerController* AController::CastToPlayerController()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CastToPlayerController");

        AController_CastToPlayerController_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.UnlockAIResources
    // (FUNC_Final, FUNC_BlueprintAuthorityOnly, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bUnlockMovement                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           UnlockAILogic                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimInstance::UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.UnlockAIResources");

        UAnimInstance_UnlockAIResources_Params params;
        params.bUnlockMovement = bUnlockMovement;
        params.UnlockAILogic = UnlockAILogic;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimInstance.TryGetPawnOwner
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class APawn*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class APawn* UAnimInstance::TryGetPawnOwner()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.TryGetPawnOwner");

        UAnimInstance_TryGetPawnOwner_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.StopSlotAnimation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InBlendOutTime                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   SlotNodeName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimInstance::StopSlotAnimation(float InBlendOutTime, const struct FName& SlotNodeName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.StopSlotAnimation");

        UAnimInstance_StopSlotAnimation_Params params;
        params.InBlendOutTime = InBlendOutTime;
        params.SlotNodeName = SlotNodeName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimInstance.SnapshotPose
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FPoseSnapshot           Snapshot                       (CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void UAnimInstance::SnapshotPose(struct FPoseSnapshot* Snapshot)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.SnapshotPose");

        UAnimInstance_SnapshotPose_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Snapshot != nullptr)
            *Snapshot = params.Snapshot;
    }


    // Function Engine.AnimInstance.SetRootMotionMode
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<ERootMotionMode>   Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimInstance::SetRootMotionMode(TEnumAsByte<ERootMotionMode> Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.SetRootMotionMode");

        UAnimInstance_SetRootMotionMode_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimInstance.SetMorphTarget
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   MorphTargetName                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimInstance::SetMorphTarget(const struct FName& MorphTargetName, float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.SetMorphTarget");

        UAnimInstance_SetMorphTarget_Params params;
        params.MorphTargetName = MorphTargetName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimInstance.SavePoseSnapshot
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   SnapshotName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimInstance::SavePoseSnapshot(const struct FName& SnapshotName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.SavePoseSnapshot");

        UAnimInstance_SavePoseSnapshot_Params params;
        params.SnapshotName = SnapshotName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UAnimSequenceBase*       Asset                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   SlotNodeName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BlendInTime                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BlendOutTime                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InPlayRate                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            LoopCount                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BlendOutTriggerTime            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InTimeToStartMontageAt         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UAnimMontage*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UAnimMontage* UAnimInstance::PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage");

        UAnimInstance_PlaySlotAnimationAsDynamicMontage_Params params;
        params.Asset = Asset;
        params.SlotNodeName = SlotNodeName;
        params.BlendInTime = BlendInTime;
        params.BlendOutTime = BlendOutTime;
        params.InPlayRate = InPlayRate;
        params.LoopCount = LoopCount;
        params.BlendOutTriggerTime = BlendOutTriggerTime;
        params.InTimeToStartMontageAt = InTimeToStartMontageAt;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.PlaySlotAnimation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UAnimSequenceBase*       Asset                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   SlotNodeName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BlendInTime                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BlendOutTime                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InPlayRate                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            LoopCount                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::PlaySlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.PlaySlotAnimation");

        UAnimInstance_PlaySlotAnimation_Params params;
        params.Asset = Asset;
        params.SlotNodeName = SlotNodeName;
        params.BlendInTime = BlendInTime;
        params.BlendOutTime = BlendOutTime;
        params.InPlayRate = InPlayRate;
        params.LoopCount = LoopCount;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.Montage_Stop
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InBlendOutTime                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UAnimMontage*            Montage                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimInstance::Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_Stop");

        UAnimInstance_Montage_Stop_Params params;
        params.InBlendOutTime = InBlendOutTime;
        params.Montage = Montage;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimInstance.Montage_SetPosition
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UAnimMontage*            Montage                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          NewPosition                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimInstance::Montage_SetPosition(class UAnimMontage* Montage, float NewPosition)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_SetPosition");

        UAnimInstance_Montage_SetPosition_Params params;
        params.Montage = Montage;
        params.NewPosition = NewPosition;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimInstance.Montage_SetPlayRate
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UAnimMontage*            Montage                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          NewPlayRate                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimInstance::Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_SetPlayRate");

        UAnimInstance_Montage_SetPlayRate_Params params;
        params.Montage = Montage;
        params.NewPlayRate = NewPlayRate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimInstance.Montage_SetNextSection
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   SectionNameToChange            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   NextSection                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UAnimMontage*            Montage                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimInstance::Montage_SetNextSection(const struct FName& SectionNameToChange, const struct FName& NextSection, class UAnimMontage* Montage)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_SetNextSection");

        UAnimInstance_Montage_SetNextSection_Params params;
        params.SectionNameToChange = SectionNameToChange;
        params.NextSection = NextSection;
        params.Montage = Montage;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimInstance.Montage_Resume
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UAnimMontage*            Montage                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimInstance::Montage_Resume(class UAnimMontage* Montage)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_Resume");

        UAnimInstance_Montage_Resume_Params params;
        params.Montage = Montage;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimInstance.Montage_Play
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UAnimMontage*            MontageToPlay                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InPlayRate                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EMontagePlayReturnType         ReturnValueType                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InTimeToStartMontageAt         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_Play");

        UAnimInstance_Montage_Play_Params params;
        params.MontageToPlay = MontageToPlay;
        params.InPlayRate = InPlayRate;
        params.ReturnValueType = ReturnValueType;
        params.InTimeToStartMontageAt = InTimeToStartMontageAt;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.Montage_Pause
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UAnimMontage*            Montage                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimInstance::Montage_Pause(class UAnimMontage* Montage)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_Pause");

        UAnimInstance_Montage_Pause_Params params;
        params.Montage = Montage;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimInstance.Montage_JumpToSectionsEnd
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   SectionName                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UAnimMontage*            Montage                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimInstance::Montage_JumpToSectionsEnd(const struct FName& SectionName, class UAnimMontage* Montage)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_JumpToSectionsEnd");

        UAnimInstance_Montage_JumpToSectionsEnd_Params params;
        params.SectionName = SectionName;
        params.Montage = Montage;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimInstance.Montage_JumpToSection
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   SectionName                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UAnimMontage*            Montage                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimInstance::Montage_JumpToSection(const struct FName& SectionName, class UAnimMontage* Montage)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_JumpToSection");

        UAnimInstance_Montage_JumpToSection_Params params;
        params.SectionName = SectionName;
        params.Montage = Montage;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimInstance.Montage_IsPlaying
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UAnimMontage*            Montage                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UAnimInstance::Montage_IsPlaying(class UAnimMontage* Montage)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_IsPlaying");

        UAnimInstance_Montage_IsPlaying_Params params;
        params.Montage = Montage;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.Montage_IsActive
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UAnimMontage*            Montage                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UAnimInstance::Montage_IsActive(class UAnimMontage* Montage)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_IsActive");

        UAnimInstance_Montage_IsActive_Params params;
        params.Montage = Montage;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.Montage_GetPosition
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UAnimMontage*            Montage                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::Montage_GetPosition(class UAnimMontage* Montage)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetPosition");

        UAnimInstance_Montage_GetPosition_Params params;
        params.Montage = Montage;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.Montage_GetPlayRate
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UAnimMontage*            Montage                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::Montage_GetPlayRate(class UAnimMontage* Montage)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetPlayRate");

        UAnimInstance_Montage_GetPlayRate_Params params;
        params.Montage = Montage;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.Montage_GetIsStopped
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UAnimMontage*            Montage                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UAnimInstance::Montage_GetIsStopped(class UAnimMontage* Montage)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetIsStopped");

        UAnimInstance_Montage_GetIsStopped_Params params;
        params.Montage = Montage;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.Montage_GetCurrentSection
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UAnimMontage*            Montage                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FName UAnimInstance::Montage_GetCurrentSection(class UAnimMontage* Montage)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetCurrentSection");

        UAnimInstance_Montage_GetCurrentSection_Params params;
        params.Montage = Montage;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.Montage_GetBlendTime
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UAnimMontage*            Montage                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::Montage_GetBlendTime(class UAnimMontage* Montage)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetBlendTime");

        UAnimInstance_Montage_GetBlendTime_Params params;
        params.Montage = Montage;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.LockAIResources
    // (FUNC_Final, FUNC_BlueprintAuthorityOnly, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bLockMovement                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           LockAILogic                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimInstance::LockAIResources(bool bLockMovement, bool LockAILogic)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.LockAIResources");

        UAnimInstance_LockAIResources_Params params;
        params.bLockMovement = bLockMovement;
        params.LockAILogic = LockAILogic;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimInstance.IsSyncGroupBetweenMarkers
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   InSyncGroupName                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PreviousMarker                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   NextMarker                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bRespectMarkerOrder            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UAnimInstance::IsSyncGroupBetweenMarkers(const struct FName& InSyncGroupName, const struct FName& PreviousMarker, const struct FName& NextMarker, bool bRespectMarkerOrder)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.IsSyncGroupBetweenMarkers");

        UAnimInstance_IsSyncGroupBetweenMarkers_Params params;
        params.InSyncGroupName = InSyncGroupName;
        params.PreviousMarker = PreviousMarker;
        params.NextMarker = NextMarker;
        params.bRespectMarkerOrder = bRespectMarkerOrder;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.IsPlayingSlotAnimation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UAnimSequenceBase*       Asset                          (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   SlotNodeName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UAnimInstance::IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.IsPlayingSlotAnimation");

        UAnimInstance_IsPlayingSlotAnimation_Params params;
        params.Asset = Asset;
        params.SlotNodeName = SlotNodeName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.IsAnyMontagePlaying
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UAnimInstance::IsAnyMontagePlaying()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.IsAnyMontagePlaying");

        UAnimInstance_IsAnyMontagePlaying_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.HasMarkerBeenHitThisFrame
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   SyncGroup                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   MarkerName                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UAnimInstance::HasMarkerBeenHitThisFrame(const struct FName& SyncGroup, const struct FName& MarkerName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.HasMarkerBeenHitThisFrame");

        UAnimInstance_HasMarkerBeenHitThisFrame_Params params;
        params.SyncGroup = SyncGroup;
        params.MarkerName = MarkerName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetTimeToClosestMarker
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   SyncGroup                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   MarkerName                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OutMarkerTime                  (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UAnimInstance::GetTimeToClosestMarker(const struct FName& SyncGroup, const struct FName& MarkerName, float* OutMarkerTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetTimeToClosestMarker");

        UAnimInstance_GetTimeToClosestMarker_Params params;
        params.SyncGroup = SyncGroup;
        params.MarkerName = MarkerName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutMarkerTime != nullptr)
            *OutMarkerTime = params.OutMarkerTime;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetSyncGroupPosition
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   InSyncGroupName                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FMarkerSyncAnimPosition ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FMarkerSyncAnimPosition UAnimInstance::GetSyncGroupPosition(const struct FName& InSyncGroupName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetSyncGroupPosition");

        UAnimInstance_GetSyncGroupPosition_Params params;
        params.InSyncGroupName = InSyncGroupName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetStateWeight
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            MachineIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            StateIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetStateWeight(int MachineIndex, int StateIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetStateWeight");

        UAnimInstance_GetStateWeight_Params params;
        params.MachineIndex = MachineIndex;
        params.StateIndex = StateIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            MachineIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            StateIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction");

        UAnimInstance_GetRelevantAnimTimeRemainingFraction_Params params;
        params.MachineIndex = MachineIndex;
        params.StateIndex = StateIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetRelevantAnimTimeRemaining
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            MachineIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            StateIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetRelevantAnimTimeRemaining");

        UAnimInstance_GetRelevantAnimTimeRemaining_Params params;
        params.MachineIndex = MachineIndex;
        params.StateIndex = StateIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetRelevantAnimTimeFraction
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            MachineIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            StateIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetRelevantAnimTimeFraction");

        UAnimInstance_GetRelevantAnimTimeFraction_Params params;
        params.MachineIndex = MachineIndex;
        params.StateIndex = StateIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetRelevantAnimTime
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            MachineIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            StateIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetRelevantAnimTime(int MachineIndex, int StateIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetRelevantAnimTime");

        UAnimInstance_GetRelevantAnimTime_Params params;
        params.MachineIndex = MachineIndex;
        params.StateIndex = StateIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetRelevantAnimLength
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            MachineIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            StateIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetRelevantAnimLength(int MachineIndex, int StateIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetRelevantAnimLength");

        UAnimInstance_GetRelevantAnimLength_Params params;
        params.MachineIndex = MachineIndex;
        params.StateIndex = StateIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetOwningComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class USkeletalMeshComponent*  ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class USkeletalMeshComponent* UAnimInstance::GetOwningComponent()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetOwningComponent");

        UAnimInstance_GetOwningComponent_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetOwningActor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AActor* UAnimInstance::GetOwningActor()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetOwningActor");

        UAnimInstance_GetOwningActor_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            MachineIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            TransitionIndex                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction");

        UAnimInstance_GetInstanceTransitionTimeElapsedFraction_Params params;
        params.MachineIndex = MachineIndex;
        params.TransitionIndex = TransitionIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            MachineIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            TransitionIndex                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed");

        UAnimInstance_GetInstanceTransitionTimeElapsed_Params params;
        params.MachineIndex = MachineIndex;
        params.TransitionIndex = TransitionIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            MachineIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            TransitionIndex                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration");

        UAnimInstance_GetInstanceTransitionCrossfadeDuration_Params params;
        params.MachineIndex = MachineIndex;
        params.TransitionIndex = TransitionIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetInstanceStateWeight
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            MachineIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            StateIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetInstanceStateWeight(int MachineIndex, int StateIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceStateWeight");

        UAnimInstance_GetInstanceStateWeight_Params params;
        params.MachineIndex = MachineIndex;
        params.StateIndex = StateIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetInstanceMachineWeight
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            MachineIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetInstanceMachineWeight(int MachineIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceMachineWeight");

        UAnimInstance_GetInstanceMachineWeight_Params params;
        params.MachineIndex = MachineIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            MachineIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetInstanceCurrentStateElapsedTime(int MachineIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime");

        UAnimInstance_GetInstanceCurrentStateElapsedTime_Params params;
        params.MachineIndex = MachineIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            AssetPlayerIndex               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction");

        UAnimInstance_GetInstanceAssetPlayerTimeFromEndFraction_Params params;
        params.AssetPlayerIndex = AssetPlayerIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            AssetPlayerIndex               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd");

        UAnimInstance_GetInstanceAssetPlayerTimeFromEnd_Params params;
        params.AssetPlayerIndex = AssetPlayerIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            AssetPlayerIndex               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction");

        UAnimInstance_GetInstanceAssetPlayerTimeFraction_Params params;
        params.AssetPlayerIndex = AssetPlayerIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetInstanceAssetPlayerTime
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            AssetPlayerIndex               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetInstanceAssetPlayerTime(int AssetPlayerIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceAssetPlayerTime");

        UAnimInstance_GetInstanceAssetPlayerTime_Params params;
        params.AssetPlayerIndex = AssetPlayerIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetInstanceAssetPlayerLength
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            AssetPlayerIndex               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetInstanceAssetPlayerLength(int AssetPlayerIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceAssetPlayerLength");

        UAnimInstance_GetInstanceAssetPlayerLength_Params params;
        params.AssetPlayerIndex = AssetPlayerIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetCurveValue
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FName                   CurveName                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetCurveValue(const struct FName& CurveName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetCurveValue");

        UAnimInstance_GetCurveValue_Params params;
        params.CurveName = CurveName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetCurrentStateName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            MachineIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FName UAnimInstance::GetCurrentStateName(int MachineIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetCurrentStateName");

        UAnimInstance_GetCurrentStateName_Params params;
        params.MachineIndex = MachineIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetCurrentStateElapsedTime
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            MachineIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetCurrentStateElapsedTime(int MachineIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetCurrentStateElapsedTime");

        UAnimInstance_GetCurrentStateElapsedTime_Params params;
        params.MachineIndex = MachineIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetCurrentActiveMontage
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UAnimMontage*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UAnimMontage* UAnimInstance::GetCurrentActiveMontage()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetCurrentActiveMontage");

        UAnimInstance_GetCurrentActiveMontage_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetAnimAssetPlayerTimeFromEndFraction
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UAnimationAsset*         AnimAsset                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          CurrentTime                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::STATIC_GetAnimAssetPlayerTimeFromEndFraction(class UAnimationAsset* AnimAsset, float CurrentTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetAnimAssetPlayerTimeFromEndFraction");

        UAnimInstance_GetAnimAssetPlayerTimeFromEndFraction_Params params;
        params.AnimAsset = AnimAsset;
        params.CurrentTime = CurrentTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetAnimAssetPlayerTimeFromEnd
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UAnimationAsset*         AnimAsset                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          CurrentTime                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::GetAnimAssetPlayerTimeFromEnd(class UAnimationAsset* AnimAsset, float CurrentTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetAnimAssetPlayerTimeFromEnd");

        UAnimInstance_GetAnimAssetPlayerTimeFromEnd_Params params;
        params.AnimAsset = AnimAsset;
        params.CurrentTime = CurrentTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetAnimAssetPlayerTimeFraction
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UAnimationAsset*         AnimAsset                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          CurrentTime                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::STATIC_GetAnimAssetPlayerTimeFraction(class UAnimationAsset* AnimAsset, float CurrentTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetAnimAssetPlayerTimeFraction");

        UAnimInstance_GetAnimAssetPlayerTimeFraction_Params params;
        params.AnimAsset = AnimAsset;
        params.CurrentTime = CurrentTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.GetAnimAssetPlayerLength
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UAnimationAsset*         AnimAsset                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::STATIC_GetAnimAssetPlayerLength(class UAnimationAsset* AnimAsset)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetAnimAssetPlayerLength");

        UAnimInstance_GetAnimAssetPlayerLength_Params params;
        params.AnimAsset = AnimAsset;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.ClearMorphTargets
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UAnimInstance::ClearMorphTargets()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.ClearMorphTargets");

        UAnimInstance_ClearMorphTargets_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimInstance.CalculateDirection
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Velocity                       (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FRotator                BaseRotation                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimInstance::CalculateDirection(const struct FVector& Velocity, const struct FRotator& BaseRotation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.CalculateDirection");

        UAnimInstance_CalculateDirection_Params params;
        params.Velocity = Velocity;
        params.BaseRotation = BaseRotation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimInstance.BlueprintUpdateAnimation
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // float                          DeltaTimeX                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimInstance::BlueprintUpdateAnimation(float DeltaTimeX)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.BlueprintUpdateAnimation");

        UAnimInstance_BlueprintUpdateAnimation_Params params;
        params.DeltaTimeX = DeltaTimeX;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimInstance.BlueprintPostEvaluateAnimation
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)

    void UAnimInstance::BlueprintPostEvaluateAnimation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.BlueprintPostEvaluateAnimation");

        UAnimInstance_BlueprintPostEvaluateAnimation_Params params;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimInstance.BlueprintInitializeAnimation
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)

    void UAnimInstance::BlueprintInitializeAnimation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.BlueprintInitializeAnimation");

        UAnimInstance_BlueprintInitializeAnimation_Params params;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimNotify.Received_Notify
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent, FUNC_Const)
    // Parameters:
    // class USkeletalMeshComponent*  MeshComp                       (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // class UAnimSequenceBase*       Animation                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UAnimNotify::Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify.Received_Notify");

        UAnimNotify_Received_Notify_Params params;
        params.MeshComp = MeshComp;
        params.Animation = Animation;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimNotify.GetNotifyName
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent, FUNC_Const)
    // Parameters:
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UAnimNotify::GetNotifyName()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify.GetNotifyName");

        UAnimNotify_GetNotifyName_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimNotifyState.Received_NotifyTick
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent, FUNC_Const)
    // Parameters:
    // class USkeletalMeshComponent*  MeshComp                       (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // class UAnimSequenceBase*       Animation                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          FrameDeltaTime                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UAnimNotifyState::Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotifyState.Received_NotifyTick");

        UAnimNotifyState_Received_NotifyTick_Params params;
        params.MeshComp = MeshComp;
        params.Animation = Animation;
        params.FrameDeltaTime = FrameDeltaTime;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimNotifyState.Received_NotifyEnd
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent, FUNC_Const)
    // Parameters:
    // class USkeletalMeshComponent*  MeshComp                       (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // class UAnimSequenceBase*       Animation                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UAnimNotifyState::Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotifyState.Received_NotifyEnd");

        UAnimNotifyState_Received_NotifyEnd_Params params;
        params.MeshComp = MeshComp;
        params.Animation = Animation;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimNotifyState.Received_NotifyBegin
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent, FUNC_Const)
    // Parameters:
    // class USkeletalMeshComponent*  MeshComp                       (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // class UAnimSequenceBase*       Animation                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          TotalDuration                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UAnimNotifyState::Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotifyState.Received_NotifyBegin");

        UAnimNotifyState_Received_NotifyBegin_Params params;
        params.MeshComp = MeshComp;
        params.Animation = Animation;
        params.TotalDuration = TotalDuration;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimNotifyState.GetNotifyName
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent, FUNC_Const)
    // Parameters:
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UAnimNotifyState::GetNotifyName()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotifyState.GetNotifyName");

        UAnimNotifyState_GetNotifyName_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.BlueprintAsyncActionBase.Activate
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UBlueprintAsyncActionBase::Activate()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintAsyncActionBase.Activate");

        UBlueprintAsyncActionBase_Activate_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MovementComponent.StopMovementImmediately
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UMovementComponent::StopMovementImmediately()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.StopMovementImmediately");

        UMovementComponent_StopMovementImmediately_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MovementComponent.SnapUpdatedComponentToPlane
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UMovementComponent::SnapUpdatedComponentToPlane()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SnapUpdatedComponentToPlane");

        UMovementComponent_SnapUpdatedComponentToPlane_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MovementComponent.SetUpdatedComponent
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class USceneComponent*         NewUpdatedComponent            (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

    void UMovementComponent::SetUpdatedComponent(class USceneComponent* NewUpdatedComponent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetUpdatedComponent");

        UMovementComponent_SetUpdatedComponent_Params params;
        params.NewUpdatedComponent = NewUpdatedComponent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MovementComponent.SetPlaneConstraintOrigin
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 PlaneOrigin                    (CPF_Parm, CPF_IsPlainOldData)

    void UMovementComponent::SetPlaneConstraintOrigin(const struct FVector& PlaneOrigin)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetPlaneConstraintOrigin");

        UMovementComponent_SetPlaneConstraintOrigin_Params params;
        params.PlaneOrigin = PlaneOrigin;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MovementComponent.SetPlaneConstraintNormal
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 PlaneNormal                    (CPF_Parm, CPF_IsPlainOldData)

    void UMovementComponent::SetPlaneConstraintNormal(const struct FVector& PlaneNormal)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetPlaneConstraintNormal");

        UMovementComponent_SetPlaneConstraintNormal_Params params;
        params.PlaneNormal = PlaneNormal;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MovementComponent.SetPlaneConstraintFromVectors
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Forward                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Up                             (CPF_Parm, CPF_IsPlainOldData)

    void UMovementComponent::SetPlaneConstraintFromVectors(const struct FVector& Forward, const struct FVector& Up)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetPlaneConstraintFromVectors");

        UMovementComponent_SetPlaneConstraintFromVectors_Params params;
        params.Forward = Forward;
        params.Up = Up;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MovementComponent.SetPlaneConstraintEnabled
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnabled                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UMovementComponent::SetPlaneConstraintEnabled(bool bEnabled)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetPlaneConstraintEnabled");

        UMovementComponent_SetPlaneConstraintEnabled_Params params;
        params.bEnabled = bEnabled;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MovementComponent.SetPlaneConstraintAxisSetting
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // EPlaneConstraintAxisSetting    NewAxisSetting                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UMovementComponent::SetPlaneConstraintAxisSetting(EPlaneConstraintAxisSetting NewAxisSetting)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetPlaneConstraintAxisSetting");

        UMovementComponent_SetPlaneConstraintAxisSetting_Params params;
        params.NewAxisSetting = NewAxisSetting;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MovementComponent.PhysicsVolumeChanged
    // (FUNC_Native, FUNC_Public)
    // Parameters:
    // class APhysicsVolume*          NewVolume                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UMovementComponent::PhysicsVolumeChanged(class APhysicsVolume* NewVolume)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.PhysicsVolumeChanged");

        UMovementComponent_PhysicsVolumeChanged_Params params;
        params.NewVolume = NewVolume;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MovementComponent.K2_MoveUpdatedComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Delta                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                NewRotation                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FHitResult              OutHit                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bSweep                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UMovementComponent::K2_MoveUpdatedComponent(const struct FVector& Delta, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* OutHit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.K2_MoveUpdatedComponent");

        UMovementComponent_K2_MoveUpdatedComponent_Params params;
        params.Delta = Delta;
        params.NewRotation = NewRotation;
        params.bSweep = bSweep;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHit != nullptr)
            *OutHit = params.OutHit;

        return params.ReturnValue;
    }


    // Function Engine.MovementComponent.K2_GetModifiedMaxSpeed
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UMovementComponent::K2_GetModifiedMaxSpeed()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.K2_GetModifiedMaxSpeed");

        UMovementComponent_K2_GetModifiedMaxSpeed_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MovementComponent.K2_GetMaxSpeedModifier
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UMovementComponent::K2_GetMaxSpeedModifier()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.K2_GetMaxSpeedModifier");

        UMovementComponent_K2_GetMaxSpeedModifier_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MovementComponent.IsExceedingMaxSpeed
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          MaxSpeed                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UMovementComponent::IsExceedingMaxSpeed(float MaxSpeed)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.IsExceedingMaxSpeed");

        UMovementComponent_IsExceedingMaxSpeed_Params params;
        params.MaxSpeed = MaxSpeed;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MovementComponent.GetPlaneConstraintOrigin
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    struct FVector UMovementComponent::GetPlaneConstraintOrigin()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetPlaneConstraintOrigin");

        UMovementComponent_GetPlaneConstraintOrigin_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MovementComponent.GetPlaneConstraintNormal
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    struct FVector UMovementComponent::GetPlaneConstraintNormal()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetPlaneConstraintNormal");

        UMovementComponent_GetPlaneConstraintNormal_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MovementComponent.GetPlaneConstraintAxisSetting
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // EPlaneConstraintAxisSetting    ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    EPlaneConstraintAxisSetting UMovementComponent::GetPlaneConstraintAxisSetting()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetPlaneConstraintAxisSetting");

        UMovementComponent_GetPlaneConstraintAxisSetting_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MovementComponent.GetPhysicsVolume
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class APhysicsVolume*          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class APhysicsVolume* UMovementComponent::GetPhysicsVolume()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetPhysicsVolume");

        UMovementComponent_GetPhysicsVolume_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MovementComponent.GetMaxSpeed
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UMovementComponent::GetMaxSpeed()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetMaxSpeed");

        UMovementComponent_GetMaxSpeed_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MovementComponent.GetGravityZ
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UMovementComponent::GetGravityZ()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetGravityZ");

        UMovementComponent_GetGravityZ_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MovementComponent.ConstrainNormalToPlane
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 Normal                         (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UMovementComponent::ConstrainNormalToPlane(const struct FVector& Normal)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.ConstrainNormalToPlane");

        UMovementComponent_ConstrainNormalToPlane_Params params;
        params.Normal = Normal;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MovementComponent.ConstrainLocationToPlane
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UMovementComponent::ConstrainLocationToPlane(const struct FVector& Location)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.ConstrainLocationToPlane");

        UMovementComponent_ConstrainLocationToPlane_Params params;
        params.Location = Location;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MovementComponent.ConstrainDirectionToPlane
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 Direction                      (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UMovementComponent::ConstrainDirectionToPlane(const struct FVector& Direction)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.ConstrainDirectionToPlane");

        UMovementComponent_ConstrainDirectionToPlane_Params params;
        params.Direction = Direction;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavMovementComponent.StopMovementKeepPathing
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UNavMovementComponent::StopMovementKeepPathing()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.StopMovementKeepPathing");

        UNavMovementComponent_StopMovementKeepPathing_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.NavMovementComponent.StopActiveMovement
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UNavMovementComponent::StopActiveMovement()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.StopActiveMovement");

        UNavMovementComponent_StopActiveMovement_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.NavMovementComponent.IsSwimming
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UNavMovementComponent::IsSwimming()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsSwimming");

        UNavMovementComponent_IsSwimming_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavMovementComponent.IsMovingOnGround
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UNavMovementComponent::IsMovingOnGround()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsMovingOnGround");

        UNavMovementComponent_IsMovingOnGround_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavMovementComponent.IsFlying
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UNavMovementComponent::IsFlying()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsFlying");

        UNavMovementComponent_IsFlying_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavMovementComponent.IsFalling
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UNavMovementComponent::IsFalling()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsFalling");

        UNavMovementComponent_IsFalling_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavMovementComponent.IsCrouching
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UNavMovementComponent::IsCrouching()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsCrouching");

        UNavMovementComponent_IsCrouching_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PawnMovementComponent.K2_GetInputVector
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UPawnMovementComponent::K2_GetInputVector()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.K2_GetInputVector");

        UPawnMovementComponent_K2_GetInputVector_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PawnMovementComponent.IsMoveInputIgnored
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UPawnMovementComponent::IsMoveInputIgnored()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.IsMoveInputIgnored");

        UPawnMovementComponent_IsMoveInputIgnored_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PawnMovementComponent.GetPendingInputVector
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UPawnMovementComponent::GetPendingInputVector()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.GetPendingInputVector");

        UPawnMovementComponent_GetPendingInputVector_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PawnMovementComponent.GetPawnOwner
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class APawn*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class APawn* UPawnMovementComponent::GetPawnOwner()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.GetPawnOwner");

        UPawnMovementComponent_GetPawnOwner_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PawnMovementComponent.GetLastInputVector
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UPawnMovementComponent::GetLastInputVector()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.GetLastInputVector");

        UPawnMovementComponent_GetLastInputVector_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PawnMovementComponent.ConsumeInputVector
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UPawnMovementComponent::ConsumeInputVector()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.ConsumeInputVector");

        UPawnMovementComponent_ConsumeInputVector_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PawnMovementComponent.AddInputVector
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 WorldVector                    (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bForce                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPawnMovementComponent::AddInputVector(const struct FVector& WorldVector, bool bForce)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.AddInputVector");

        UPawnMovementComponent_AddInputVector_Params params;
        params.WorldVector = WorldVector;
        params.bForce = bForce;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraActor.GetAutoActivatePlayerIndex
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int ACameraActor::GetAutoActivatePlayerIndex()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraActor.GetAutoActivatePlayerIndex");

        ACameraActor_GetAutoActivatePlayerIndex_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.WasInputKeyJustReleased
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FKey                    Key                            (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APlayerController::WasInputKeyJustReleased(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.WasInputKeyJustReleased");

        APlayerController_WasInputKeyJustReleased_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.WasInputKeyJustPressed
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FKey                    Key                            (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APlayerController::WasInputKeyJustPressed(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.WasInputKeyJustPressed");

        APlayerController_WasInputKeyJustPressed_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.ToggleSpeaking
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // bool                           bInSpeaking                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ToggleSpeaking(bool bInSpeaking)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ToggleSpeaking");

        APlayerController_ToggleSpeaking_Params params;
        params.bInSpeaking = bInSpeaking;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.SwitchLevel
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FString                 URL                            (CPF_Parm, CPF_ZeroConstructor)

    void APlayerController::SwitchLevel(const struct FString& URL)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SwitchLevel");

        APlayerController_SwitchLevel_Params params;
        params.URL = URL;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.StopHapticEffect
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // EControllerHand                Hand                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::StopHapticEffect(EControllerHand Hand)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StopHapticEffect");

        APlayerController_StopHapticEffect_Params params;
        params.Hand = Hand;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.StartFire
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // unsigned char                  FireModeNum                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::StartFire(unsigned char FireModeNum)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StartFire");

        APlayerController_StartFire_Params params;
        params.FireModeNum = FireModeNum;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.SetVirtualJoystickVisibility
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bVisible                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::SetVirtualJoystickVisibility(bool bVisible)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetVirtualJoystickVisibility");

        APlayerController_SetVirtualJoystickVisibility_Params params;
        params.bVisible = bVisible;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.SetViewTargetWithBlend
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  NewViewTarget                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BlendTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EViewTargetBlendFunction> BlendFunc                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BlendExp                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bLockOutgoing                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetViewTargetWithBlend");

        APlayerController_SetViewTargetWithBlend_Params params;
        params.NewViewTarget = NewViewTarget;
        params.BlendTime = BlendTime;
        params.BlendFunc = BlendFunc;
        params.BlendExp = BlendExp;
        params.bLockOutgoing = bLockOutgoing;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.SetName
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FString                 S                              (CPF_Parm, CPF_ZeroConstructor)

    void APlayerController::SetName(const struct FString& S)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetName");

        APlayerController_SetName_Params params;
        params.S = S;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.SetMouseLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            X                              (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Y                              (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::SetMouseLocation(int X, int Y)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetMouseLocation");

        APlayerController_SetMouseLocation_Params params;
        params.X = X;
        params.Y = Y;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.SetHapticsByValue
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Frequency                      (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Amplitude                      (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EControllerHand                Hand                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::SetHapticsByValue(float Frequency, float Amplitude, EControllerHand Hand)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetHapticsByValue");

        APlayerController_SetHapticsByValue_Params params;
        params.Frequency = Frequency;
        params.Amplitude = Amplitude;
        params.Hand = Hand;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.SetControllerLightColor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FColor                  Color                          (CPF_Parm, CPF_IsPlainOldData)

    void APlayerController::SetControllerLightColor(const struct FColor& Color)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetControllerLightColor");

        APlayerController_SetControllerLightColor_Params params;
        params.Color = Color;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.SetCinematicMode
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bInCinematicMode               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bHidePlayer                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAffectsHUD                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAffectsMovement               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAffectsTurning                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetCinematicMode");

        APlayerController_SetCinematicMode_Params params;
        params.bInCinematicMode = bInCinematicMode;
        params.bHidePlayer = bHidePlayer;
        params.bAffectsHUD = bAffectsHUD;
        params.bAffectsMovement = bAffectsMovement;
        params.bAffectsTurning = bAffectsTurning;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.SetAudioListenerOverride
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class USceneComponent*         AttachToComponent              (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_Parm, CPF_IsPlainOldData)

    void APlayerController::SetAudioListenerOverride(class USceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetAudioListenerOverride");

        APlayerController_SetAudioListenerOverride_Params params;
        params.AttachToComponent = AttachToComponent;
        params.Location = Location;
        params.Rotation = Rotation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerViewSelf
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)
    // Parameters:
    // struct FViewTargetTransitionParams TransitionParams               (CPF_Parm)

    void APlayerController::ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewSelf");

        APlayerController_ServerViewSelf_Params params;
        params.TransitionParams = TransitionParams;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerViewPrevPlayer
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)

    void APlayerController::ServerViewPrevPlayer()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewPrevPlayer");

        APlayerController_ServerViewPrevPlayer_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerViewNextPlayer
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)

    void APlayerController::ServerViewNextPlayer()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewNextPlayer");

        APlayerController_ServerViewNextPlayer_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerVerifyViewTarget
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)

    void APlayerController::ServerVerifyViewTarget()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerVerifyViewTarget");

        APlayerController_ServerVerifyViewTarget_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerUpdateMultipleLevelsVisibility
    // (FUNC_Final, FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)
    // Parameters:
    // TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities              (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_ReferenceParm)

    void APlayerController::ServerUpdateMultipleLevelsVisibility(TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdateMultipleLevelsVisibility");

        APlayerController_ServerUpdateMultipleLevelsVisibility_Params params;
        params.LevelVisibilities = LevelVisibilities;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerUpdateLevelVisibility
    // (FUNC_Final, FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)
    // Parameters:
    // struct FName                   PackageName                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bIsVisible                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ServerUpdateLevelVisibility(const struct FName& PackageName, bool bIsVisible)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdateLevelVisibility");

        APlayerController_ServerUpdateLevelVisibility_Params params;
        params.PackageName = PackageName;
        params.bIsVisible = bIsVisible;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerUpdateCamera
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)
    // Parameters:
    // struct FVector_NetQuantize     CamLoc                         (CPF_Parm)
    // int                            CamPitchAndYaw                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int CamPitchAndYaw)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdateCamera");

        APlayerController_ServerUpdateCamera_Params params;
        params.CamLoc = CamLoc;
        params.CamPitchAndYaw = CamPitchAndYaw;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerUnmutePlayer
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)
    // Parameters:
    // struct FUniqueNetIdRepl        PlayerID                       (CPF_Parm)

    void APlayerController::ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerID)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUnmutePlayer");

        APlayerController_ServerUnmutePlayer_Params params;
        params.PlayerID = PlayerID;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerToggleAILogging
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)

    void APlayerController::ServerToggleAILogging()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerToggleAILogging");

        APlayerController_ServerToggleAILogging_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerShortTimeout
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)

    void APlayerController::ServerShortTimeout()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerShortTimeout");

        APlayerController_ServerShortTimeout_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerSetSpectatorWaiting
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)
    // Parameters:
    // bool                           bWaiting                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ServerSetSpectatorWaiting(bool bWaiting)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetSpectatorWaiting");

        APlayerController_ServerSetSpectatorWaiting_Params params;
        params.bWaiting = bWaiting;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerSetSpectatorLocation
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_HasDefaults, FUNC_NetValidate)
    // Parameters:
    // struct FVector                 NewLoc                         (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                NewRot                         (CPF_Parm, CPF_IsPlainOldData)

    void APlayerController::ServerSetSpectatorLocation(const struct FVector& NewLoc, const struct FRotator& NewRot)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetSpectatorLocation");

        APlayerController_ServerSetSpectatorLocation_Params params;
        params.NewLoc = NewLoc;
        params.NewRot = NewRot;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerRestartPlayer
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)

    void APlayerController::ServerRestartPlayer()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRestartPlayer");

        APlayerController_ServerRestartPlayer_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerPause
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)

    void APlayerController::ServerPause()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerPause");

        APlayerController_ServerPause_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerNotifyLoadedWorld
    // (FUNC_Final, FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)
    // Parameters:
    // struct FName                   WorldPackageName               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ServerNotifyLoadedWorld(const struct FName& WorldPackageName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerNotifyLoadedWorld");

        APlayerController_ServerNotifyLoadedWorld_Params params;
        params.WorldPackageName = WorldPackageName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerMutePlayer
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)
    // Parameters:
    // struct FUniqueNetIdRepl        PlayerID                       (CPF_Parm)

    void APlayerController::ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerID)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMutePlayer");

        APlayerController_ServerMutePlayer_Params params;
        params.PlayerID = PlayerID;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerCheckClientPossessionReliable
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)

    void APlayerController::ServerCheckClientPossessionReliable()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCheckClientPossessionReliable");

        APlayerController_ServerCheckClientPossessionReliable_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerCheckClientPossession
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)

    void APlayerController::ServerCheckClientPossession()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCheckClientPossession");

        APlayerController_ServerCheckClientPossession_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerChangeName
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)
    // Parameters:
    // struct FString                 S                              (CPF_Parm, CPF_ZeroConstructor)

    void APlayerController::ServerChangeName(const struct FString& S)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerChangeName");

        APlayerController_ServerChangeName_Params params;
        params.S = S;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerCamera
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)
    // Parameters:
    // struct FName                   NewMode                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ServerCamera(const struct FName& NewMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCamera");

        APlayerController_ServerCamera_Params params;
        params.NewMode = NewMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ServerAcknowledgePossession
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)
    // Parameters:
    // class APawn*                   P                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ServerAcknowledgePossession(class APawn* P)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerAcknowledgePossession");

        APlayerController_ServerAcknowledgePossession_Params params;
        params.P = P;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.SendToConsole
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FString                 Command                        (CPF_Parm, CPF_ZeroConstructor)

    void APlayerController::SendToConsole(const struct FString& Command)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SendToConsole");

        APlayerController_SendToConsole_Params params;
        params.Command = Command;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.RestartLevel
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void APlayerController::RestartLevel()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RestartLevel");

        APlayerController_RestartLevel_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ProjectWorldLocationToScreen
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 WorldLocation                  (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               ScreenLocation                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bPlayerViewportRelative        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APlayerController::ProjectWorldLocationToScreen(const struct FVector& WorldLocation, bool bPlayerViewportRelative, struct FVector2D* ScreenLocation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProjectWorldLocationToScreen");

        APlayerController_ProjectWorldLocationToScreen_Params params;
        params.WorldLocation = WorldLocation;
        params.bPlayerViewportRelative = bPlayerViewportRelative;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (ScreenLocation != nullptr)
            *ScreenLocation = params.ScreenLocation;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.PlayHapticEffect
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UHapticFeedbackEffect_Base* HapticEffect                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EControllerHand                Hand                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Scale                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bLoop                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, EControllerHand Hand, float Scale, bool bLoop)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayHapticEffect");

        APlayerController_PlayHapticEffect_Params params;
        params.HapticEffect = HapticEffect;
        params.Hand = Hand;
        params.Scale = Scale;
        params.bLoop = bLoop;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.PlayDynamicForceFeedback
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Intensity                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAffectsLeftLarge              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAffectsLeftSmall              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAffectsRightLarge             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAffectsRightSmall             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EDynamicForceFeedbackAction> Action                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLatentActionInfo       LatentInfo                     (CPF_Parm)

    void APlayerController::PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, const struct FLatentActionInfo& LatentInfo)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayDynamicForceFeedback");

        APlayerController_PlayDynamicForceFeedback_Params params;
        params.Intensity = Intensity;
        params.Duration = Duration;
        params.bAffectsLeftLarge = bAffectsLeftLarge;
        params.bAffectsLeftSmall = bAffectsLeftSmall;
        params.bAffectsRightLarge = bAffectsRightLarge;
        params.bAffectsRightSmall = bAffectsRightSmall;
        params.Action = Action;
        params.LatentInfo = LatentInfo;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.Pause
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void APlayerController::Pause()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Pause");

        APlayerController_Pause_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.OnServerStartedVisualLogger
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // bool                           bIsLogging                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::OnServerStartedVisualLogger(bool bIsLogging)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnServerStartedVisualLogger");

        APlayerController_OnServerStartedVisualLogger_Params params;
        params.bIsLogging = bIsLogging;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.LocalTravel
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FString                 URL                            (CPF_Parm, CPF_ZeroConstructor)

    void APlayerController::LocalTravel(const struct FString& URL)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LocalTravel");

        APlayerController_LocalTravel_Params params;
        params.URL = URL;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.IsInputKeyDown
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FKey                    Key                            (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APlayerController::IsInputKeyDown(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsInputKeyDown");

        APlayerController_IsInputKeyDown_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.GetViewportSize
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            SizeX                          (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            SizeY                          (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::GetViewportSize(int* SizeX, int* SizeY)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetViewportSize");

        APlayerController_GetViewportSize_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SizeX != nullptr)
            *SizeX = params.SizeX;
        if (SizeY != nullptr)
            *SizeY = params.SizeY;
    }


    // Function Engine.PlayerController.GetSpectatorPawn
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class ASpectatorPawn*          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class ASpectatorPawn* APlayerController::GetSpectatorPawn()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetSpectatorPawn");

        APlayerController_GetSpectatorPawn_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.GetMousePosition
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          LocationX                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          LocationY                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APlayerController::GetMousePosition(float* LocationX, float* LocationY)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetMousePosition");

        APlayerController_GetMousePosition_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (LocationX != nullptr)
            *LocationX = params.LocationX;
        if (LocationY != nullptr)
            *LocationY = params.LocationY;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.GetInputVectorKeyState
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FKey                    Key                            (CPF_Parm)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector APlayerController::GetInputVectorKeyState(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputVectorKeyState");

        APlayerController_GetInputVectorKeyState_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.GetInputTouchState
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TEnumAsByte<ETouchIndex>       FingerIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          LocationX                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          LocationY                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bIsCurrentlyPressed            (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputTouchState");

        APlayerController_GetInputTouchState_Params params;
        params.FingerIndex = FingerIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (LocationX != nullptr)
            *LocationX = params.LocationX;
        if (LocationY != nullptr)
            *LocationY = params.LocationY;
        if (bIsCurrentlyPressed != nullptr)
            *bIsCurrentlyPressed = params.bIsCurrentlyPressed;
    }


    // Function Engine.PlayerController.GetInputMouseDelta
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          DeltaX                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          DeltaY                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::GetInputMouseDelta(float* DeltaX, float* DeltaY)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputMouseDelta");

        APlayerController_GetInputMouseDelta_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (DeltaX != nullptr)
            *DeltaX = params.DeltaX;
        if (DeltaY != nullptr)
            *DeltaY = params.DeltaY;
    }


    // Function Engine.PlayerController.GetInputMotionState
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 Tilt                           (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 RotationRate                   (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 Gravity                        (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 Acceleration                   (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void APlayerController::GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputMotionState");

        APlayerController_GetInputMotionState_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Tilt != nullptr)
            *Tilt = params.Tilt;
        if (RotationRate != nullptr)
            *RotationRate = params.RotationRate;
        if (Gravity != nullptr)
            *Gravity = params.Gravity;
        if (Acceleration != nullptr)
            *Acceleration = params.Acceleration;
    }


    // Function Engine.PlayerController.GetInputKeyTimeDown
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FKey                    Key                            (CPF_Parm)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float APlayerController::GetInputKeyTimeDown(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputKeyTimeDown");

        APlayerController_GetInputKeyTimeDown_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.GetInputAnalogStickState
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TEnumAsByte<EControllerAnalogStick> WhichStick                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StickX                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StickY                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputAnalogStickState");

        APlayerController_GetInputAnalogStickState_Params params;
        params.WhichStick = WhichStick;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (StickX != nullptr)
            *StickX = params.StickX;
        if (StickY != nullptr)
            *StickY = params.StickY;
    }


    // Function Engine.PlayerController.GetInputAnalogKeyState
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FKey                    Key                            (CPF_Parm)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float APlayerController::GetInputAnalogKeyState(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputAnalogKeyState");

        APlayerController_GetInputAnalogKeyState_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.GetHUD
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AHUD*                    ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AHUD* APlayerController::GetHUD()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHUD");

        APlayerController_GetHUD_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.GetHitResultUnderFingerForObjects
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TEnumAsByte<ETouchIndex>       FingerIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              HitResult                      (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APlayerController::GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderFingerForObjects");

        APlayerController_GetHitResultUnderFingerForObjects_Params params;
        params.FingerIndex = FingerIndex;
        params.ObjectTypes = ObjectTypes;
        params.bTraceComplex = bTraceComplex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (HitResult != nullptr)
            *HitResult = params.HitResult;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.GetHitResultUnderFingerByChannel
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TEnumAsByte<ETouchIndex>       FingerIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              HitResult                      (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APlayerController::GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderFingerByChannel");

        APlayerController_GetHitResultUnderFingerByChannel_Params params;
        params.FingerIndex = FingerIndex;
        params.TraceChannel = TraceChannel;
        params.bTraceComplex = bTraceComplex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (HitResult != nullptr)
            *HitResult = params.HitResult;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.GetHitResultUnderFinger
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TEnumAsByte<ETouchIndex>       FingerIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ECollisionChannel> TraceChannel                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              HitResult                      (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APlayerController::GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderFinger");

        APlayerController_GetHitResultUnderFinger_Params params;
        params.FingerIndex = FingerIndex;
        params.TraceChannel = TraceChannel;
        params.bTraceComplex = bTraceComplex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (HitResult != nullptr)
            *HitResult = params.HitResult;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.GetHitResultUnderCursorForObjects
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              HitResult                      (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APlayerController::GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderCursorForObjects");

        APlayerController_GetHitResultUnderCursorForObjects_Params params;
        params.ObjectTypes = ObjectTypes;
        params.bTraceComplex = bTraceComplex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (HitResult != nullptr)
            *HitResult = params.HitResult;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.GetHitResultUnderCursorByChannel
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              HitResult                      (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APlayerController::GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderCursorByChannel");

        APlayerController_GetHitResultUnderCursorByChannel_Params params;
        params.TraceChannel = TraceChannel;
        params.bTraceComplex = bTraceComplex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (HitResult != nullptr)
            *HitResult = params.HitResult;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.GetHitResultUnderCursor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TEnumAsByte<ECollisionChannel> TraceChannel                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              HitResult                      (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APlayerController::GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderCursor");

        APlayerController_GetHitResultUnderCursor_Params params;
        params.TraceChannel = TraceChannel;
        params.bTraceComplex = bTraceComplex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (HitResult != nullptr)
            *HitResult = params.HitResult;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.GetFocalLocation
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector APlayerController::GetFocalLocation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetFocalLocation");

        APlayerController_GetFocalLocation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.FOV
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // float                          NewFOV                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::FOV(float NewFOV)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FOV");

        APlayerController_FOV_Params params;
        params.NewFOV = NewFOV;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.EnableCheats
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void APlayerController::EnableCheats()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EnableCheats");

        APlayerController_EnableCheats_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.DeprojectScreenPositionToWorld
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ScreenX                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenY                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 WorldLocation                  (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 WorldDirection                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APlayerController::DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DeprojectScreenPositionToWorld");

        APlayerController_DeprojectScreenPositionToWorld_Params params;
        params.ScreenX = ScreenX;
        params.ScreenY = ScreenY;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (WorldLocation != nullptr)
            *WorldLocation = params.WorldLocation;
        if (WorldDirection != nullptr)
            *WorldDirection = params.WorldDirection;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.DeprojectMousePositionToWorld
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 WorldLocation                  (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 WorldDirection                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APlayerController::DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DeprojectMousePositionToWorld");

        APlayerController_DeprojectMousePositionToWorld_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (WorldLocation != nullptr)
            *WorldLocation = params.WorldLocation;
        if (WorldDirection != nullptr)
            *WorldDirection = params.WorldDirection;

        return params.ReturnValue;
    }


    // Function Engine.PlayerController.ConsoleKey
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FKey                    Key                            (CPF_Parm)

    void APlayerController::ConsoleKey(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ConsoleKey");

        APlayerController_ConsoleKey_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientWasKicked
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // struct FText                   KickReason                     (CPF_ConstParm, CPF_Parm, CPF_ReferenceParm)

    void APlayerController::ClientWasKicked(const struct FText& KickReason)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientWasKicked");

        APlayerController_ClientWasKicked_Params params;
        params.KickReason = KickReason;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientVoiceHandshakeComplete
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)

    void APlayerController::ClientVoiceHandshakeComplete()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientVoiceHandshakeComplete");

        APlayerController_ClientVoiceHandshakeComplete_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses                  (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_ReferenceParm)

    void APlayerController::ClientUpdateMultipleLevelsStreamingStatus(TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus");

        APlayerController_ClientUpdateMultipleLevelsStreamingStatus_Params params;
        params.LevelStatuses = LevelStatuses;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientUpdateLevelStreamingStatus
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // struct FName                   PackageName                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bNewShouldBeLoaded             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bNewShouldBeVisible            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bNewShouldBlockOnLoad          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            LODIndex                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdateLevelStreamingStatus");

        APlayerController_ClientUpdateLevelStreamingStatus_Params params;
        params.PackageName = PackageName;
        params.bNewShouldBeLoaded = bNewShouldBeLoaded;
        params.bNewShouldBeVisible = bNewShouldBeVisible;
        params.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;
        params.LODIndex = LODIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientUnmutePlayer
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // struct FUniqueNetIdRepl        PlayerID                       (CPF_Parm)

    void APlayerController::ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerID)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUnmutePlayer");

        APlayerController_ClientUnmutePlayer_Params params;
        params.PlayerID = PlayerID;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientTravelInternal
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient)
    // Parameters:
    // struct FString                 URL                            (CPF_Parm, CPF_ZeroConstructor)
    // TEnumAsByte<ETravelType>       TravelType                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bSeamless                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FGuid                   MapPackageGuid                 (CPF_Parm, CPF_IsPlainOldData)

    void APlayerController::ClientTravelInternal(const struct FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTravelInternal");

        APlayerController_ClientTravelInternal_Params params;
        params.URL = URL;
        params.TravelType = TravelType;
        params.bSeamless = bSeamless;
        params.MapPackageGuid = MapPackageGuid;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientTravel
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults)
    // Parameters:
    // struct FString                 URL                            (CPF_Parm, CPF_ZeroConstructor)
    // TEnumAsByte<ETravelType>       TravelType                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bSeamless                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FGuid                   MapPackageGuid                 (CPF_Parm, CPF_IsPlainOldData)

    void APlayerController::ClientTravel(const struct FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTravel");

        APlayerController_ClientTravel_Params params;
        params.URL = URL;
        params.TravelType = TravelType;
        params.bSeamless = bSeamless;
        params.MapPackageGuid = MapPackageGuid;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientTeamMessage
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // class APlayerState*            SenderPlayerState              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 S                              (CPF_Parm, CPF_ZeroConstructor)
    // struct FName                   Type                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MsgLifeTime                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientTeamMessage(class APlayerState* SenderPlayerState, const struct FString& S, const struct FName& Type, float MsgLifeTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTeamMessage");

        APlayerController_ClientTeamMessage_Params params;
        params.SenderPlayerState = SenderPlayerState;
        params.S = S;
        params.Type = Type;
        params.MsgLifeTime = MsgLifeTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientStopForceFeedback
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient, FUNC_BlueprintCallable)
    // Parameters:
    // class UForceFeedbackEffect*    ForceFeedbackEffect            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   Tag                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopForceFeedback");

        APlayerController_ClientStopForceFeedback_Params params;
        params.ForceFeedbackEffect = ForceFeedbackEffect;
        params.Tag = Tag;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientStopCameraShake
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient, FUNC_BlueprintCallable)
    // Parameters:
    // class UClass*                  Shake                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bImmediately                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientStopCameraShake(class UClass* Shake, bool bImmediately)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopCameraShake");

        APlayerController_ClientStopCameraShake_Params params;
        params.Shake = Shake;
        params.bImmediately = bImmediately;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientStopCameraAnim
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // class UCameraAnim*             AnimToStop                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientStopCameraAnim(class UCameraAnim* AnimToStop)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopCameraAnim");

        APlayerController_ClientStopCameraAnim_Params params;
        params.AnimToStop = AnimToStop;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientStartOnlineSession
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)

    void APlayerController::ClientStartOnlineSession()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStartOnlineSession");

        APlayerController_ClientStartOnlineSession_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientSpawnCameraLensEffect
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient, FUNC_BlueprintCallable)
    // Parameters:
    // class UClass*                  LensEffectEmitterClass         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSpawnCameraLensEffect");

        APlayerController_ClientSpawnCameraLensEffect_Params params;
        params.LensEffectEmitterClass = LensEffectEmitterClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientSetViewTarget
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // class AActor*                  A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FViewTargetTransitionParams TransitionParams               (CPF_Parm)

    void APlayerController::ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget");

        APlayerController_ClientSetViewTarget_Params params;
        params.A = A;
        params.TransitionParams = TransitionParams;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientSetSpectatorWaiting
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // bool                           bWaiting                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientSetSpectatorWaiting(bool bWaiting)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetSpectatorWaiting");

        APlayerController_ClientSetSpectatorWaiting_Params params;
        params.bWaiting = bWaiting;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientSetHUD
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient, FUNC_BlueprintCallable)
    // Parameters:
    // class UClass*                  NewHUDClass                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientSetHUD(class UClass* NewHUDClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetHUD");

        APlayerController_ClientSetHUD_Params params;
        params.NewHUDClass = NewHUDClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // class UMaterialInterface*      Material                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ForceDuration                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            CinematicTextureGroups         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident");

        APlayerController_ClientSetForceMipLevelsToBeResident_Params params;
        params.Material = Material;
        params.ForceDuration = ForceDuration;
        params.CinematicTextureGroups = CinematicTextureGroups;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientSetCinematicMode
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // bool                           bInCinematicMode               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAffectsMovement               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAffectsTurning                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAffectsHUD                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCinematicMode");

        APlayerController_ClientSetCinematicMode_Params params;
        params.bInCinematicMode = bInCinematicMode;
        params.bAffectsMovement = bAffectsMovement;
        params.bAffectsTurning = bAffectsTurning;
        params.bAffectsHUD = bAffectsHUD;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientSetCameraMode
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // struct FName                   NewCamMode                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientSetCameraMode(const struct FName& NewCamMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCameraMode");

        APlayerController_ClientSetCameraMode_Params params;
        params.NewCamMode = NewCamMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientSetCameraFade
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient)
    // Parameters:
    // bool                           bEnableFading                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FColor                  FadeColor                      (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               FadeAlpha                      (CPF_Parm, CPF_IsPlainOldData)
    // float                          FadeTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bFadeAudio                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCameraFade");

        APlayerController_ClientSetCameraFade_Params params;
        params.bEnableFading = bEnableFading;
        params.FadeColor = FadeColor;
        params.FadeAlpha = FadeAlpha;
        params.FadeTime = FadeTime;
        params.bFadeAudio = bFadeAudio;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientSetBlockOnAsyncLoading
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)

    void APlayerController::ClientSetBlockOnAsyncLoading()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetBlockOnAsyncLoading");

        APlayerController_ClientSetBlockOnAsyncLoading_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientReturnToMainMenuWithTextReason
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // struct FText                   ReturnReason                   (CPF_ConstParm, CPF_Parm, CPF_ReferenceParm)

    void APlayerController::ClientReturnToMainMenuWithTextReason(const struct FText& ReturnReason)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReturnToMainMenuWithTextReason");

        APlayerController_ClientReturnToMainMenuWithTextReason_Params params;
        params.ReturnReason = ReturnReason;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientReturnToMainMenu
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // struct FString                 ReturnReason                   (CPF_Parm, CPF_ZeroConstructor)

    void APlayerController::ClientReturnToMainMenu(const struct FString& ReturnReason)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReturnToMainMenu");

        APlayerController_ClientReturnToMainMenu_Params params;
        params.ReturnReason = ReturnReason;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientRetryClientRestart
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // class APawn*                   NewPawn                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientRetryClientRestart(class APawn* NewPawn)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRetryClientRestart");

        APlayerController_ClientRetryClientRestart_Params params;
        params.NewPawn = NewPawn;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientRestart
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // class APawn*                   NewPawn                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientRestart(class APawn* NewPawn)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRestart");

        APlayerController_ClientRestart_Params params;
        params.NewPawn = NewPawn;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientReset
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)

    void APlayerController::ClientReset()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReset");

        APlayerController_ClientReset_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientRepObjRef
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientRepObjRef(class UObject* Object)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRepObjRef");

        APlayerController_ClientRepObjRef_Params params;
        params.Object = Object;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientReceiveLocalizedMessage
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // class UClass*                  MESSAGE                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Switch                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class APlayerState*            RelatedPlayerState_2           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class APlayerState*            RelatedPlayerState_3           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UObject*                 OptionalObject                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientReceiveLocalizedMessage(class UClass* MESSAGE, int Switch, class APlayerState* RelatedPlayerState_2, class APlayerState* RelatedPlayerState_3, class UObject* OptionalObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReceiveLocalizedMessage");

        APlayerController_ClientReceiveLocalizedMessage_Params params;
        params.MESSAGE = MESSAGE;
        params.Switch = Switch;
        params.RelatedPlayerState_2 = RelatedPlayerState_2;
        params.RelatedPlayerState_3 = RelatedPlayerState_3;
        params.OptionalObject = OptionalObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientPrestreamTextures
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // class AActor*                  ForcedActor                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ForceDuration                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bEnableStreaming               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            CinematicTextureGroups         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPrestreamTextures");

        APlayerController_ClientPrestreamTextures_Params params;
        params.ForcedActor = ForcedActor;
        params.ForceDuration = ForceDuration;
        params.bEnableStreaming = bEnableStreaming;
        params.CinematicTextureGroups = CinematicTextureGroups;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientPrepareMapChange
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // struct FName                   LevelName                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bFirst                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bLast                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPrepareMapChange");

        APlayerController_ClientPrepareMapChange_Params params;
        params.LevelName = LevelName;
        params.bFirst = bFirst;
        params.bLast = bLast;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientPlaySoundAtLocation
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient)
    // Parameters:
    // class USoundBase*              Sound                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // float                          VolumeMultiplier               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          PitchMultiplier                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlaySoundAtLocation");

        APlayerController_ClientPlaySoundAtLocation_Params params;
        params.Sound = Sound;
        params.Location = Location;
        params.VolumeMultiplier = VolumeMultiplier;
        params.PitchMultiplier = PitchMultiplier;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientPlaySound
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // class USoundBase*              Sound                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          VolumeMultiplier               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          PitchMultiplier                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlaySound");

        APlayerController_ClientPlaySound_Params params;
        params.Sound = Sound;
        params.VolumeMultiplier = VolumeMultiplier;
        params.PitchMultiplier = PitchMultiplier;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientPlayForceFeedback
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient, FUNC_BlueprintCallable)
    // Parameters:
    // class UForceFeedbackEffect*    ForceFeedbackEffect            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bLooping                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   Tag                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, const struct FName& Tag)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayForceFeedback");

        APlayerController_ClientPlayForceFeedback_Params params;
        params.ForceFeedbackEffect = ForceFeedbackEffect;
        params.bLooping = bLooping;
        params.Tag = Tag;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientPlayCameraShake
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient, FUNC_BlueprintCallable)
    // Parameters:
    // class UClass*                  Shake                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Scale                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ECameraAnimPlaySpace> PlaySpace                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                UserPlaySpaceRot               (CPF_Parm, CPF_IsPlainOldData)

    void APlayerController::ClientPlayCameraShake(class UClass* Shake, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayCameraShake");

        APlayerController_ClientPlayCameraShake_Params params;
        params.Shake = Shake;
        params.Scale = Scale;
        params.PlaySpace = PlaySpace;
        params.UserPlaySpaceRot = UserPlaySpaceRot;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientPlayCameraAnim
    // (FUNC_Net, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient, FUNC_BlueprintCallable)
    // Parameters:
    // class UCameraAnim*             AnimToPlay                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Scale                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Rate                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BlendInTime                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BlendOutTime                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bLoop                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bRandomStartTime               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ECameraAnimPlaySpace> Space                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                CustomPlaySpace                (CPF_Parm, CPF_IsPlainOldData)

    void APlayerController::ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<ECameraAnimPlaySpace> Space, const struct FRotator& CustomPlaySpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayCameraAnim");

        APlayerController_ClientPlayCameraAnim_Params params;
        params.AnimToPlay = AnimToPlay;
        params.Scale = Scale;
        params.Rate = Rate;
        params.BlendInTime = BlendInTime;
        params.BlendOutTime = BlendOutTime;
        params.bLoop = bLoop;
        params.bRandomStartTime = bRandomStartTime;
        params.Space = Space;
        params.CustomPlaySpace = CustomPlaySpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientMutePlayer
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // struct FUniqueNetIdRepl        PlayerID                       (CPF_Parm)

    void APlayerController::ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerID)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientMutePlayer");

        APlayerController_ClientMutePlayer_Params params;
        params.PlayerID = PlayerID;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientMessage
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // struct FString                 S                              (CPF_Parm, CPF_ZeroConstructor)
    // struct FName                   Type                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MsgLifeTime                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientMessage");

        APlayerController_ClientMessage_Params params;
        params.S = S;
        params.Type = Type;
        params.MsgLifeTime = MsgLifeTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientIgnoreMoveInput
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // bool                           bIgnore                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientIgnoreMoveInput(bool bIgnore)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientIgnoreMoveInput");

        APlayerController_ClientIgnoreMoveInput_Params params;
        params.bIgnore = bIgnore;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientIgnoreLookInput
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // bool                           bIgnore                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientIgnoreLookInput(bool bIgnore)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientIgnoreLookInput");

        APlayerController_ClientIgnoreLookInput_Params params;
        params.bIgnore = bIgnore;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientGotoState
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // struct FName                   NewState                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientGotoState(const struct FName& NewState)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientGotoState");

        APlayerController_ClientGotoState_Params params;
        params.NewState = NewState;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientGameEnded
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // class AActor*                  EndGameFocus                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bIsWinner                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientGameEnded");

        APlayerController_ClientGameEnded_Params params;
        params.EndGameFocus = EndGameFocus;
        params.bIsWinner = bIsWinner;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientForceGarbageCollection
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)

    void APlayerController::ClientForceGarbageCollection()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientForceGarbageCollection");

        APlayerController_ClientForceGarbageCollection_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientFlushLevelStreaming
    // (FUNC_Final, FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)

    void APlayerController::ClientFlushLevelStreaming()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientFlushLevelStreaming");

        APlayerController_ClientFlushLevelStreaming_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientEndOnlineSession
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)

    void APlayerController::ClientEndOnlineSession()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientEndOnlineSession");

        APlayerController_ClientEndOnlineSession_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientEnableNetworkVoice
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // bool                           bEnable                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientEnableNetworkVoice(bool bEnable)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientEnableNetworkVoice");

        APlayerController_ClientEnableNetworkVoice_Params params;
        params.bEnable = bEnable;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientCommitMapChange
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)

    void APlayerController::ClientCommitMapChange()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCommitMapChange");

        APlayerController_ClientCommitMapChange_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientClearCameraLensEffects
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient, FUNC_BlueprintCallable)

    void APlayerController::ClientClearCameraLensEffects()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientClearCameraLensEffects");

        APlayerController_ClientClearCameraLensEffects_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientCapBandwidth
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // int                            Cap                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientCapBandwidth(int Cap)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCapBandwidth");

        APlayerController_ClientCapBandwidth_Params params;
        params.Cap = Cap;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientCancelPendingMapChange
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)

    void APlayerController::ClientCancelPendingMapChange()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCancelPendingMapChange");

        APlayerController_ClientCancelPendingMapChange_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClientAddTextureStreamingLoc
    // (FUNC_Final, FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient)
    // Parameters:
    // struct FVector                 InLoc                          (CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bOverrideLocation              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAddTextureStreamingLoc");

        APlayerController_ClientAddTextureStreamingLoc_Params params;
        params.InLoc = InLoc;
        params.Duration = Duration;
        params.bOverrideLocation = bOverrideLocation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ClearAudioListenerOverride
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void APlayerController::ClearAudioListenerOverride()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearAudioListenerOverride");

        APlayerController_ClearAudioListenerOverride_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.Camera
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FName                   NewMode                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::Camera(const struct FName& NewMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Camera");

        APlayerController_Camera_Params params;
        params.NewMode = NewMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.AddYawInput
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Val                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::AddYawInput(float Val)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddYawInput");

        APlayerController_AddYawInput_Params params;
        params.Val = Val;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.AddRollInput
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Val                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::AddRollInput(float Val)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddRollInput");

        APlayerController_AddRollInput_Params params;
        params.Val = Val;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.AddPitchInput
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Val                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::AddPitchInput(float Val)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddPitchInput");

        APlayerController_AddPitchInput_Params params;
        params.Val = Val;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerController.ActivateTouchInterface
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UTouchInterface*         NewTouchInterface              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerController::ActivateTouchInterface(class UTouchInterface* NewTouchInterface)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ActivateTouchInterface");

        APlayerController_ActivateTouchInterface_Params params;
        params.NewTouchInterface = NewTouchInterface;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.Walk
    // (FUNC_Exec, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UCheatManager::Walk()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Walk");

        UCheatManager_Walk_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.ViewSelf
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::ViewSelf()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewSelf");

        UCheatManager_ViewSelf_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.ViewPlayer
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FString                 S                              (CPF_Parm, CPF_ZeroConstructor)

    void UCheatManager::ViewPlayer(const struct FString& S)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewPlayer");

        UCheatManager_ViewPlayer_Params params;
        params.S = S;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.ViewClass
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // class UClass*                  DesiredClass                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCheatManager::ViewClass(class UClass* DesiredClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewClass");

        UCheatManager_ViewClass_Params params;
        params.DesiredClass = DesiredClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.ViewActor
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FName                   ActorName                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCheatManager::ViewActor(const struct FName& ActorName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewActor");

        UCheatManager_ViewActor_Params params;
        params.ActorName = ActorName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet
    // (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::ToggleServerStatReplicatorUpdateStatNet()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet");

        UCheatManager_ToggleServerStatReplicatorUpdateStatNet_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite
    // (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::ToggleServerStatReplicatorClientOverwrite()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite");

        UCheatManager_ToggleServerStatReplicatorClientOverwrite_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.ToggleDebugCamera
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::ToggleDebugCamera()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleDebugCamera");

        UCheatManager_ToggleDebugCamera_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.ToggleAILogging
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::ToggleAILogging()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleAILogging");

        UCheatManager_ToggleAILogging_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.TestCollisionDistance
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::TestCollisionDistance()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.TestCollisionDistance");

        UCheatManager_TestCollisionDistance_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.Teleport
    // (FUNC_Exec, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UCheatManager::Teleport()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Teleport");

        UCheatManager_Teleport_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.Summon
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FString                 ClassName                      (CPF_Parm, CPF_ZeroConstructor)

    void UCheatManager::Summon(const struct FString& ClassName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Summon");

        UCheatManager_Summon_Params params;
        params.ClassName = ClassName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.StreamLevelOut
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FName                   PackageName                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCheatManager::StreamLevelOut(const struct FName& PackageName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.StreamLevelOut");

        UCheatManager_StreamLevelOut_Params params;
        params.PackageName = PackageName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.StreamLevelIn
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FName                   PackageName                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCheatManager::StreamLevelIn(const struct FName& PackageName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.StreamLevelIn");

        UCheatManager_StreamLevelIn_Params params;
        params.PackageName = PackageName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.SpawnServerStatReplicator
    // (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::SpawnServerStatReplicator()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SpawnServerStatReplicator");

        UCheatManager_SpawnServerStatReplicator_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.Slomo
    // (FUNC_Exec, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewTimeDilation                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCheatManager::Slomo(float NewTimeDilation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Slomo");

        UCheatManager_Slomo_Params params;
        params.NewTimeDilation = NewTimeDilation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.SetWorldOrigin
    // (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::SetWorldOrigin()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetWorldOrigin");

        UCheatManager_SetWorldOrigin_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.SetNavDrawDistance
    // (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // float                          DrawDistance                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCheatManager::SetNavDrawDistance(float DrawDistance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetNavDrawDistance");

        UCheatManager_SetNavDrawDistance_Params params;
        params.DrawDistance = DrawDistance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.SetMouseSensitivityToDefault
    // (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::SetMouseSensitivityToDefault()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetMouseSensitivityToDefault");

        UCheatManager_SetMouseSensitivityToDefault_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.ServerToggleAILogging
    // (FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer, FUNC_NetValidate)

    void UCheatManager::ServerToggleAILogging()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ServerToggleAILogging");

        UCheatManager_ServerToggleAILogging_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.ReceiveInitCheatManager
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)

    void UCheatManager::ReceiveInitCheatManager()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ReceiveInitCheatManager");

        UCheatManager_ReceiveInitCheatManager_Params params;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.ReceiveEndPlay
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)

    void UCheatManager::ReceiveEndPlay()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ReceiveEndPlay");

        UCheatManager_ReceiveEndPlay_Params params;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.RebuildNavigation
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::RebuildNavigation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.RebuildNavigation");

        UCheatManager_RebuildNavigation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.PlayersOnly
    // (FUNC_Exec, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UCheatManager::PlayersOnly()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.PlayersOnly");

        UCheatManager_PlayersOnly_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.OnlyLoadLevel
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FName                   PackageName                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCheatManager::OnlyLoadLevel(const struct FName& PackageName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnlyLoadLevel");

        UCheatManager_OnlyLoadLevel_Params params;
        params.PackageName = PackageName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.LogLoc
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::LogLoc()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.LogLoc");

        UCheatManager_LogLoc_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.InvertMouse
    // (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::InvertMouse()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.InvertMouse");

        UCheatManager_InvertMouse_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.God
    // (FUNC_Exec, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UCheatManager::God()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.God");

        UCheatManager_God_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.Ghost
    // (FUNC_Exec, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UCheatManager::Ghost()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Ghost");

        UCheatManager_Ghost_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.FreezeFrame
    // (FUNC_Exec, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Delay                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCheatManager::FreezeFrame(float Delay)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FreezeFrame");

        UCheatManager_FreezeFrame_Params params;
        params.Delay = Delay;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.Fly
    // (FUNC_Exec, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UCheatManager::Fly()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Fly");

        UCheatManager_Fly_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.FlushLog
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::FlushLog()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FlushLog");

        UCheatManager_FlushLog_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.EnableDebugCamera
    // (FUNC_Native, FUNC_Protected, FUNC_BlueprintCallable)

    void UCheatManager::EnableDebugCamera()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.EnableDebugCamera");

        UCheatManager_EnableDebugCamera_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.DumpVoiceMutingState
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::DumpVoiceMutingState()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DumpVoiceMutingState");

        UCheatManager_DumpVoiceMutingState_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.DumpPartyState
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::DumpPartyState()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DumpPartyState");

        UCheatManager_DumpPartyState_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.DumpOnlineSessionState
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::DumpOnlineSessionState()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DumpOnlineSessionState");

        UCheatManager_DumpOnlineSessionState_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.DumpChatState
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::DumpChatState()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DumpChatState");

        UCheatManager_DumpChatState_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.DisableDebugCamera
    // (FUNC_Native, FUNC_Protected, FUNC_BlueprintCallable)

    void UCheatManager::DisableDebugCamera()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DisableDebugCamera");

        UCheatManager_DisableDebugCamera_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.DestroyTarget
    // (FUNC_Exec, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UCheatManager::DestroyTarget()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyTarget");

        UCheatManager_DestroyTarget_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.DestroyServerStatReplicator
    // (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::DestroyServerStatReplicator()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyServerStatReplicator");

        UCheatManager_DestroyServerStatReplicator_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.DestroyPawns
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // class UClass*                  aClass                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCheatManager::DestroyPawns(class UClass* aClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyPawns");

        UCheatManager_DestroyPawns_Params params;
        params.aClass = aClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.DestroyAllPawnsExceptTarget
    // (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::DestroyAllPawnsExceptTarget()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyAllPawnsExceptTarget");

        UCheatManager_DestroyAllPawnsExceptTarget_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.DestroyAll
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // class UClass*                  aClass                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCheatManager::DestroyAll(class UClass* aClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyAll");

        UCheatManager_DestroyAll_Params params;
        params.aClass = aClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.DebugCapsuleSweepSize
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // float                          HalfHeight                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCheatManager::DebugCapsuleSweepSize(float HalfHeight, float Radius)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepSize");

        UCheatManager_DebugCapsuleSweepSize_Params params;
        params.HalfHeight = HalfHeight;
        params.Radius = Radius;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.DebugCapsuleSweepPawn
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::DebugCapsuleSweepPawn()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepPawn");

        UCheatManager_DebugCapsuleSweepPawn_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.DebugCapsuleSweepComplex
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCheatManager::DebugCapsuleSweepComplex(bool bTraceComplex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepComplex");

        UCheatManager_DebugCapsuleSweepComplex_Params params;
        params.bTraceComplex = bTraceComplex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.DebugCapsuleSweepClear
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::DebugCapsuleSweepClear()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepClear");

        UCheatManager_DebugCapsuleSweepClear_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.DebugCapsuleSweepChannel
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // TEnumAsByte<ECollisionChannel> Channel                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCheatManager::DebugCapsuleSweepChannel(TEnumAsByte<ECollisionChannel> Channel)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepChannel");

        UCheatManager_DebugCapsuleSweepChannel_Params params;
        params.Channel = Channel;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.DebugCapsuleSweepCapture
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::DebugCapsuleSweepCapture()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepCapture");

        UCheatManager_DebugCapsuleSweepCapture_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.DebugCapsuleSweep
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void UCheatManager::DebugCapsuleSweep()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweep");

        UCheatManager_DebugCapsuleSweep_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.DamageTarget
    // (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          DamageAmount                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCheatManager::DamageTarget(float DamageAmount)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DamageTarget");

        UCheatManager_DamageTarget_Params params;
        params.DamageAmount = DamageAmount;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.CheatScript
    // (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FString                 ScriptName                     (CPF_Parm, CPF_ZeroConstructor)

    void UCheatManager::CheatScript(const struct FString& ScriptName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.CheatScript");

        UCheatManager_CheatScript_Params params;
        params.ScriptName = ScriptName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.ChangeSize
    // (FUNC_Exec, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          F                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCheatManager::ChangeSize(float F)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ChangeSize");

        UCheatManager_ChangeSize_Params params;
        params.F = F;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.BugItStringCreator
    // (FUNC_Exec, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults)
    // Parameters:
    // struct FVector                 ViewLocation                   (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                ViewRotation                   (CPF_Parm, CPF_IsPlainOldData)
    // struct FString                 GoString                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // struct FString                 LocString                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)

    void UCheatManager::BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, struct FString* GoString, struct FString* LocString)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.BugItStringCreator");

        UCheatManager_BugItStringCreator_Params params;
        params.ViewLocation = ViewLocation;
        params.ViewRotation = ViewRotation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (GoString != nullptr)
            *GoString = params.GoString;
        if (LocString != nullptr)
            *LocString = params.LocString;
    }


    // Function Engine.CheatManager.BugItGo
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // float                          X                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Y                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Z                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Pitch                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Yaw                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Roll                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCheatManager::BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.BugItGo");

        UCheatManager_BugItGo_Params params;
        params.X = X;
        params.Y = Y;
        params.Z = Z;
        params.Pitch = Pitch;
        params.Yaw = Yaw;
        params.Roll = Roll;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CheatManager.BugIt
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FString                 ScreenShotDescription          (CPF_Parm, CPF_ZeroConstructor)

    void UCheatManager::BugIt(const struct FString& ScreenShotDescription)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.BugIt");

        UCheatManager_BugIt_Params params;
        params.ScreenShotDescription = ScreenShotDescription;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameModeBase.StartPlay
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AGameModeBase::StartPlay()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.StartPlay");

        AGameModeBase_StartPlay_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameModeBase.SpawnDefaultPawnFor
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class AController*             NewPlayer                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  StartSpot                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class APawn*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class APawn* AGameModeBase::SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.SpawnDefaultPawnFor");

        AGameModeBase_SpawnDefaultPawnFor_Params params;
        params.NewPlayer = NewPlayer;
        params.StartSpot = StartSpot;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameModeBase.SpawnDefaultPawnAtTransform
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintEvent)
    // Parameters:
    // class AController*             NewPlayer                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              SpawnTransform                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // class APawn*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class APawn* AGameModeBase::SpawnDefaultPawnAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.SpawnDefaultPawnAtTransform");

        AGameModeBase_SpawnDefaultPawnAtTransform_Params params;
        params.NewPlayer = NewPlayer;
        params.SpawnTransform = SpawnTransform;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameModeBase.ShouldReset
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class AActor*                  ActorToReset                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AGameModeBase::ShouldReset(class AActor* ActorToReset)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.ShouldReset");

        AGameModeBase_ShouldReset_Params params;
        params.ActorToReset = ActorToReset;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameModeBase.ReturnToMainMenuHost
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AGameModeBase::ReturnToMainMenuHost()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.ReturnToMainMenuHost");

        AGameModeBase_ReturnToMainMenuHost_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameModeBase.RestartPlayerAtTransform
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class AController*             NewPlayer                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              SpawnTransform                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void AGameModeBase::RestartPlayerAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.RestartPlayerAtTransform");

        AGameModeBase_RestartPlayerAtTransform_Params params;
        params.NewPlayer = NewPlayer;
        params.SpawnTransform = SpawnTransform;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameModeBase.RestartPlayerAtPlayerStart
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AController*             NewPlayer                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  StartSpot                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AGameModeBase::RestartPlayerAtPlayerStart(class AController* NewPlayer, class AActor* StartSpot)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.RestartPlayerAtPlayerStart");

        AGameModeBase_RestartPlayerAtPlayerStart_Params params;
        params.NewPlayer = NewPlayer;
        params.StartSpot = StartSpot;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameModeBase.RestartPlayer
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AController*             NewPlayer                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AGameModeBase::RestartPlayer(class AController* NewPlayer)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.RestartPlayer");

        AGameModeBase_RestartPlayer_Params params;
        params.NewPlayer = NewPlayer;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameModeBase.ResetLevel
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AGameModeBase::ResetLevel()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.ResetLevel");

        AGameModeBase_ResetLevel_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameModeBase.PlayerCanRestart
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class APlayerController*       Player                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AGameModeBase::PlayerCanRestart(class APlayerController* Player)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.PlayerCanRestart");

        AGameModeBase_PlayerCanRestart_Params params;
        params.Player = Player;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameModeBase.MustSpectate
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent, FUNC_Const)
    // Parameters:
    // class APlayerController*       NewPlayerController            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AGameModeBase::MustSpectate(class APlayerController* NewPlayerController)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.MustSpectate");

        AGameModeBase_MustSpectate_Params params;
        params.NewPlayerController = NewPlayerController;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameModeBase.K2_PostLogin
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class APlayerController*       NewPlayer                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AGameModeBase::K2_PostLogin(class APlayerController* NewPlayer)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.K2_PostLogin");

        AGameModeBase_K2_PostLogin_Params params;
        params.NewPlayer = NewPlayer;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameModeBase.K2_OnSwapPlayerControllers
    // (FUNC_Event, FUNC_Protected, FUNC_BlueprintEvent)
    // Parameters:
    // class APlayerController*       OldPC                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class APlayerController*       NewPC                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AGameModeBase::K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.K2_OnSwapPlayerControllers");

        AGameModeBase_K2_OnSwapPlayerControllers_Params params;
        params.OldPC = OldPC;
        params.NewPC = NewPC;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameModeBase.K2_OnRestartPlayer
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class AController*             NewPlayer                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AGameModeBase::K2_OnRestartPlayer(class AController* NewPlayer)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.K2_OnRestartPlayer");

        AGameModeBase_K2_OnRestartPlayer_Params params;
        params.NewPlayer = NewPlayer;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameModeBase.K2_OnLogout
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class AController*             ExitingController              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AGameModeBase::K2_OnLogout(class AController* ExitingController)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.K2_OnLogout");

        AGameModeBase_K2_OnLogout_Params params;
        params.ExitingController = ExitingController;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameModeBase.K2_OnChangeName
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class AController*             Other                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 NewName                        (CPF_Parm, CPF_ZeroConstructor)
    // bool                           bNameChange                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AGameModeBase::K2_OnChangeName(class AController* Other, const struct FString& NewName, bool bNameChange)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.K2_OnChangeName");

        AGameModeBase_K2_OnChangeName_Params params;
        params.Other = Other;
        params.NewName = NewName;
        params.bNameChange = bNameChange;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameModeBase.K2_FindPlayerStart
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class AController*             Player                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 IncomingName                   (CPF_Parm, CPF_ZeroConstructor)
    // class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AActor* AGameModeBase::K2_FindPlayerStart(class AController* Player, const struct FString& IncomingName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.K2_FindPlayerStart");

        AGameModeBase_K2_FindPlayerStart_Params params;
        params.Player = Player;
        params.IncomingName = IncomingName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameModeBase.InitStartSpot
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class AActor*                  StartSpot                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AController*             NewPlayer                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AGameModeBase::InitStartSpot(class AActor* StartSpot, class AController* NewPlayer)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.InitStartSpot");

        AGameModeBase_InitStartSpot_Params params;
        params.StartSpot = StartSpot;
        params.NewPlayer = NewPlayer;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameModeBase.InitializeHUDForPlayer
    // (FUNC_Native, FUNC_Event, FUNC_Protected, FUNC_BlueprintEvent)
    // Parameters:
    // class APlayerController*       NewPlayer                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AGameModeBase::InitializeHUDForPlayer(class APlayerController* NewPlayer)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.InitializeHUDForPlayer");

        AGameModeBase_InitializeHUDForPlayer_Params params;
        params.NewPlayer = NewPlayer;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameModeBase.HasMatchStarted
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AGameModeBase::HasMatchStarted()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.HasMatchStarted");

        AGameModeBase_HasMatchStarted_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameModeBase.HandleStartingNewPlayer
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class APlayerController*       NewPlayer                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AGameModeBase::HandleStartingNewPlayer(class APlayerController* NewPlayer)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.HandleStartingNewPlayer");

        AGameModeBase_HandleStartingNewPlayer_Params params;
        params.NewPlayer = NewPlayer;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameModeBase.GetNumSpectators
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int AGameModeBase::GetNumSpectators()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.GetNumSpectators");

        AGameModeBase_GetNumSpectators_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameModeBase.GetNumPlayers
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int AGameModeBase::GetNumPlayers()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.GetNumPlayers");

        AGameModeBase_GetNumPlayers_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameModeBase.GetDefaultPawnClassForController
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class AController*             InController                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UClass* AGameModeBase::GetDefaultPawnClassForController(class AController* InController)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.GetDefaultPawnClassForController");

        AGameModeBase_GetDefaultPawnClassForController_Params params;
        params.InController = InController;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameModeBase.FindPlayerStart
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class AController*             Player                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 IncomingName                   (CPF_Parm, CPF_ZeroConstructor)
    // class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AActor* AGameModeBase::FindPlayerStart(class AController* Player, const struct FString& IncomingName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.FindPlayerStart");

        AGameModeBase_FindPlayerStart_Params params;
        params.Player = Player;
        params.IncomingName = IncomingName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameModeBase.ChoosePlayerStart
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class AController*             Player                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AActor* AGameModeBase::ChoosePlayerStart(class AController* Player)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.ChoosePlayerStart");

        AGameModeBase_ChoosePlayerStart_Params params;
        params.Player = Player;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameModeBase.ChangeName
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AController*             Controller                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 NewName                        (CPF_Parm, CPF_ZeroConstructor)
    // bool                           bNameChange                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AGameModeBase::ChangeName(class AController* Controller, const struct FString& NewName, bool bNameChange)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.ChangeName");

        AGameModeBase_ChangeName_Params params;
        params.Controller = Controller;
        params.NewName = NewName;
        params.bNameChange = bNameChange;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameModeBase.CanSpectate
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class APlayerController*       Viewer                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class APlayerState*            ViewTarget                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AGameModeBase::CanSpectate(class APlayerController* Viewer, class APlayerState* ViewTarget)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.CanSpectate");

        AGameModeBase_CanSpectate_Params params;
        params.Viewer = Viewer;
        params.ViewTarget = ViewTarget;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameMode.StartMatch
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AGameMode::StartMatch()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.StartMatch");

        AGameMode_StartMatch_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameMode.SetBandwidthLimit
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // float                          AsyncIOBandwidthLimit          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AGameMode::SetBandwidthLimit(float AsyncIOBandwidthLimit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.SetBandwidthLimit");

        AGameMode_SetBandwidthLimit_Params params;
        params.AsyncIOBandwidthLimit = AsyncIOBandwidthLimit;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameMode.Say
    // (FUNC_Exec, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FString                 Msg                            (CPF_Parm, CPF_ZeroConstructor)

    void AGameMode::Say(const struct FString& Msg)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.Say");

        AGameMode_Say_Params params;
        params.Msg = Msg;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameMode.RestartGame
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AGameMode::RestartGame()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.RestartGame");

        AGameMode_RestartGame_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameMode.ReadyToStartMatch
    // (FUNC_Native, FUNC_Event, FUNC_Protected, FUNC_BlueprintEvent)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AGameMode::ReadyToStartMatch()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.ReadyToStartMatch");

        AGameMode_ReadyToStartMatch_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameMode.ReadyToEndMatch
    // (FUNC_Native, FUNC_Event, FUNC_Protected, FUNC_BlueprintEvent)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AGameMode::ReadyToEndMatch()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.ReadyToEndMatch");

        AGameMode_ReadyToEndMatch_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameMode.K2_OnSetMatchState
    // (FUNC_Event, FUNC_Protected, FUNC_BlueprintEvent)
    // Parameters:
    // struct FName                   NewState                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AGameMode::K2_OnSetMatchState(const struct FName& NewState)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.K2_OnSetMatchState");

        AGameMode_K2_OnSetMatchState_Params params;
        params.NewState = NewState;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameMode.IsMatchInProgress
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AGameMode::IsMatchInProgress()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.IsMatchInProgress");

        AGameMode_IsMatchInProgress_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameMode.HasMatchEnded
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AGameMode::HasMatchEnded()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.HasMatchEnded");

        AGameMode_HasMatchEnded_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameMode.GetMatchState
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FName AGameMode::GetMatchState()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.GetMatchState");

        AGameMode_GetMatchState_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameMode.EndMatch
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AGameMode::EndMatch()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.EndMatch");

        AGameMode_EndMatch_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameMode.AbortMatch
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AGameMode::AbortMatch()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.AbortMatch");

        AGameMode_AbortMatch_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameViewportClient.SSSwapControllers
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void UGameViewportClient::SSSwapControllers()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SSSwapControllers");

        UGameViewportClient_SSSwapControllers_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameViewportClient.ShowTitleSafeArea
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void UGameViewportClient::ShowTitleSafeArea()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ShowTitleSafeArea");

        UGameViewportClient_ShowTitleSafeArea_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameViewportClient.SetConsoleTarget
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // int                            PlayerIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameViewportClient::SetConsoleTarget(int PlayerIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetConsoleTarget");

        UGameViewportClient_SetConsoleTarget_Params params;
        params.PlayerIndex = PlayerIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameStateBase.OnRep_SpectatorClass
    // (FUNC_Native, FUNC_Protected)

    void AGameStateBase::OnRep_SpectatorClass()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.OnRep_SpectatorClass");

        AGameStateBase_OnRep_SpectatorClass_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds
    // (FUNC_Native, FUNC_Protected)

    void AGameStateBase::OnRep_ReplicatedWorldTimeSeconds()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds");

        AGameStateBase_OnRep_ReplicatedWorldTimeSeconds_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay
    // (FUNC_Native, FUNC_Protected)

    void AGameStateBase::OnRep_ReplicatedHasBegunPlay()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay");

        AGameStateBase_OnRep_ReplicatedHasBegunPlay_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameStateBase.OnRep_GameModeClass
    // (FUNC_Native, FUNC_Protected)

    void AGameStateBase::OnRep_GameModeClass()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.OnRep_GameModeClass");

        AGameStateBase_OnRep_GameModeClass_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameStateBase.HasMatchStarted
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AGameStateBase::HasMatchStarted()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.HasMatchStarted");

        AGameStateBase_HasMatchStarted_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameStateBase.HasBegunPlay
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AGameStateBase::HasBegunPlay()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.HasBegunPlay");

        AGameStateBase_HasBegunPlay_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameStateBase.GetServerWorldTimeSeconds
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float AGameStateBase::GetServerWorldTimeSeconds()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.GetServerWorldTimeSeconds");

        AGameStateBase_GetServerWorldTimeSeconds_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameStateBase.GetPlayerStartTime
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AController*             Controller                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float AGameStateBase::GetPlayerStartTime(class AController* Controller)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.GetPlayerStartTime");

        AGameStateBase_GetPlayerStartTime_Params params;
        params.Controller = Controller;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameStateBase.GetPlayerRespawnDelay
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AController*             Controller                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float AGameStateBase::GetPlayerRespawnDelay(class AController* Controller)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.GetPlayerRespawnDelay");

        AGameStateBase_GetPlayerRespawnDelay_Params params;
        params.Controller = Controller;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameState.OnRep_MatchState
    // (FUNC_Native, FUNC_Public)

    void AGameState::OnRep_MatchState()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameState.OnRep_MatchState");

        AGameState_OnRep_MatchState_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameState.OnRep_ElapsedTime
    // (FUNC_Native, FUNC_Public)

    void AGameState::OnRep_ElapsedTime()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameState.OnRep_ElapsedTime");

        AGameState_OnRep_ElapsedTime_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.NavRelevantComponent.SetNavigationRelevancy
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bRelevant                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UNavRelevantComponent::SetNavigationRelevancy(bool bRelevant)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavRelevantComponent.SetNavigationRelevancy");

        UNavRelevantComponent_SetNavigationRelevancy_Params params;
        params.bRelevant = bRelevant;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Emitter.ToggleActive
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AEmitter::ToggleActive()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ToggleActive");

        AEmitter_ToggleActive_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Emitter.SetVectorParameter
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Param                          (CPF_Parm, CPF_IsPlainOldData)

    void AEmitter::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetVectorParameter");

        AEmitter_SetVectorParameter_Params params;
        params.ParameterName = ParameterName;
        params.Param = Param;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Emitter.SetTemplate
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UParticleSystem*         NewTemplate                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AEmitter::SetTemplate(class UParticleSystem* NewTemplate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetTemplate");

        AEmitter_SetTemplate_Params params;
        params.NewTemplate = NewTemplate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Emitter.SetMaterialParameter
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInterface*      Param                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AEmitter::SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetMaterialParameter");

        AEmitter_SetMaterialParameter_Params params;
        params.ParameterName = ParameterName;
        params.Param = Param;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Emitter.SetFloatParameter
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Param                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AEmitter::SetFloatParameter(const struct FName& ParameterName, float Param)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetFloatParameter");

        AEmitter_SetFloatParameter_Params params;
        params.ParameterName = ParameterName;
        params.Param = Param;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Emitter.SetColorParameter
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            Param                          (CPF_Parm, CPF_IsPlainOldData)

    void AEmitter::SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetColorParameter");

        AEmitter_SetColorParameter_Params params;
        params.ParameterName = ParameterName;
        params.Param = Param;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Emitter.SetActorParameter
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  Param                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AEmitter::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetActorParameter");

        AEmitter_SetActorParameter_Params params;
        params.ParameterName = ParameterName;
        params.Param = Param;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Emitter.OnRep_bCurrentlyActive
    // (FUNC_Native, FUNC_Public)

    void AEmitter::OnRep_bCurrentlyActive()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnRep_bCurrentlyActive");

        AEmitter_OnRep_bCurrentlyActive_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Emitter.OnParticleSystemFinished
    // (FUNC_Native, FUNC_Public)
    // Parameters:
    // class UParticleSystemComponent* FinishedComponent              (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

    void AEmitter::OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnParticleSystemFinished");

        AEmitter_OnParticleSystemFinished_Params params;
        params.FinishedComponent = FinishedComponent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Emitter.IsActive
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool AEmitter::IsActive()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.IsActive");

        AEmitter_IsActive_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Emitter.Deactivate
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AEmitter::Deactivate()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.Deactivate");

        AEmitter_Deactivate_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Emitter.Activate
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AEmitter::Activate()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.Activate");

        AEmitter_Activate_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameInstance.ReceiveShutdown
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)

    void UGameInstance::ReceiveShutdown()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.ReceiveShutdown");

        UGameInstance_ReceiveShutdown_Params params;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameInstance.ReceiveInit
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)

    void UGameInstance::ReceiveInit()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.ReceiveInit");

        UGameInstance_ReceiveInit_Params params;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameInstance.HandleTravelError
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // TEnumAsByte<ETravelFailure>    FailureType                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameInstance::HandleTravelError(TEnumAsByte<ETravelFailure> FailureType)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.HandleTravelError");

        UGameInstance_HandleTravelError_Params params;
        params.FailureType = FailureType;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameInstance.HandleNetworkError
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // TEnumAsByte<ENetworkFailure>   FailureType                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bIsServer                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameInstance::HandleNetworkError(TEnumAsByte<ENetworkFailure> FailureType, bool bIsServer)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.HandleNetworkError");

        UGameInstance_HandleNetworkError_Params params;
        params.FailureType = FailureType;
        params.bIsServer = bIsServer;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameInstance.DebugRemovePlayer
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // int                            ControllerId                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameInstance::DebugRemovePlayer(int ControllerId)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.DebugRemovePlayer");

        UGameInstance_DebugRemovePlayer_Params params;
        params.ControllerId = ControllerId;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameInstance.DebugCreatePlayer
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // int                            ControllerId                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameInstance::DebugCreatePlayer(int ControllerId)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.DebugCreatePlayer");

        UGameInstance_DebugCreatePlayer_Params params;
        params.ControllerId = ControllerId;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerInput.SetMouseSensitivity
    // (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // float                          Sensitivity                    (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPlayerInput::SetMouseSensitivity(float Sensitivity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SetMouseSensitivity");

        UPlayerInput_SetMouseSensitivity_Params params;
        params.Sensitivity = Sensitivity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerInput.SetBind
    // (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FName                   BindName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 Command                        (CPF_Parm, CPF_ZeroConstructor)

    void UPlayerInput::SetBind(const struct FName& BindName, const struct FString& Command)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SetBind");

        UPlayerInput_SetBind_Params params;
        params.BindName = BindName;
        params.Command = Command;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerInput.InvertAxisKey
    // (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FKey                    AxisKey                        (CPF_ConstParm, CPF_Parm)

    void UPlayerInput::InvertAxisKey(const struct FKey& AxisKey)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertAxisKey");

        UPlayerInput_InvertAxisKey_Params params;
        params.AxisKey = AxisKey;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerInput.InvertAxis
    // (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FName                   AxisName                       (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPlayerInput::InvertAxis(const struct FName& AxisName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertAxis");

        UPlayerInput_InvertAxis_Params params;
        params.AxisName = AxisName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerInput.ClearSmoothing
    // (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Public)

    void UPlayerInput::ClearSmoothing()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.ClearSmoothing");

        UPlayerInput_ClearSmoothing_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.ValidateSettings
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UGameUserSettings::ValidateSettings()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ValidateSettings");

        UGameUserSettings_ValidateSettings_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SupportsHDRDisplayOutput
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameUserSettings::SupportsHDRDisplayOutput()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SupportsHDRDisplayOutput");

        UGameUserSettings_SupportsHDRDisplayOutput_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.SetVSyncEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnable                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::SetVSyncEnabled(bool bEnable)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetVSyncEnabled");

        UGameUserSettings_SetVSyncEnabled_Params params;
        params.bEnable = bEnable;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SetVisualEffectQuality
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::SetVisualEffectQuality(int Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetVisualEffectQuality");

        UGameUserSettings_SetVisualEffectQuality_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SetViewDistanceQuality
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::SetViewDistanceQuality(int Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetViewDistanceQuality");

        UGameUserSettings_SetViewDistanceQuality_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SetToDefaults
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UGameUserSettings::SetToDefaults()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetToDefaults");

        UGameUserSettings_SetToDefaults_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SetTextureQuality
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::SetTextureQuality(int Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetTextureQuality");

        UGameUserSettings_SetTextureQuality_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SetShadowQuality
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::SetShadowQuality(int Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetShadowQuality");

        UGameUserSettings_SetShadowQuality_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SetScreenResolution
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FIntPoint               Resolution                     (CPF_Parm, CPF_IsPlainOldData)

    void UGameUserSettings::SetScreenResolution(const struct FIntPoint& Resolution)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetScreenResolution");

        UGameUserSettings_SetScreenResolution_Params params;
        params.Resolution = Resolution;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SetResolutionScaleValueEx
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewScaleValue                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::SetResolutionScaleValueEx(float NewScaleValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetResolutionScaleValueEx");

        UGameUserSettings_SetResolutionScaleValueEx_Params params;
        params.NewScaleValue = NewScaleValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SetResolutionScaleValue
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            NewScaleValue                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::SetResolutionScaleValue(int NewScaleValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetResolutionScaleValue");

        UGameUserSettings_SetResolutionScaleValue_Params params;
        params.NewScaleValue = NewScaleValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SetResolutionScaleNormalized
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewScaleNormalized             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::SetResolutionScaleNormalized(float NewScaleNormalized)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetResolutionScaleNormalized");

        UGameUserSettings_SetResolutionScaleNormalized_Params params;
        params.NewScaleNormalized = NewScaleNormalized;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SetPostProcessingQuality
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::SetPostProcessingQuality(int Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetPostProcessingQuality");

        UGameUserSettings_SetPostProcessingQuality_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SetOverallScalabilityLevel
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::SetOverallScalabilityLevel(int Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetOverallScalabilityLevel");

        UGameUserSettings_SetOverallScalabilityLevel_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SetFullscreenMode
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<EWindowMode>       InFullscreenMode               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::SetFullscreenMode(TEnumAsByte<EWindowMode> InFullscreenMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetFullscreenMode");

        UGameUserSettings_SetFullscreenMode_Params params;
        params.InFullscreenMode = InFullscreenMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SetFrameRateLimit
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewLimit                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::SetFrameRateLimit(float NewLimit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetFrameRateLimit");

        UGameUserSettings_SetFrameRateLimit_Params params;
        params.NewLimit = NewLimit;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SetFoliageQuality
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::SetFoliageQuality(int Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetFoliageQuality");

        UGameUserSettings_SetFoliageQuality_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SetBenchmarkFallbackValues
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UGameUserSettings::SetBenchmarkFallbackValues()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetBenchmarkFallbackValues");

        UGameUserSettings_SetBenchmarkFallbackValues_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SetAudioQualityLevel
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            QualityLevel                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::SetAudioQualityLevel(int QualityLevel)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetAudioQualityLevel");

        UGameUserSettings_SetAudioQualityLevel_Params params;
        params.QualityLevel = QualityLevel;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SetAntiAliasingQuality
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::SetAntiAliasingQuality(int Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetAntiAliasingQuality");

        UGameUserSettings_SetAntiAliasingQuality_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.SaveSettings
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UGameUserSettings::SaveSettings()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SaveSettings");

        UGameUserSettings_SaveSettings_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.RunHardwareBenchmark
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            WorkScale                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          CPUMultiplier                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          GPUMultiplier                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.RunHardwareBenchmark");

        UGameUserSettings_RunHardwareBenchmark_Params params;
        params.WorkScale = WorkScale;
        params.CPUMultiplier = CPUMultiplier;
        params.GPUMultiplier = GPUMultiplier;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.RevertVideoMode
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UGameUserSettings::RevertVideoMode()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.RevertVideoMode");

        UGameUserSettings_RevertVideoMode_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.ResetToCurrentSettings
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UGameUserSettings::ResetToCurrentSettings()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ResetToCurrentSettings");

        UGameUserSettings_ResetToCurrentSettings_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.LoadSettings
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bForceReload                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::LoadSettings(bool bForceReload)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.LoadSettings");

        UGameUserSettings_LoadSettings_Params params;
        params.bForceReload = bForceReload;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.IsVSyncEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameUserSettings::IsVSyncEnabled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsVSyncEnabled");

        UGameUserSettings_IsVSyncEnabled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.IsVSyncDirty
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameUserSettings::IsVSyncDirty()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsVSyncDirty");

        UGameUserSettings_IsVSyncDirty_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.IsScreenResolutionDirty
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameUserSettings::IsScreenResolutionDirty()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsScreenResolutionDirty");

        UGameUserSettings_IsScreenResolutionDirty_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.IsFullscreenModeDirty
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameUserSettings::IsFullscreenModeDirty()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsFullscreenModeDirty");

        UGameUserSettings_IsFullscreenModeDirty_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.IsDirty
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameUserSettings::IsDirty()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsDirty");

        UGameUserSettings_IsDirty_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetVisualEffectQuality
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UGameUserSettings::GetVisualEffectQuality()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetVisualEffectQuality");

        UGameUserSettings_GetVisualEffectQuality_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetViewDistanceQuality
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UGameUserSettings::GetViewDistanceQuality()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetViewDistanceQuality");

        UGameUserSettings_GetViewDistanceQuality_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetTextureQuality
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UGameUserSettings::GetTextureQuality()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetTextureQuality");

        UGameUserSettings_GetTextureQuality_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetShadowQuality
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UGameUserSettings::GetShadowQuality()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetShadowQuality");

        UGameUserSettings_GetShadowQuality_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetScreenResolution
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FIntPoint               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FIntPoint UGameUserSettings::GetScreenResolution()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetScreenResolution");

        UGameUserSettings_GetScreenResolution_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetResolutionScaleInformationEx
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          CurrentScaleNormalized         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          CurrentScaleValue              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MinScaleValue                  (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MaxScaleValue                  (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::GetResolutionScaleInformationEx(float* CurrentScaleNormalized, float* CurrentScaleValue, float* MinScaleValue, float* MaxScaleValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetResolutionScaleInformationEx");

        UGameUserSettings_GetResolutionScaleInformationEx_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (CurrentScaleNormalized != nullptr)
            *CurrentScaleNormalized = params.CurrentScaleNormalized;
        if (CurrentScaleValue != nullptr)
            *CurrentScaleValue = params.CurrentScaleValue;
        if (MinScaleValue != nullptr)
            *MinScaleValue = params.MinScaleValue;
        if (MaxScaleValue != nullptr)
            *MaxScaleValue = params.MaxScaleValue;
    }


    // Function Engine.GameUserSettings.GetResolutionScaleInformation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          CurrentScaleNormalized         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            CurrentScaleValue              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MinScaleValue                  (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MaxScaleValue                  (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::GetResolutionScaleInformation(float* CurrentScaleNormalized, int* CurrentScaleValue, int* MinScaleValue, int* MaxScaleValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetResolutionScaleInformation");

        UGameUserSettings_GetResolutionScaleInformation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (CurrentScaleNormalized != nullptr)
            *CurrentScaleNormalized = params.CurrentScaleNormalized;
        if (CurrentScaleValue != nullptr)
            *CurrentScaleValue = params.CurrentScaleValue;
        if (MinScaleValue != nullptr)
            *MinScaleValue = params.MinScaleValue;
        if (MaxScaleValue != nullptr)
            *MaxScaleValue = params.MaxScaleValue;
    }


    // Function Engine.GameUserSettings.GetPreferredFullscreenMode
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TEnumAsByte<EWindowMode>       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    TEnumAsByte<EWindowMode> UGameUserSettings::GetPreferredFullscreenMode()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetPreferredFullscreenMode");

        UGameUserSettings_GetPreferredFullscreenMode_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetPostProcessingQuality
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UGameUserSettings::GetPostProcessingQuality()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetPostProcessingQuality");

        UGameUserSettings_GetPostProcessingQuality_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetOverallScalabilityLevel
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UGameUserSettings::GetOverallScalabilityLevel()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetOverallScalabilityLevel");

        UGameUserSettings_GetOverallScalabilityLevel_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetLastConfirmedScreenResolution
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FIntPoint               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FIntPoint UGameUserSettings::GetLastConfirmedScreenResolution()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetLastConfirmedScreenResolution");

        UGameUserSettings_GetLastConfirmedScreenResolution_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetLastConfirmedFullscreenMode
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TEnumAsByte<EWindowMode>       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    TEnumAsByte<EWindowMode> UGameUserSettings::GetLastConfirmedFullscreenMode()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetLastConfirmedFullscreenMode");

        UGameUserSettings_GetLastConfirmedFullscreenMode_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetGameUserSettings
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UGameUserSettings*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UGameUserSettings* UGameUserSettings::STATIC_GetGameUserSettings()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetGameUserSettings");

        UGameUserSettings_GetGameUserSettings_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetFullscreenMode
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TEnumAsByte<EWindowMode>       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    TEnumAsByte<EWindowMode> UGameUserSettings::GetFullscreenMode()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetFullscreenMode");

        UGameUserSettings_GetFullscreenMode_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetFrameRateLimit
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UGameUserSettings::GetFrameRateLimit()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetFrameRateLimit");

        UGameUserSettings_GetFrameRateLimit_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetFoliageQuality
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UGameUserSettings::GetFoliageQuality()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetFoliageQuality");

        UGameUserSettings_GetFoliageQuality_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetDesktopResolution
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FIntPoint               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FIntPoint UGameUserSettings::GetDesktopResolution()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetDesktopResolution");

        UGameUserSettings_GetDesktopResolution_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetDefaultWindowPosition
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FIntPoint               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FIntPoint UGameUserSettings::STATIC_GetDefaultWindowPosition()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetDefaultWindowPosition");

        UGameUserSettings_GetDefaultWindowPosition_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetDefaultWindowMode
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<EWindowMode>       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    TEnumAsByte<EWindowMode> UGameUserSettings::STATIC_GetDefaultWindowMode()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetDefaultWindowMode");

        UGameUserSettings_GetDefaultWindowMode_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetDefaultResolutionScale
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UGameUserSettings::GetDefaultResolutionScale()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetDefaultResolutionScale");

        UGameUserSettings_GetDefaultResolutionScale_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetDefaultResolution
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FIntPoint               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FIntPoint UGameUserSettings::STATIC_GetDefaultResolution()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetDefaultResolution");

        UGameUserSettings_GetDefaultResolution_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetAudioQualityLevel
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UGameUserSettings::GetAudioQualityLevel()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetAudioQualityLevel");

        UGameUserSettings_GetAudioQualityLevel_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.GetAntiAliasingQuality
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UGameUserSettings::GetAntiAliasingQuality()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetAntiAliasingQuality");

        UGameUserSettings_GetAntiAliasingQuality_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameUserSettings.EnableHDRDisplayOutput
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnable                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            DisplayNits                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::EnableHDRDisplayOutput(bool bEnable, int DisplayNits)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.EnableHDRDisplayOutput");

        UGameUserSettings_EnableHDRDisplayOutput_Params params;
        params.bEnable = bEnable;
        params.DisplayNits = DisplayNits;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.ConfirmVideoMode
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UGameUserSettings::ConfirmVideoMode()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ConfirmVideoMode");

        UGameUserSettings_ConfirmVideoMode_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.ApplySettings
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bCheckForCommandLineOverrides  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::ApplySettings(bool bCheckForCommandLineOverrides)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ApplySettings");

        UGameUserSettings_ApplySettings_Params params;
        params.bCheckForCommandLineOverrides = bCheckForCommandLineOverrides;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.ApplyResolutionSettings
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bCheckForCommandLineOverrides  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameUserSettings::ApplyResolutionSettings(bool bCheckForCommandLineOverrides)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ApplyResolutionSettings");

        UGameUserSettings_ApplyResolutionSettings_Params params;
        params.bCheckForCommandLineOverrides = bCheckForCommandLineOverrides;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.ApplyNonResolutionSettings
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UGameUserSettings::ApplyNonResolutionSettings()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ApplyNonResolutionSettings");

        UGameUserSettings_ApplyNonResolutionSettings_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameUserSettings.ApplyHardwareBenchmarkResults
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UGameUserSettings::ApplyHardwareBenchmarkResults()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ApplyHardwareBenchmarkResults");

        UGameUserSettings_ApplyHardwareBenchmarkResults_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.NavigationSystem.UnregisterNavigationInvoker
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  Invoker                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UNavigationSystem::UnregisterNavigationInvoker(class AActor* Invoker)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.UnregisterNavigationInvoker");

        UNavigationSystem_UnregisterNavigationInvoker_Params params;
        params.Invoker = Invoker;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.NavigationSystem.SimpleMoveToLocation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class AController*             Controller                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Goal                           (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UNavigationSystem::STATIC_SimpleMoveToLocation(class AController* Controller, const struct FVector& Goal)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.SimpleMoveToLocation");

        UNavigationSystem_SimpleMoveToLocation_Params params;
        params.Controller = Controller;
        params.Goal = Goal;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.NavigationSystem.SimpleMoveToActor
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AController*             Controller                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  Goal                           (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UNavigationSystem::STATIC_SimpleMoveToActor(class AController* Controller, class AActor* Goal)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.SimpleMoveToActor");

        UNavigationSystem_SimpleMoveToActor_Params params;
        params.Controller = Controller;
        params.Goal = Goal;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.NavigationSystem.SetMaxSimultaneousTileGenerationJobsCount
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            MaxNumberOfJobs                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UNavigationSystem::SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.SetMaxSimultaneousTileGenerationJobsCount");

        UNavigationSystem_SetMaxSimultaneousTileGenerationJobsCount_Params params;
        params.MaxNumberOfJobs = MaxNumberOfJobs;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.NavigationSystem.SetGeometryGatheringMode
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // ENavDataGatheringModeConfig    NewMode                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UNavigationSystem::SetGeometryGatheringMode(ENavDataGatheringModeConfig NewMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.SetGeometryGatheringMode");

        UNavigationSystem_SetGeometryGatheringMode_Params params;
        params.NewMode = NewMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.NavigationSystem.ResetMaxSimultaneousTileGenerationJobsCount
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UNavigationSystem::ResetMaxSimultaneousTileGenerationJobsCount()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.ResetMaxSimultaneousTileGenerationJobsCount");

        UNavigationSystem_ResetMaxSimultaneousTileGenerationJobsCount_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.NavigationSystem.RegisterNavigationInvoker
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  Invoker                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          TileGenerationRadius           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          TileRemovalRadius              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UNavigationSystem::RegisterNavigationInvoker(class AActor* Invoker, float TileGenerationRadius, float TileRemovalRadius)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.RegisterNavigationInvoker");

        UNavigationSystem_RegisterNavigationInvoker_Params params;
        params.Invoker = Invoker;
        params.TileGenerationRadius = TileGenerationRadius;
        params.TileRemovalRadius = TileRemovalRadius;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.NavigationSystem.ProjectPointToNavigation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContext                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Point                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // class ANavigationData*         NavData                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  FilterClass                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 QueryExtent                    (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UNavigationSystem::STATIC_ProjectPointToNavigation(class UObject* WorldContext, const struct FVector& Point, class ANavigationData* NavData, class UClass* FilterClass, const struct FVector& QueryExtent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.ProjectPointToNavigation");

        UNavigationSystem_ProjectPointToNavigation_Params params;
        params.WorldContext = WorldContext;
        params.Point = Point;
        params.NavData = NavData;
        params.FilterClass = FilterClass;
        params.QueryExtent = QueryExtent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavigationSystem.OnNavigationBoundsUpdated
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class ANavMeshBoundsVolume*    NavVolume                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UNavigationSystem::OnNavigationBoundsUpdated(class ANavMeshBoundsVolume* NavVolume)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.OnNavigationBoundsUpdated");

        UNavigationSystem_OnNavigationBoundsUpdated_Params params;
        params.NavVolume = NavVolume;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.NavigationSystem.NavigationRaycast
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContext                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 RayStart                       (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 RayEnd                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 HitLocation                    (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // class UClass*                  FilterClass                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AController*             Querier                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UNavigationSystem::STATIC_NavigationRaycast(class UObject* WorldContext, const struct FVector& RayStart, const struct FVector& RayEnd, class UClass* FilterClass, class AController* Querier, struct FVector* HitLocation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.NavigationRaycast");

        UNavigationSystem_NavigationRaycast_Params params;
        params.WorldContext = WorldContext;
        params.RayStart = RayStart;
        params.RayEnd = RayEnd;
        params.FilterClass = FilterClass;
        params.Querier = Querier;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (HitLocation != nullptr)
            *HitLocation = params.HitLocation;

        return params.ReturnValue;
    }


    // Function Engine.NavigationSystem.IsNavigationBeingBuiltOrLocked
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContext                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UNavigationSystem::STATIC_IsNavigationBeingBuiltOrLocked(class UObject* WorldContext)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.IsNavigationBeingBuiltOrLocked");

        UNavigationSystem_IsNavigationBeingBuiltOrLocked_Params params;
        params.WorldContext = WorldContext;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavigationSystem.IsNavigationBeingBuilt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContext                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UNavigationSystem::STATIC_IsNavigationBeingBuilt(class UObject* WorldContext)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.IsNavigationBeingBuilt");

        UNavigationSystem_IsNavigationBeingBuilt_Params params;
        params.WorldContext = WorldContext;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavigationSystem.GetRandomReachablePointInRadius
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContext                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Origin                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class ANavigationData*         NavData                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  FilterClass                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UNavigationSystem::STATIC_GetRandomReachablePointInRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.GetRandomReachablePointInRadius");

        UNavigationSystem_GetRandomReachablePointInRadius_Params params;
        params.WorldContext = WorldContext;
        params.Origin = Origin;
        params.Radius = Radius;
        params.NavData = NavData;
        params.FilterClass = FilterClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavigationSystem.GetRandomPointInNavigableRadius
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContext                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Origin                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class ANavigationData*         NavData                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  FilterClass                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UNavigationSystem::STATIC_GetRandomPointInNavigableRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.GetRandomPointInNavigableRadius");

        UNavigationSystem_GetRandomPointInNavigableRadius_Params params;
        params.WorldContext = WorldContext;
        params.Origin = Origin;
        params.Radius = Radius;
        params.NavData = NavData;
        params.FilterClass = FilterClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavigationSystem.GetPathLength
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContext                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 PathStart                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 PathEnd                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          PathLength                     (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class ANavigationData*         NavData                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  FilterClass                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ENavigationQueryResult> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    TEnumAsByte<ENavigationQueryResult> UNavigationSystem::STATIC_GetPathLength(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class ANavigationData* NavData, class UClass* FilterClass, float* PathLength)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.GetPathLength");

        UNavigationSystem_GetPathLength_Params params;
        params.WorldContext = WorldContext;
        params.PathStart = PathStart;
        params.PathEnd = PathEnd;
        params.NavData = NavData;
        params.FilterClass = FilterClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (PathLength != nullptr)
            *PathLength = params.PathLength;

        return params.ReturnValue;
    }


    // Function Engine.NavigationSystem.GetPathCost
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContext                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 PathStart                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 PathEnd                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          PathCost                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class ANavigationData*         NavData                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  FilterClass                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ENavigationQueryResult> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    TEnumAsByte<ENavigationQueryResult> UNavigationSystem::STATIC_GetPathCost(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class ANavigationData* NavData, class UClass* FilterClass, float* PathCost)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.GetPathCost");

        UNavigationSystem_GetPathCost_Params params;
        params.WorldContext = WorldContext;
        params.PathStart = PathStart;
        params.PathEnd = PathEnd;
        params.NavData = NavData;
        params.FilterClass = FilterClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (PathCost != nullptr)
            *PathCost = params.PathCost;

        return params.ReturnValue;
    }


    // Function Engine.NavigationSystem.GetNavigationSystem
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContext                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UNavigationSystem*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UNavigationSystem* UNavigationSystem::STATIC_GetNavigationSystem(class UObject* WorldContext)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.GetNavigationSystem");

        UNavigationSystem_GetNavigationSystem_Params params;
        params.WorldContext = WorldContext;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavigationSystem.FindPathToLocationSynchronously
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContext                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 PathStart                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 PathEnd                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // class AActor*                  PathfindingContext             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  FilterClass                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UNavigationPath*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UNavigationPath* UNavigationSystem::STATIC_FindPathToLocationSynchronously(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class AActor* PathfindingContext, class UClass* FilterClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.FindPathToLocationSynchronously");

        UNavigationSystem_FindPathToLocationSynchronously_Params params;
        params.WorldContext = WorldContext;
        params.PathStart = PathStart;
        params.PathEnd = PathEnd;
        params.PathfindingContext = PathfindingContext;
        params.FilterClass = FilterClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavigationSystem.FindPathToActorSynchronously
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContext                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 PathStart                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // class AActor*                  GoalActor                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          TetherDistance                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  PathfindingContext             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  FilterClass                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UNavigationPath*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UNavigationPath* UNavigationSystem::STATIC_FindPathToActorSynchronously(class UObject* WorldContext, const struct FVector& PathStart, class AActor* GoalActor, float TetherDistance, class AActor* PathfindingContext, class UClass* FilterClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.FindPathToActorSynchronously");

        UNavigationSystem_FindPathToActorSynchronously_Params params;
        params.WorldContext = WorldContext;
        params.PathStart = PathStart;
        params.GoalActor = GoalActor;
        params.TetherDistance = TetherDistance;
        params.PathfindingContext = PathfindingContext;
        params.FilterClass = FilterClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavLinkProxy.SetSmartLinkEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnabled                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ANavLinkProxy::SetSmartLinkEnabled(bool bEnabled)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavLinkProxy.SetSmartLinkEnabled");

        ANavLinkProxy_SetSmartLinkEnabled_Params params;
        params.bEnabled = bEnabled;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.NavLinkProxy.ResumePathFollowing
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  Agent                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ANavLinkProxy::ResumePathFollowing(class AActor* Agent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavLinkProxy.ResumePathFollowing");

        ANavLinkProxy_ResumePathFollowing_Params params;
        params.Agent = Agent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.NavLinkProxy.ReceiveSmartLinkReached
    // (FUNC_Event, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintEvent)
    // Parameters:
    // class AActor*                  Agent                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Destination                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void ANavLinkProxy::ReceiveSmartLinkReached(class AActor* Agent, const struct FVector& Destination)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavLinkProxy.ReceiveSmartLinkReached");

        ANavLinkProxy_ReceiveSmartLinkReached_Params params;
        params.Agent = Agent;
        params.Destination = Destination;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.NavLinkProxy.IsSmartLinkEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool ANavLinkProxy::IsSmartLinkEnabled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavLinkProxy.IsSmartLinkEnabled");

        ANavLinkProxy_IsSmartLinkEnabled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavLinkProxy.HasMovingAgents
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool ANavLinkProxy::HasMovingAgents()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavLinkProxy.HasMovingAgents");

        ANavLinkProxy_HasMovingAgents_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.LevelScriptActor.WorldOriginLocationChanged
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // struct FIntVector              OldOriginLocation              (CPF_Parm)
    // struct FIntVector              NewOriginLocation              (CPF_Parm)

    void ALevelScriptActor::WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelScriptActor.WorldOriginLocationChanged");

        ALevelScriptActor_WorldOriginLocationChanged_Params params;
        params.OldOriginLocation = OldOriginLocation;
        params.NewOriginLocation = NewOriginLocation;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LevelScriptActor.SetCinematicMode
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bCinematicMode                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bHidePlayer                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAffectsHUD                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAffectsMovement               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAffectsTurning                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ALevelScriptActor::SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelScriptActor.SetCinematicMode");

        ALevelScriptActor_SetCinematicMode_Params params;
        params.bCinematicMode = bCinematicMode;
        params.bHidePlayer = bHidePlayer;
        params.bAffectsHUD = bAffectsHUD;
        params.bAffectsMovement = bAffectsMovement;
        params.bAffectsTurning = bAffectsTurning;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LevelScriptActor.RemoteEvent
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   EventName                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool ALevelScriptActor::RemoteEvent(const struct FName& EventName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelScriptActor.RemoteEvent");

        ALevelScriptActor_RemoteEvent_Params params;
        params.EventName = EventName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.LevelScriptActor.LevelReset
    // (FUNC_BlueprintAuthorityOnly, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)

    void ALevelScriptActor::LevelReset()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelScriptActor.LevelReset");

        ALevelScriptActor_LevelReset_Params params;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CharacterMovementComponent.SetWalkableFloorZ
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InWalkableFloorZ               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCharacterMovementComponent::SetWalkableFloorZ(float InWalkableFloorZ)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetWalkableFloorZ");

        UCharacterMovementComponent_SetWalkableFloorZ_Params params;
        params.InWalkableFloorZ = InWalkableFloorZ;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CharacterMovementComponent.SetWalkableFloorAngle
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InWalkableFloorAngle           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCharacterMovementComponent::SetWalkableFloorAngle(float InWalkableFloorAngle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetWalkableFloorAngle");

        UCharacterMovementComponent_SetWalkableFloorAngle_Params params;
        params.InWalkableFloorAngle = InWalkableFloorAngle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CharacterMovementComponent.SetMovementMode
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<EMovementMode>     NewMovementMode                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  NewCustomMode                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCharacterMovementComponent::SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, unsigned char NewCustomMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetMovementMode");

        UCharacterMovementComponent_SetMovementMode_Params params;
        params.NewMovementMode = NewMovementMode;
        params.NewCustomMode = NewCustomMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CharacterMovementComponent.SetGroupsToIgnoreMask
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FNavAvoidanceMask       GroupMask                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UCharacterMovementComponent::SetGroupsToIgnoreMask(const struct FNavAvoidanceMask& GroupMask)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetGroupsToIgnoreMask");

        UCharacterMovementComponent_SetGroupsToIgnoreMask_Params params;
        params.GroupMask = GroupMask;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CharacterMovementComponent.SetGroupsToIgnore
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            GroupFlags                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCharacterMovementComponent::SetGroupsToIgnore(int GroupFlags)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetGroupsToIgnore");

        UCharacterMovementComponent_SetGroupsToIgnore_Params params;
        params.GroupFlags = GroupFlags;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CharacterMovementComponent.SetGroupsToAvoidMask
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FNavAvoidanceMask       GroupMask                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UCharacterMovementComponent::SetGroupsToAvoidMask(const struct FNavAvoidanceMask& GroupMask)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetGroupsToAvoidMask");

        UCharacterMovementComponent_SetGroupsToAvoidMask_Params params;
        params.GroupMask = GroupMask;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CharacterMovementComponent.SetGroupsToAvoid
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            GroupFlags                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCharacterMovementComponent::SetGroupsToAvoid(int GroupFlags)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetGroupsToAvoid");

        UCharacterMovementComponent_SetGroupsToAvoid_Params params;
        params.GroupFlags = GroupFlags;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CharacterMovementComponent.SetAvoidanceGroupMask
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FNavAvoidanceMask       GroupMask                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UCharacterMovementComponent::SetAvoidanceGroupMask(const struct FNavAvoidanceMask& GroupMask)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetAvoidanceGroupMask");

        UCharacterMovementComponent_SetAvoidanceGroupMask_Params params;
        params.GroupMask = GroupMask;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CharacterMovementComponent.SetAvoidanceGroup
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            GroupFlags                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCharacterMovementComponent::SetAvoidanceGroup(int GroupFlags)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetAvoidanceGroup");

        UCharacterMovementComponent_SetAvoidanceGroup_Params params;
        params.GroupFlags = GroupFlags;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CharacterMovementComponent.SetAvoidanceEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnable                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCharacterMovementComponent::SetAvoidanceEnabled(bool bEnable)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetAvoidanceEnabled");

        UCharacterMovementComponent_SetAvoidanceEnabled_Params params;
        params.bEnable = bEnable;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCharacterMovementComponent::K2_GetWalkableFloorZ()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ");

        UCharacterMovementComponent_K2_GetWalkableFloorZ_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCharacterMovementComponent::K2_GetWalkableFloorAngle()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle");

        UCharacterMovementComponent_K2_GetWalkableFloorAngle_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCharacterMovementComponent::K2_GetModifiedMaxAcceleration()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration");

        UCharacterMovementComponent_K2_GetModifiedMaxAcceleration_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CharacterMovementComponent.K2_FindFloor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 CapsuleLocation                (CPF_Parm, CPF_IsPlainOldData)
    // struct FFindFloorResult        FloorResult                    (CPF_Parm, CPF_OutParm)

    void UCharacterMovementComponent::K2_FindFloor(const struct FVector& CapsuleLocation, struct FFindFloorResult* FloorResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.K2_FindFloor");

        UCharacterMovementComponent_K2_FindFloor_Params params;
        params.CapsuleLocation = CapsuleLocation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (FloorResult != nullptr)
            *FloorResult = params.FloorResult;
    }


    // Function Engine.CharacterMovementComponent.K2_ComputeFloorDist
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 CapsuleLocation                (CPF_Parm, CPF_IsPlainOldData)
    // float                          LineDistance                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          SweepDistance                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          SweepRadius                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FFindFloorResult        FloorResult                    (CPF_Parm, CPF_OutParm)

    void UCharacterMovementComponent::K2_ComputeFloorDist(const struct FVector& CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult* FloorResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.K2_ComputeFloorDist");

        UCharacterMovementComponent_K2_ComputeFloorDist_Params params;
        params.CapsuleLocation = CapsuleLocation;
        params.LineDistance = LineDistance;
        params.SweepDistance = SweepDistance;
        params.SweepRadius = SweepRadius;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (FloorResult != nullptr)
            *FloorResult = params.FloorResult;
    }


    // Function Engine.CharacterMovementComponent.IsWalking
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UCharacterMovementComponent::IsWalking()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.IsWalking");

        UCharacterMovementComponent_IsWalking_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CharacterMovementComponent.IsWalkable
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FHitResult              Hit                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UCharacterMovementComponent::IsWalkable(const struct FHitResult& Hit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.IsWalkable");

        UCharacterMovementComponent_IsWalkable_Params params;
        params.Hit = Hit;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CharacterMovementComponent.GetValidPerchRadius
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCharacterMovementComponent::GetValidPerchRadius()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetValidPerchRadius");

        UCharacterMovementComponent_GetValidPerchRadius_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCharacterMovementComponent::GetPerchRadiusThreshold()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold");

        UCharacterMovementComponent_GetPerchRadiusThreshold_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CharacterMovementComponent.GetMovementBase
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UPrimitiveComponent*     ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UPrimitiveComponent* UCharacterMovementComponent::GetMovementBase()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMovementBase");

        UCharacterMovementComponent_GetMovementBase_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CharacterMovementComponent.GetMinAnalogSpeed
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCharacterMovementComponent::GetMinAnalogSpeed()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMinAnalogSpeed");

        UCharacterMovementComponent_GetMinAnalogSpeed_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CharacterMovementComponent.GetMaxJumpHeight
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCharacterMovementComponent::GetMaxJumpHeight()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMaxJumpHeight");

        UCharacterMovementComponent_GetMaxJumpHeight_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CharacterMovementComponent.GetMaxBrakingDeceleration
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCharacterMovementComponent::GetMaxBrakingDeceleration()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMaxBrakingDeceleration");

        UCharacterMovementComponent_GetMaxBrakingDeceleration_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CharacterMovementComponent.GetMaxAcceleration
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCharacterMovementComponent::GetMaxAcceleration()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMaxAcceleration");

        UCharacterMovementComponent_GetMaxAcceleration_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UCharacterMovementComponent::GetImpartedMovementBaseVelocity()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity");

        UCharacterMovementComponent_GetImpartedMovementBaseVelocity_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CharacterMovementComponent.GetCurrentAcceleration
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UCharacterMovementComponent::GetCurrentAcceleration()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetCurrentAcceleration");

        UCharacterMovementComponent_GetCurrentAcceleration_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CharacterMovementComponent.GetCharacterOwner
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class ACharacter*              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class ACharacter* UCharacterMovementComponent::GetCharacterOwner()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetCharacterOwner");

        UCharacterMovementComponent_GetCharacterOwner_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CharacterMovementComponent.GetAnalogInputModifier
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCharacterMovementComponent::GetAnalogInputModifier()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetAnalogInputModifier");

        UCharacterMovementComponent_GetAnalogInputModifier_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CharacterMovementComponent.DisableMovement
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UCharacterMovementComponent::DisableMovement()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.DisableMovement");

        UCharacterMovementComponent_DisableMovement_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CharacterMovementComponent.CapsuleTouched
    // (FUNC_Native, FUNC_Protected, FUNC_HasOutParms)
    // Parameters:
    // class UPrimitiveComponent*     OverlappedComp                 (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // class AActor*                  Other                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UPrimitiveComponent*     OtherComp                      (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // int                            OtherBodyIndex                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bFromSweep                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              SweepResult                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UCharacterMovementComponent::CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.CapsuleTouched");

        UCharacterMovementComponent_CapsuleTouched_Params params;
        params.OverlappedComp = OverlappedComp;
        params.Other = Other;
        params.OtherComp = OtherComp;
        params.OtherBodyIndex = OtherBodyIndex;
        params.bFromSweep = bFromSweep;
        params.SweepResult = SweepResult;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CharacterMovementComponent.CalcVelocity
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Friction                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bFluid                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BrakingDeceleration            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCharacterMovementComponent::CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.CalcVelocity");

        UCharacterMovementComponent_CalcVelocity_Params params;
        params.DeltaTime = DeltaTime;
        params.Friction = Friction;
        params.bFluid = bFluid;
        params.BrakingDeceleration = BrakingDeceleration;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CharacterMovementComponent.AddImpulse
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Impulse                        (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bVelocityChange                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCharacterMovementComponent::AddImpulse(const struct FVector& Impulse, bool bVelocityChange)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.AddImpulse");

        UCharacterMovementComponent_AddImpulse_Params params;
        params.Impulse = Impulse;
        params.bVelocityChange = bVelocityChange;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CharacterMovementComponent.AddForce
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Force                          (CPF_Parm, CPF_IsPlainOldData)

    void UCharacterMovementComponent::AddForce(const struct FVector& Force)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.AddForce");

        UCharacterMovementComponent_AddForce_Params params;
        params.Force = Force;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.BoxComponent.SetBoxExtent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 InBoxExtent                    (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bUpdateOverlaps                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UBoxComponent::SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BoxComponent.SetBoxExtent");

        UBoxComponent_SetBoxExtent_Params params;
        params.InBoxExtent = InBoxExtent;
        params.bUpdateOverlaps = bUpdateOverlaps;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.BoxComponent.GetUnscaledBoxExtent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UBoxComponent::GetUnscaledBoxExtent()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BoxComponent.GetUnscaledBoxExtent");

        UBoxComponent_GetUnscaledBoxExtent_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.BoxComponent.GetScaledBoxExtent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UBoxComponent::GetScaledBoxExtent()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BoxComponent.GetScaledBoxExtent");

        UBoxComponent_GetScaledBoxExtent_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerState.ReceiveOverrideWith
    // (FUNC_Event, FUNC_Protected, FUNC_BlueprintEvent)
    // Parameters:
    // class APlayerState*            OldPlayerState                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerState::ReceiveOverrideWith(class APlayerState* OldPlayerState)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.ReceiveOverrideWith");

        APlayerState_ReceiveOverrideWith_Params params;
        params.OldPlayerState = OldPlayerState;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerState.ReceiveCopyProperties
    // (FUNC_Event, FUNC_Protected, FUNC_BlueprintEvent)
    // Parameters:
    // class APlayerState*            NewPlayerState                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerState::ReceiveCopyProperties(class APlayerState* NewPlayerState)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.ReceiveCopyProperties");

        APlayerState_ReceiveCopyProperties_Params params;
        params.NewPlayerState = NewPlayerState;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerState.OnRep_UniqueId
    // (FUNC_Native, FUNC_Public)

    void APlayerState::OnRep_UniqueId()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_UniqueId");

        APlayerState_OnRep_UniqueId_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerState.OnRep_Score
    // (FUNC_Native, FUNC_Public)

    void APlayerState::OnRep_Score()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_Score");

        APlayerState_OnRep_Score_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerState.OnRep_PlayerName
    // (FUNC_Native, FUNC_Public)

    void APlayerState::OnRep_PlayerName()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_PlayerName");

        APlayerState_OnRep_PlayerName_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerState.OnRep_PlayerId
    // (FUNC_Native, FUNC_Public)

    void APlayerState::OnRep_PlayerId()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_PlayerId");

        APlayerState_OnRep_PlayerId_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerState.OnRep_bIsInactive
    // (FUNC_Native, FUNC_Public)

    void APlayerState::OnRep_bIsInactive()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_bIsInactive");

        APlayerState_OnRep_bIsInactive_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerCameraManager.StopCameraShake
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UCameraShake*            ShakeInstance                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bImmediately                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerCameraManager::StopCameraShake(class UCameraShake* ShakeInstance, bool bImmediately)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopCameraShake");

        APlayerCameraManager_StopCameraShake_Params params;
        params.ShakeInstance = ShakeInstance;
        params.bImmediately = bImmediately;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerCameraManager.StopCameraFade
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void APlayerCameraManager::StopCameraFade()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopCameraFade");

        APlayerCameraManager_StopCameraFade_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerCameraManager.StopCameraAnimInst
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UCameraAnimInst*         AnimInst                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bImmediate                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerCameraManager::StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopCameraAnimInst");

        APlayerCameraManager_StopCameraAnimInst_Params params;
        params.AnimInst = AnimInst;
        params.bImmediate = bImmediate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UClass*                  Shake                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bImmediately                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerCameraManager::StopAllInstancesOfCameraShake(class UClass* Shake, bool bImmediately)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake");

        APlayerCameraManager_StopAllInstancesOfCameraShake_Params params;
        params.Shake = Shake;
        params.bImmediately = bImmediately;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UCameraAnim*             Anim                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bImmediate                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerCameraManager::StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim");

        APlayerCameraManager_StopAllInstancesOfCameraAnim_Params params;
        params.Anim = Anim;
        params.bImmediate = bImmediate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerCameraManager.StopAllCameraShakes
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bImmediately                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerCameraManager::StopAllCameraShakes(bool bImmediately)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopAllCameraShakes");

        APlayerCameraManager_StopAllCameraShakes_Params params;
        params.bImmediately = bImmediately;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerCameraManager.StopAllCameraAnims
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bImmediate                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerCameraManager::StopAllCameraAnims(bool bImmediate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopAllCameraAnims");

        APlayerCameraManager_StopAllCameraAnims_Params params;
        params.bImmediate = bImmediate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerCameraManager.StartCameraFade
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // float                          FromAlpha                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ToAlpha                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            Color                          (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bShouldFadeAudio               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bHoldWhenFinished              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerCameraManager::StartCameraFade(float FromAlpha, float ToAlpha, float Duration, const struct FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StartCameraFade");

        APlayerCameraManager_StartCameraFade_Params params;
        params.FromAlpha = FromAlpha;
        params.ToAlpha = ToAlpha;
        params.Duration = Duration;
        params.Color = Color;
        params.bShouldFadeAudio = bShouldFadeAudio;
        params.bHoldWhenFinished = bHoldWhenFinished;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerCameraManager.SetManualCameraFade
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InFadeAmount                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            Color                          (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bInFadeAudio                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerCameraManager::SetManualCameraFade(float InFadeAmount, const struct FLinearColor& Color, bool bInFadeAudio)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.SetManualCameraFade");

        APlayerCameraManager_SetManualCameraFade_Params params;
        params.InFadeAmount = InFadeAmount;
        params.Color = Color;
        params.bInFadeAudio = bInFadeAudio;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerCameraManager.RemoveCameraModifier
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UCameraModifier*         ModifierToRemove               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APlayerCameraManager::RemoveCameraModifier(class UCameraModifier* ModifierToRemove)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.RemoveCameraModifier");

        APlayerCameraManager_RemoveCameraModifier_Params params;
        params.ModifierToRemove = ModifierToRemove;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerCameraManager.RemoveCameraLensEffect
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AEmitterCameraLensEffectBase* Emitter                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlayerCameraManager::RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.RemoveCameraLensEffect");

        APlayerCameraManager_RemoveCameraLensEffect_Params params;
        params.Emitter = Emitter;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerCameraManager.PlayCameraShake
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UClass*                  ShakeClass                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Scale                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ECameraAnimPlaySpace> PlaySpace                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                UserPlaySpaceRot               (CPF_Parm, CPF_IsPlainOldData)
    // class UCameraShake*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UCameraShake* APlayerCameraManager::PlayCameraShake(class UClass* ShakeClass, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.PlayCameraShake");

        APlayerCameraManager_PlayCameraShake_Params params;
        params.ShakeClass = ShakeClass;
        params.Scale = Scale;
        params.PlaySpace = PlaySpace;
        params.UserPlaySpaceRot = UserPlaySpaceRot;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerCameraManager.PlayCameraAnim
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UCameraAnim*             Anim                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Rate                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Scale                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BlendInTime                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BlendOutTime                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bLoop                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bRandomStartTime               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ECameraAnimPlaySpace> PlaySpace                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                UserPlaySpaceRot               (CPF_Parm, CPF_IsPlainOldData)
    // class UCameraAnimInst*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UCameraAnimInst* APlayerCameraManager::PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.PlayCameraAnim");

        APlayerCameraManager_PlayCameraAnim_Params params;
        params.Anim = Anim;
        params.Rate = Rate;
        params.Scale = Scale;
        params.BlendInTime = BlendInTime;
        params.BlendOutTime = BlendOutTime;
        params.bLoop = bLoop;
        params.bRandomStartTime = bRandomStartTime;
        params.Duration = Duration;
        params.PlaySpace = PlaySpace;
        params.UserPlaySpaceRot = UserPlaySpaceRot;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerCameraManager.PhotographyCameraModify
    // (FUNC_BlueprintCosmetic, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintEvent)
    // Parameters:
    // struct FVector                 NewCameraLocation              (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 PreviousCameraLocation         (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 OriginalCameraLocation         (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ResultCameraLocation           (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void APlayerCameraManager::PhotographyCameraModify(const struct FVector& NewCameraLocation, const struct FVector& PreviousCameraLocation, const struct FVector& OriginalCameraLocation, struct FVector* ResultCameraLocation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.PhotographyCameraModify");

        APlayerCameraManager_PhotographyCameraModify_Params params;
        params.NewCameraLocation = NewCameraLocation;
        params.PreviousCameraLocation = PreviousCameraLocation;
        params.OriginalCameraLocation = OriginalCameraLocation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (ResultCameraLocation != nullptr)
            *ResultCameraLocation = params.ResultCameraLocation;
    }


    // Function Engine.PlayerCameraManager.OnPhotographySessionStart
    // (FUNC_BlueprintCosmetic, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)

    void APlayerCameraManager::OnPhotographySessionStart()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.OnPhotographySessionStart");

        APlayerCameraManager_OnPhotographySessionStart_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerCameraManager.OnPhotographySessionEnd
    // (FUNC_BlueprintCosmetic, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)

    void APlayerCameraManager::OnPhotographySessionEnd()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.OnPhotographySessionEnd");

        APlayerCameraManager_OnPhotographySessionEnd_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart
    // (FUNC_BlueprintCosmetic, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)

    void APlayerCameraManager::OnPhotographyMultiPartCaptureStart()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart");

        APlayerCameraManager_OnPhotographyMultiPartCaptureStart_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd
    // (FUNC_BlueprintCosmetic, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)

    void APlayerCameraManager::OnPhotographyMultiPartCaptureEnd()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd");

        APlayerCameraManager_OnPhotographyMultiPartCaptureEnd_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerCameraManager.GetOwningPlayerController
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class APlayerController*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class APlayerController* APlayerCameraManager::GetOwningPlayerController()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.GetOwningPlayerController");

        APlayerCameraManager_GetOwningPlayerController_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerCameraManager.GetFOVAngle
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float APlayerCameraManager::GetFOVAngle()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.GetFOVAngle");

        APlayerCameraManager_GetFOVAngle_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerCameraManager.GetCameraRotation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator APlayerCameraManager::GetCameraRotation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.GetCameraRotation");

        APlayerCameraManager_GetCameraRotation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerCameraManager.GetCameraLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector APlayerCameraManager::GetCameraLocation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.GetCameraLocation");

        APlayerCameraManager_GetCameraLocation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerCameraManager.FindCameraModifierByClass
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UClass*                  ModifierClass                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UCameraModifier*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UCameraModifier* APlayerCameraManager::FindCameraModifierByClass(class UClass* ModifierClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.FindCameraModifierByClass");

        APlayerCameraManager_FindCameraModifierByClass_Params params;
        params.ModifierClass = ModifierClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerCameraManager.ClearCameraLensEffects
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void APlayerCameraManager::ClearCameraLensEffects()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.ClearCameraLensEffects");

        APlayerCameraManager_ClearCameraLensEffects_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlayerCameraManager.BlueprintUpdateCamera
    // (FUNC_BlueprintCosmetic, FUNC_Event, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintEvent)
    // Parameters:
    // class AActor*                  CameraTarget                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 NewCameraLocation              (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FRotator                NewCameraRotation              (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // float                          NewCameraFOV                   (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool APlayerCameraManager::BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.BlueprintUpdateCamera");

        APlayerCameraManager_BlueprintUpdateCamera_Params params;
        params.CameraTarget = CameraTarget;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (NewCameraLocation != nullptr)
            *NewCameraLocation = params.NewCameraLocation;
        if (NewCameraRotation != nullptr)
            *NewCameraRotation = params.NewCameraRotation;
        if (NewCameraFOV != nullptr)
            *NewCameraFOV = params.NewCameraFOV;

        return params.ReturnValue;
    }


    // Function Engine.PlayerCameraManager.AddNewCameraModifier
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UClass*                  ModifierClass                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UCameraModifier*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UCameraModifier* APlayerCameraManager::AddNewCameraModifier(class UClass* ModifierClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.AddNewCameraModifier");

        APlayerCameraManager_AddNewCameraModifier_Params params;
        params.ModifierClass = ModifierClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlayerCameraManager.AddCameraLensEffect
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UClass*                  LensEffectEmitterClass         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AEmitterCameraLensEffectBase* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AEmitterCameraLensEffectBase* APlayerCameraManager::AddCameraLensEffect(class UClass* LensEffectEmitterClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.AddCameraLensEffect");

        APlayerCameraManager_AddCameraLensEffect_Params params;
        params.LensEffectEmitterClass = LensEffectEmitterClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CameraComponent.SetUseFieldOfViewForLOD
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bInUseFieldOfViewForLOD        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCameraComponent::SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetUseFieldOfViewForLOD");

        UCameraComponent_SetUseFieldOfViewForLOD_Params params;
        params.bInUseFieldOfViewForLOD = bInUseFieldOfViewForLOD;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraComponent.SetProjectionMode
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<ECameraProjectionMode> InProjectionMode               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCameraComponent::SetProjectionMode(TEnumAsByte<ECameraProjectionMode> InProjectionMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetProjectionMode");

        UCameraComponent_SetProjectionMode_Params params;
        params.InProjectionMode = InProjectionMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraComponent.SetPostProcessBlendWeight
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InPostProcessBlendWeight       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCameraComponent::SetPostProcessBlendWeight(float InPostProcessBlendWeight)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetPostProcessBlendWeight");

        UCameraComponent_SetPostProcessBlendWeight_Params params;
        params.InPostProcessBlendWeight = InPostProcessBlendWeight;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraComponent.SetOrthoWidth
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InOrthoWidth                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCameraComponent::SetOrthoWidth(float InOrthoWidth)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetOrthoWidth");

        UCameraComponent_SetOrthoWidth_Params params;
        params.InOrthoWidth = InOrthoWidth;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraComponent.SetOrthoNearClipPlane
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InOrthoNearClipPlane           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCameraComponent::SetOrthoNearClipPlane(float InOrthoNearClipPlane)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetOrthoNearClipPlane");

        UCameraComponent_SetOrthoNearClipPlane_Params params;
        params.InOrthoNearClipPlane = InOrthoNearClipPlane;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraComponent.SetOrthoFarClipPlane
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InOrthoFarClipPlane            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCameraComponent::SetOrthoFarClipPlane(float InOrthoFarClipPlane)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetOrthoFarClipPlane");

        UCameraComponent_SetOrthoFarClipPlane_Params params;
        params.InOrthoFarClipPlane = InOrthoFarClipPlane;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraComponent.SetFieldOfView
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InFieldOfView                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCameraComponent::SetFieldOfView(float InFieldOfView)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetFieldOfView");

        UCameraComponent_SetFieldOfView_Params params;
        params.InFieldOfView = InFieldOfView;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraComponent.SetConstraintAspectRatio
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bInConstrainAspectRatio        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCameraComponent::SetConstraintAspectRatio(bool bInConstrainAspectRatio)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetConstraintAspectRatio");

        UCameraComponent_SetConstraintAspectRatio_Params params;
        params.bInConstrainAspectRatio = bInConstrainAspectRatio;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraComponent.SetAspectRatio
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InAspectRatio                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCameraComponent::SetAspectRatio(float InAspectRatio)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetAspectRatio");

        UCameraComponent_SetAspectRatio_Params params;
        params.InAspectRatio = InAspectRatio;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraComponent.GetCameraView
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FMinimalViewInfo        DesiredView                    (CPF_Parm, CPF_OutParm)

    void UCameraComponent::GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.GetCameraView");

        UCameraComponent_GetCameraView_Params params;
        params.DeltaTime = DeltaTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (DesiredView != nullptr)
            *DesiredView = params.DesiredView;
    }


    // Function Engine.CameraComponent.AddOrUpdateBlendable
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TScriptInterface<class UBlendableInterface> InBlendableObject              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InWeight                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCameraComponent::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.AddOrUpdateBlendable");

        UCameraComponent_AddOrUpdateBlendable_Params params;
        params.InBlendableObject = InBlendableObject;
        params.InWeight = InWeight;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset
    // (FUNC_Native, FUNC_Public)

    void ASkeletalMeshActor::OnRep_ReplicatedPhysAsset()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset");

        ASkeletalMeshActor_OnRep_ReplicatedPhysAsset_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh
    // (FUNC_Native, FUNC_Public)

    void ASkeletalMeshActor::OnRep_ReplicatedMesh()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh");

        ASkeletalMeshActor_OnRep_ReplicatedMesh_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1
    // (FUNC_Native, FUNC_Public)

    void ASkeletalMeshActor::OnRep_ReplicatedMaterial1()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1");

        ASkeletalMeshActor_OnRep_ReplicatedMaterial1_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0
    // (FUNC_Native, FUNC_Public)

    void ASkeletalMeshActor::OnRep_ReplicatedMaterial0()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0");

        ASkeletalMeshActor_OnRep_ReplicatedMaterial0_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkinnedMeshComponent.UnHideBoneByName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkinnedMeshComponent::UnHideBoneByName(const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.UnHideBoneByName");

        USkinnedMeshComponent_UnHideBoneByName_Params params;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkinnedMeshComponent.TransformToBoneSpace
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 InPosition                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                InRotation                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 OutPosition                    (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FRotator                OutRotation                    (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void USkinnedMeshComponent::TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.TransformToBoneSpace");

        USkinnedMeshComponent_TransformToBoneSpace_Params params;
        params.BoneName = BoneName;
        params.InPosition = InPosition;
        params.InRotation = InRotation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutPosition != nullptr)
            *OutPosition = params.OutPosition;
        if (OutRotation != nullptr)
            *OutRotation = params.OutRotation;
    }


    // Function Engine.SkinnedMeshComponent.TransformFromBoneSpace
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 InPosition                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                InRotation                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 OutPosition                    (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FRotator                OutRotation                    (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void USkinnedMeshComponent::TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.TransformFromBoneSpace");

        USkinnedMeshComponent_TransformFromBoneSpace_Params params;
        params.BoneName = BoneName;
        params.InPosition = InPosition;
        params.InRotation = InRotation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutPosition != nullptr)
            *OutPosition = params.OutPosition;
        if (OutRotation != nullptr)
            *OutRotation = params.OutRotation;
    }


    // Function Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // int                            LODIndex                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<struct FLinearColor>    VertexColors                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)

    void USkinnedMeshComponent::SetVertexColorOverride_LinearColor(int LODIndex, TArray<struct FLinearColor> VertexColors)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor");

        USkinnedMeshComponent_SetVertexColorOverride_LinearColor_Params params;
        params.LODIndex = LODIndex;
        params.VertexColors = VertexColors;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkinnedMeshComponent.SetSkinWeightOverride
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // int                            LODIndex                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<struct FSkelMeshSkinWeightInfo> SkinWeights                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)

    void USkinnedMeshComponent::SetSkinWeightOverride(int LODIndex, TArray<struct FSkelMeshSkinWeightInfo> SkinWeights)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetSkinWeightOverride");

        USkinnedMeshComponent_SetSkinWeightOverride_Params params;
        params.LODIndex = LODIndex;
        params.SkinWeights = SkinWeights;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkinnedMeshComponent.SetSkeletalMesh
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class USkeletalMesh*           NewMesh                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bReinitPose                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkinnedMeshComponent::SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bReinitPose)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetSkeletalMesh");

        USkinnedMeshComponent_SetSkeletalMesh_Params params;
        params.NewMesh = NewMesh;
        params.bReinitPose = bReinitPose;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkinnedMeshComponent.SetPhysicsAsset
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UPhysicsAsset*           NewPhysicsAsset                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bForceReInit                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkinnedMeshComponent::SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetPhysicsAsset");

        USkinnedMeshComponent_SetPhysicsAsset_Params params;
        params.NewPhysicsAsset = NewPhysicsAsset;
        params.bForceReInit = bForceReInit;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkinnedMeshComponent.SetMinLOD
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            InNewMinLOD                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkinnedMeshComponent::SetMinLOD(int InNewMinLOD)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetMinLOD");

        USkinnedMeshComponent_SetMinLOD_Params params;
        params.InNewMinLOD = InNewMinLOD;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkinnedMeshComponent.SetMasterPoseComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class USkinnedMeshComponent*   NewMasterBoneComponent         (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

    void USkinnedMeshComponent::SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetMasterPoseComponent");

        USkinnedMeshComponent_SetMasterPoseComponent_Params params;
        params.NewMasterBoneComponent = NewMasterBoneComponent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkinnedMeshComponent.SetForcedLOD
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            InNewForcedLOD                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkinnedMeshComponent::SetForcedLOD(int InNewForcedLOD)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetForcedLOD");

        USkinnedMeshComponent_SetForcedLOD_Params params;
        params.InNewForcedLOD = InNewForcedLOD;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewValue                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkinnedMeshComponent::SetCastCapsuleIndirectShadow(bool bNewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow");

        USkinnedMeshComponent_SetCastCapsuleIndirectShadow_Params params;
        params.bNewValue = bNewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewValue                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkinnedMeshComponent::SetCastCapsuleDirectShadow(bool bNewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow");

        USkinnedMeshComponent_SetCastCapsuleDirectShadow_Params params;
        params.bNewValue = bNewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkinnedMeshComponent::SetCapsuleIndirectShadowMinVisibility(float NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility");

        USkinnedMeshComponent_SetCapsuleIndirectShadowMinVisibility_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkinnedMeshComponent.IsBoneHiddenByName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool USkinnedMeshComponent::IsBoneHiddenByName(const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.IsBoneHiddenByName");

        USkinnedMeshComponent_IsBoneHiddenByName_Params params;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkinnedMeshComponent.HideBoneByName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EPhysBodyOp>       PhysBodyOption                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkinnedMeshComponent::HideBoneByName(const struct FName& BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.HideBoneByName");

        USkinnedMeshComponent_HideBoneByName_Params params;
        params.BoneName = BoneName;
        params.PhysBodyOption = PhysBodyOption;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkinnedMeshComponent.GetSocketBoneName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   InSocketName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FName USkinnedMeshComponent::GetSocketBoneName(const struct FName& InSocketName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetSocketBoneName");

        USkinnedMeshComponent_GetSocketBoneName_Params params;
        params.InSocketName = InSocketName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkinnedMeshComponent.GetParentBone
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FName USkinnedMeshComponent::GetParentBone(const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetParentBone");

        USkinnedMeshComponent_GetParentBone_Params params;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkinnedMeshComponent.GetNumBones
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int USkinnedMeshComponent::GetNumBones()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetNumBones");

        USkinnedMeshComponent_GetNumBones_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkinnedMeshComponent.GetBoneName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            BoneIndex                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FName USkinnedMeshComponent::GetBoneName(int BoneIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetBoneName");

        USkinnedMeshComponent_GetBoneName_Params params;
        params.BoneIndex = BoneIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkinnedMeshComponent.GetBoneIndex
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int USkinnedMeshComponent::GetBoneIndex(const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetBoneIndex");

        USkinnedMeshComponent_GetBoneIndex_Params params;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkinnedMeshComponent.FindClosestBone_K2
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 TestLocation                   (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 BoneLocation                   (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // float                          IgnoreScale                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bRequirePhysicsAsset           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FName USkinnedMeshComponent::FindClosestBone_K2(const struct FVector& TestLocation, float IgnoreScale, bool bRequirePhysicsAsset, struct FVector* BoneLocation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.FindClosestBone_K2");

        USkinnedMeshComponent_FindClosestBone_K2_Params params;
        params.TestLocation = TestLocation;
        params.IgnoreScale = IgnoreScale;
        params.bRequirePhysicsAsset = bRequirePhysicsAsset;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (BoneLocation != nullptr)
            *BoneLocation = params.BoneLocation;

        return params.ReturnValue;
    }


    // Function Engine.SkinnedMeshComponent.ClearVertexColorOverride
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            LODIndex                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkinnedMeshComponent::ClearVertexColorOverride(int LODIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.ClearVertexColorOverride");

        USkinnedMeshComponent_ClearVertexColorOverride_Params params;
        params.LODIndex = LODIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkinnedMeshComponent.ClearSkinWeightOverride
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            LODIndex                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkinnedMeshComponent::ClearSkinWeightOverride(int LODIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.ClearSkinWeightOverride");

        USkinnedMeshComponent_ClearSkinWeightOverride_Params params;
        params.LODIndex = LODIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkinnedMeshComponent.BoneIsChildOf
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   ParentBoneName                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool USkinnedMeshComponent::BoneIsChildOf(const struct FName& BoneName, const struct FName& ParentBoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.BoneIsChildOf");

        USkinnedMeshComponent_BoneIsChildOf_Params params;
        params.BoneName = BoneName;
        params.ParentBoneName = ParentBoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bRestoreSimulationSpace        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent");

        USkeletalMeshComponent_UnbindClothFromMasterPoseComponent_Params params;
        params.bRestoreSimulationSpace = bRestoreSimulationSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SuspendClothingSimulation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void USkeletalMeshComponent::SuspendClothingSimulation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SuspendClothingSimulation");

        USkeletalMeshComponent_SuspendClothingSimulation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.Stop
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void USkeletalMeshComponent::Stop()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.Stop");

        USkeletalMeshComponent_Stop_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SnapshotPose
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FPoseSnapshot           Snapshot                       (CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void USkeletalMeshComponent::SnapshotPose(struct FPoseSnapshot* Snapshot)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SnapshotPose");

        USkeletalMeshComponent_SnapshotPose_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Snapshot != nullptr)
            *Snapshot = params.Snapshot;
    }


    // Function Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           NewUpdateState                 (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetUpdateAnimationInEditor(bool NewUpdateState)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor");

        USkeletalMeshComponent_SetUpdateAnimationInEditor_Params params;
        params.NewUpdateState = NewUpdateState;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetPosition
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InPos                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bFireNotifies                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetPosition(float InPos, bool bFireNotifies)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetPosition");

        USkeletalMeshComponent_SetPosition_Params params;
        params.InPos = InPos;
        params.bFireNotifies = bFireNotifies;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetPlayRate
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Rate                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetPlayRate(float Rate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetPlayRate");

        USkeletalMeshComponent_SetPlayRate_Params params;
        params.Rate = Rate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          PhysicsBlendWeight             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetPhysicsBlendWeight(float PhysicsBlendWeight)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight");

        USkeletalMeshComponent_SetPhysicsBlendWeight_Params params;
        params.PhysicsBlendWeight = PhysicsBlendWeight;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewNotifyRigidBodyCollision   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bIncludeSelf                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName, bool bIncludeSelf)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow");

        USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelow_Params params;
        params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;
        params.BoneName = BoneName;
        params.bIncludeSelf = bIncludeSelf;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetMorphTarget
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   MorphTargetName                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bRemoveZeroWeight              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetMorphTarget(const struct FName& MorphTargetName, float Value, bool bRemoveZeroWeight)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetMorphTarget");

        USkeletalMeshComponent_SetMorphTarget_Params params;
        params.MorphTargetName = MorphTargetName;
        params.Value = Value;
        params.bRemoveZeroWeight = bRemoveZeroWeight;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewBlendPhysics               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetEnablePhysicsBlending(bool bNewBlendPhysics)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending");

        USkeletalMeshComponent_SetEnablePhysicsBlending_Params params;
        params.bNewBlendPhysics = bNewBlendPhysics;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnableGravity                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bIncludeSelf                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, const struct FName& BoneName, bool bIncludeSelf)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow");

        USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelow_Params params;
        params.bEnableGravity = bEnableGravity;
        params.BoneName = BoneName;
        params.bIncludeSelf = bIncludeSelf;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetEnableBodyGravity
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnableGravity                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetEnableBodyGravity(bool bEnableGravity, const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetEnableBodyGravity");

        USkeletalMeshComponent_SetEnableBodyGravity_Params params;
        params.bEnableGravity = bEnableGravity;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetDisableAnimCurves
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bInDisableAnimCurves           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetDisableAnimCurves(bool bInDisableAnimCurves)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetDisableAnimCurves");

        USkeletalMeshComponent_SetDisableAnimCurves_Params params;
        params.bInDisableAnimCurves = bInDisableAnimCurves;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetConstraintProfileForAll
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ProfileName                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bDefaultIfNotFound             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetConstraintProfileForAll(const struct FName& ProfileName, bool bDefaultIfNotFound)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetConstraintProfileForAll");

        USkeletalMeshComponent_SetConstraintProfileForAll_Params params;
        params.ProfileName = ProfileName;
        params.bDefaultIfNotFound = bDefaultIfNotFound;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetConstraintProfile
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   JointName                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   ProfileName                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bDefaultIfNotFound             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetConstraintProfile(const struct FName& JointName, const struct FName& ProfileName, bool bDefaultIfNotFound)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetConstraintProfile");

        USkeletalMeshComponent_SetConstraintProfile_Params params;
        params.JointName = JointName;
        params.ProfileName = ProfileName;
        params.bDefaultIfNotFound = bDefaultIfNotFound;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Scale                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetClothMaxDistanceScale(float Scale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale");

        USkeletalMeshComponent_SetClothMaxDistanceScale_Params params;
        params.Scale = Scale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewNotifyRigidBodyCollision   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision");

        USkeletalMeshComponent_SetBodyNotifyRigidBodyCollision_Params params;
        params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetAnimInstanceClass
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UClass*                  NewClass                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetAnimInstanceClass(class UClass* NewClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAnimInstanceClass");

        USkeletalMeshComponent_SetAnimInstanceClass_Params params;
        params.NewClass = NewClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetAnimationMode
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<EAnimationMode>    InAnimationMode                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAnimationMode");

        USkeletalMeshComponent_SetAnimationMode_Params params;
        params.InAnimationMode = InAnimationMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetAnimation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UAnimationAsset*         NewAnimToPlay                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetAnimation(class UAnimationAsset* NewAnimToPlay)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAnimation");

        USkeletalMeshComponent_SetAnimation_Params params;
        params.NewAnimToPlay = NewAnimToPlay;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetAngularLimits
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   InBoneName                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Swing1LimitAngle               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          TwistLimitAngle                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Swing2LimitAngle               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetAngularLimits(const struct FName& InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAngularLimits");

        USkeletalMeshComponent_SetAngularLimits_Params params;
        params.InBoneName = InBoneName;
        params.Swing1LimitAngle = Swing1LimitAngle;
        params.TwistLimitAngle = TwistLimitAngle;
        params.Swing2LimitAngle = Swing2LimitAngle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnableSwingDrive              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bEnableTwistDrive              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bSkipCustomPhysicsType         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive");

        USkeletalMeshComponent_SetAllMotorsAngularVelocityDrive_Params params;
        params.bEnableSwingDrive = bEnableSwingDrive;
        params.bEnableTwistDrive = bEnableTwistDrive;
        params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnableSwingDrive              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bEnableTwistDrive              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bSkipCustomPhysicsType         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive");

        USkeletalMeshComponent_SetAllMotorsAngularPositionDrive_Params params;
        params.bEnableSwingDrive = bEnableSwingDrive;
        params.bEnableTwistDrive = bEnableTwistDrive;
        params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InSpring                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InDamping                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InForceLimit                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bSkipCustomPhysicsType         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams");

        USkeletalMeshComponent_SetAllMotorsAngularDriveParams_Params params;
        params.InSpring = InSpring;
        params.InDamping = InDamping;
        params.InForceLimit = InForceLimit;
        params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewSimulate                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetAllBodiesSimulatePhysics(bool bNewSimulate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics");

        USkeletalMeshComponent_SetAllBodiesSimulatePhysics_Params params;
        params.bNewSimulate = bNewSimulate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          PhysicsBlendWeight             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bSkipCustomPhysicsType         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight");

        USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeight_Params params;
        params.PhysicsBlendWeight = PhysicsBlendWeight;
        params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   InBoneName                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bNewSimulate                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bIncludeSelf                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetAllBodiesBelowSimulatePhysics(const struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics");

        USkeletalMeshComponent_SetAllBodiesBelowSimulatePhysics_Params params;
        params.InBoneName = InBoneName;
        params.bNewSimulate = bNewSimulate;
        params.bIncludeSelf = bIncludeSelf;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   InBoneName                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          PhysicsBlendWeight             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bSkipCustomPhysicsType         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bIncludeSelf                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::SetAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight");

        USkeletalMeshComponent_SetAllBodiesBelowPhysicsBlendWeight_Params params;
        params.InBoneName = InBoneName;
        params.PhysicsBlendWeight = PhysicsBlendWeight;
        params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;
        params.bIncludeSelf = bIncludeSelf;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.ResumeClothingSimulation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void USkeletalMeshComponent::ResumeClothingSimulation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResumeClothingSimulation");

        USkeletalMeshComponent_ResumeClothingSimulation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.ResetClothTeleportMode
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void USkeletalMeshComponent::ResetClothTeleportMode()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResetClothTeleportMode");

        USkeletalMeshComponent_ResetClothTeleportMode_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void USkeletalMeshComponent::ResetAllBodiesSimulatePhysics()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics");

        USkeletalMeshComponent_ResetAllBodiesSimulatePhysics_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.PlayAnimation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UAnimationAsset*         NewAnimToPlay                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bLooping                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.PlayAnimation");

        USkeletalMeshComponent_PlayAnimation_Params params;
        params.NewAnimToPlay = NewAnimToPlay;
        params.bLooping = bLooping;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.Play
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bLooping                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::Play(bool bLooping)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.Play");

        USkeletalMeshComponent_Play_Params params;
        params.bLooping = bLooping;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.OverrideAnimationData
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UAnimationAsset*         InAnimToPlay                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bIsLooping                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bIsPlaying                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Position                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          PlayRate                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.OverrideAnimationData");

        USkeletalMeshComponent_OverrideAnimationData_Params params;
        params.InAnimToPlay = InAnimToPlay;
        params.bIsLooping = bIsLooping;
        params.bIsPlaying = bIsPlaying;
        params.Position = Position;
        params.PlayRate = PlayRate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 WorldPosition                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 ClosestWorldPosition           (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 Normal                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Distance                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool USkeletalMeshComponent::K2_GetClosestPointOnPhysicsAsset(const struct FVector& WorldPosition, struct FVector* ClosestWorldPosition, struct FVector* Normal, struct FName* BoneName, float* Distance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset");

        USkeletalMeshComponent_K2_GetClosestPointOnPhysicsAsset_Params params;
        params.WorldPosition = WorldPosition;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (ClosestWorldPosition != nullptr)
            *ClosestWorldPosition = params.ClosestWorldPosition;
        if (Normal != nullptr)
            *Normal = params.Normal;
        if (BoneName != nullptr)
            *BoneName = params.BoneName;
        if (Distance != nullptr)
            *Distance = params.Distance;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMeshComponent.IsPlaying
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool USkeletalMeshComponent::IsPlaying()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsPlaying");

        USkeletalMeshComponent_IsPlaying_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMeshComponent.IsClothingSimulationSuspended
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool USkeletalMeshComponent::IsClothingSimulationSuspended()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsClothingSimulationSuspended");

        USkeletalMeshComponent_IsClothingSimulationSuspended_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMeshComponent.IsBodyGravityEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool USkeletalMeshComponent::IsBodyGravityEnabled(const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsBodyGravityEnabled");

        USkeletalMeshComponent_IsBodyGravityEnabled_Params params;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USkeletalMeshComponent::GetSkeletalCenterOfMass()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass");

        USkeletalMeshComponent_GetSkeletalCenterOfMass_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMeshComponent.GetPostProcessInstance
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UAnimInstance*           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UAnimInstance* USkeletalMeshComponent::GetPostProcessInstance()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetPostProcessInstance");

        USkeletalMeshComponent_GetPostProcessInstance_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMeshComponent.GetPosition
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USkeletalMeshComponent::GetPosition()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetPosition");

        USkeletalMeshComponent_GetPosition_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMeshComponent.GetPlayRate
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USkeletalMeshComponent::GetPlayRate()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetPlayRate");

        USkeletalMeshComponent_GetPlayRate_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMeshComponent.GetMorphTarget
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   MorphTargetName                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USkeletalMeshComponent::GetMorphTarget(const struct FName& MorphTargetName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetMorphTarget");

        USkeletalMeshComponent_GetMorphTarget_Params params;
        params.MorphTargetName = MorphTargetName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMeshComponent.GetDisableAnimCurves
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool USkeletalMeshComponent::GetDisableAnimCurves()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetDisableAnimCurves");

        USkeletalMeshComponent_GetDisableAnimCurves_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMeshComponent.GetCurrentJointAngles
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   InBoneName                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Swing1Angle                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          TwistAngle                     (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Swing2Angle                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::GetCurrentJointAngles(const struct FName& InBoneName, float* Swing1Angle, float* TwistAngle, float* Swing2Angle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetCurrentJointAngles");

        USkeletalMeshComponent_GetCurrentJointAngles_Params params;
        params.InBoneName = InBoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Swing1Angle != nullptr)
            *Swing1Angle = params.Swing1Angle;
        if (TwistAngle != nullptr)
            *TwistAngle = params.TwistAngle;
        if (Swing2Angle != nullptr)
            *Swing2Angle = params.Swing2Angle;
    }


    // Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USkeletalMeshComponent::GetClothMaxDistanceScale()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale");

        USkeletalMeshComponent_GetClothMaxDistanceScale_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMeshComponent.GetBoneMass
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bScaleMass                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USkeletalMeshComponent::GetBoneMass(const struct FName& BoneName, bool bScaleMass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneMass");

        USkeletalMeshComponent_GetBoneMass_Params params;
        params.BoneName = BoneName;
        params.bScaleMass = bScaleMass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMeshComponent.GetAnimInstance
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UAnimInstance*           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UAnimInstance* USkeletalMeshComponent::GetAnimInstance()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAnimInstance");

        USkeletalMeshComponent_GetAnimInstance_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMeshComponent.GetAnimationMode
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TEnumAsByte<EAnimationMode>    ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    TEnumAsByte<EAnimationMode> USkeletalMeshComponent::GetAnimationMode()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAnimationMode");

        USkeletalMeshComponent_GetAnimationMode_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void USkeletalMeshComponent::ForceClothNextUpdateTeleportAndReset()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset");

        USkeletalMeshComponent_ForceClothNextUpdateTeleportAndReset_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void USkeletalMeshComponent::ForceClothNextUpdateTeleport()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport");

        USkeletalMeshComponent_ForceClothNextUpdateTeleport_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.FindConstraintBoneName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            ConstraintIndex                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FName USkeletalMeshComponent::FindConstraintBoneName(int ConstraintIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindConstraintBoneName");

        USkeletalMeshComponent_FindConstraintBoneName_Params params;
        params.ConstraintIndex = ConstraintIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMeshComponent.ClearMorphTargets
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void USkeletalMeshComponent::ClearMorphTargets()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ClearMorphTargets");

        USkeletalMeshComponent_ClearMorphTargets_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.BreakConstraint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Impulse                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 HitLocation                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FName                   InBoneName                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, const struct FName& InBoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.BreakConstraint");

        USkeletalMeshComponent_BreakConstraint_Params params;
        params.Impulse = Impulse;
        params.HitLocation = HitLocation;
        params.InBoneName = InBoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void USkeletalMeshComponent::BindClothToMasterPoseComponent()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent");

        USkeletalMeshComponent_BindClothToMasterPoseComponent_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Impulse                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bVelChange                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bIncludeSelf                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::AddImpulseToAllBodiesBelow(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange, bool bIncludeSelf)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow");

        USkeletalMeshComponent_AddImpulseToAllBodiesBelow_Params params;
        params.Impulse = Impulse;
        params.BoneName = BoneName;
        params.bVelChange = bVelChange;
        params.bIncludeSelf = bIncludeSelf;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Force                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAccelChange                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bIncludeSelf                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::AddForceToAllBodiesBelow(const struct FVector& Force, const struct FName& BoneName, bool bAccelChange, bool bIncludeSelf)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow");

        USkeletalMeshComponent_AddForceToAllBodiesBelow_Params params;
        params.Force = Force;
        params.BoneName = BoneName;
        params.bAccelChange = bAccelChange;
        params.bIncludeSelf = bIncludeSelf;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   InBoneName                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          AddPhysicsBlendWeight          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bSkipCustomPhysicsType         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkeletalMeshComponent::AccumulateAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight");

        USkeletalMeshComponent_AccumulateAllBodiesBelowPhysicsBlendWeight_Params params;
        params.InBoneName = InBoneName;
        params.AddPhysicsBlendWeight = AddPhysicsBlendWeight;
        params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DefaultPawn.TurnAtRate
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Rate                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ADefaultPawn::TurnAtRate(float Rate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.TurnAtRate");

        ADefaultPawn_TurnAtRate_Params params;
        params.Rate = Rate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DefaultPawn.MoveUp_World
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Val                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ADefaultPawn::MoveUp_World(float Val)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.MoveUp_World");

        ADefaultPawn_MoveUp_World_Params params;
        params.Val = Val;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DefaultPawn.MoveRight
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Val                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ADefaultPawn::MoveRight(float Val)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.MoveRight");

        ADefaultPawn_MoveRight_Params params;
        params.Val = Val;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DefaultPawn.MoveForward
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Val                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ADefaultPawn::MoveForward(float Val)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.MoveForward");

        ADefaultPawn_MoveForward_Params params;
        params.Val = Val;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DefaultPawn.LookUpAtRate
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Rate                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ADefaultPawn::LookUpAtRate(float Rate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.LookUpAtRate");

        ADefaultPawn_LookUpAtRate_Params params;
        params.Rate = Rate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.ShowHUD
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void AHUD::ShowHUD()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowHUD");

        AHUD_ShowHUD_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.ShowDebugToggleSubCategory
    // (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FName                   Category                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AHUD::ShowDebugToggleSubCategory(const struct FName& Category)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebugToggleSubCategory");

        AHUD_ShowDebugToggleSubCategory_Params params;
        params.Category = Category;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.ShowDebugForReticleTargetToggle
    // (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // class UClass*                  DesiredClass                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AHUD::ShowDebugForReticleTargetToggle(class UClass* DesiredClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebugForReticleTargetToggle");

        AHUD_ShowDebugForReticleTargetToggle_Params params;
        params.DesiredClass = DesiredClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.ShowDebug
    // (FUNC_Exec, FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FName                   DebugType                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AHUD::ShowDebug(const struct FName& DebugType)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebug");

        AHUD_ShowDebug_Params params;
        params.DebugType = DebugType;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.RemoveDebugText
    // (FUNC_Final, FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
    // Parameters:
    // class AActor*                  SrcActor                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bLeaveDurationText             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AHUD::RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.RemoveDebugText");

        AHUD_RemoveDebugText_Params params;
        params.SrcActor = SrcActor;
        params.bLeaveDurationText = bLeaveDurationText;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.RemoveAllDebugStrings
    // (FUNC_Final, FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)

    void AHUD::RemoveAllDebugStrings()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.RemoveAllDebugStrings");

        AHUD_RemoveAllDebugStrings_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.ReceiveHitBoxRelease
    // (FUNC_BlueprintCosmetic, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // struct FName                   BoxName                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AHUD::ReceiveHitBoxRelease(const struct FName& BoxName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveHitBoxRelease");

        AHUD_ReceiveHitBoxRelease_Params params;
        params.BoxName = BoxName;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.ReceiveHitBoxEndCursorOver
    // (FUNC_BlueprintCosmetic, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // struct FName                   BoxName                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AHUD::ReceiveHitBoxEndCursorOver(const struct FName& BoxName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveHitBoxEndCursorOver");

        AHUD_ReceiveHitBoxEndCursorOver_Params params;
        params.BoxName = BoxName;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.ReceiveHitBoxClick
    // (FUNC_BlueprintCosmetic, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // struct FName                   BoxName                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AHUD::ReceiveHitBoxClick(const struct FName& BoxName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveHitBoxClick");

        AHUD_ReceiveHitBoxClick_Params params;
        params.BoxName = BoxName;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.ReceiveHitBoxBeginCursorOver
    // (FUNC_BlueprintCosmetic, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // struct FName                   BoxName                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AHUD::ReceiveHitBoxBeginCursorOver(const struct FName& BoxName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveHitBoxBeginCursorOver");

        AHUD_ReceiveHitBoxBeginCursorOver_Params params;
        params.BoxName = BoxName;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.ReceiveDrawHUD
    // (FUNC_BlueprintCosmetic, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // int                            SizeX                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            SizeY                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AHUD::ReceiveDrawHUD(int SizeX, int SizeY)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveDrawHUD");

        AHUD_ReceiveDrawHUD_Params params;
        params.SizeX = SizeX;
        params.SizeY = SizeY;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.Project
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector AHUD::Project(const struct FVector& Location)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Project");

        AHUD_Project_Params params;
        params.Location = Location;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.HUD.GetTextSize
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FString                 Text                           (CPF_Parm, CPF_ZeroConstructor)
    // float                          OutWidth                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OutHeight                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UFont*                   Font                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Scale                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AHUD::GetTextSize(const struct FString& Text, class UFont* Font, float Scale, float* OutWidth, float* OutHeight)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetTextSize");

        AHUD_GetTextSize_Params params;
        params.Text = Text;
        params.Font = Font;
        params.Scale = Scale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutWidth != nullptr)
            *OutWidth = params.OutWidth;
        if (OutHeight != nullptr)
            *OutHeight = params.OutHeight;
    }


    // Function Engine.HUD.GetOwningPlayerController
    // (FUNC_Final, FUNC_Native, FUNC_Protected, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class APlayerController*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class APlayerController* AHUD::GetOwningPlayerController()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetOwningPlayerController");

        AHUD_GetOwningPlayerController_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.HUD.GetOwningPawn
    // (FUNC_Final, FUNC_Native, FUNC_Protected, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class APawn*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class APawn* AHUD::GetOwningPawn()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetOwningPawn");

        AHUD_GetOwningPawn_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.HUD.GetActorsInSelectionRectangle
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UClass*                  ClassFilter                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               FirstPoint                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector2D               SecondPoint                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TArray<class AActor*>          OutActors                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           bIncludeNonCollidingComponents (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bActorMustBeFullyEnclosed      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AHUD::GetActorsInSelectionRectangle(class UClass* ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed, TArray<class AActor*>* OutActors)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetActorsInSelectionRectangle");

        AHUD_GetActorsInSelectionRectangle_Params params;
        params.ClassFilter = ClassFilter;
        params.FirstPoint = FirstPoint;
        params.SecondPoint = SecondPoint;
        params.bIncludeNonCollidingComponents = bIncludeNonCollidingComponents;
        params.bActorMustBeFullyEnclosed = bActorMustBeFullyEnclosed;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutActors != nullptr)
            *OutActors = params.OutActors;
    }


    // Function Engine.HUD.DrawTextureSimple
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UTexture*                Texture                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenX                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenY                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Scale                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bScalePosition                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AHUD::DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawTextureSimple");

        AHUD_DrawTextureSimple_Params params;
        params.Texture = Texture;
        params.ScreenX = ScreenX;
        params.ScreenY = ScreenY;
        params.Scale = Scale;
        params.bScalePosition = bScalePosition;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.DrawTexture
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UTexture*                Texture                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenX                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenY                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenW                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenH                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          TextureU                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          TextureV                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          TextureUWidth                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          TextureVHeight                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TintColor                      (CPF_Parm, CPF_IsPlainOldData)
    // TEnumAsByte<EBlendMode>        BlendMode                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Scale                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bScalePosition                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Rotation                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               RotPivot                       (CPF_Parm, CPF_IsPlainOldData)

    void AHUD::DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, TEnumAsByte<EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawTexture");

        AHUD_DrawTexture_Params params;
        params.Texture = Texture;
        params.ScreenX = ScreenX;
        params.ScreenY = ScreenY;
        params.ScreenW = ScreenW;
        params.ScreenH = ScreenH;
        params.TextureU = TextureU;
        params.TextureV = TextureV;
        params.TextureUWidth = TextureUWidth;
        params.TextureVHeight = TextureVHeight;
        params.TintColor = TintColor;
        params.BlendMode = BlendMode;
        params.Scale = Scale;
        params.bScalePosition = bScalePosition;
        params.Rotation = Rotation;
        params.RotPivot = RotPivot;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.DrawText
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FString                 Text                           (CPF_Parm, CPF_ZeroConstructor)
    // struct FLinearColor            TextColor                      (CPF_Parm, CPF_IsPlainOldData)
    // float                          ScreenX                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenY                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UFont*                   Font                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Scale                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bScalePosition                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AHUD::DrawText(const struct FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawText");

        AHUD_DrawText_Params params;
        params.Text = Text;
        params.TextColor = TextColor;
        params.ScreenX = ScreenX;
        params.ScreenY = ScreenY;
        params.Font = Font;
        params.Scale = Scale;
        params.bScalePosition = bScalePosition;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.DrawRect
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FLinearColor            RectColor                      (CPF_Parm, CPF_IsPlainOldData)
    // float                          ScreenX                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenY                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenW                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenH                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AHUD::DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawRect");

        AHUD_DrawRect_Params params;
        params.RectColor = RectColor;
        params.ScreenX = ScreenX;
        params.ScreenY = ScreenY;
        params.ScreenW = ScreenW;
        params.ScreenH = ScreenH;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.DrawMaterialTriangle
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterialInterface*      Material                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               V0_Pos                         (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               V1_Pos                         (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               V2_Pos                         (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               V0_UV                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               V1_UV                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               V2_UV                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            V0_Color                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            V1_Color                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            V2_Color                       (CPF_Parm, CPF_IsPlainOldData)

    void AHUD::DrawMaterialTriangle(class UMaterialInterface* Material, const struct FVector2D& V0_Pos, const struct FVector2D& V1_Pos, const struct FVector2D& V2_Pos, const struct FVector2D& V0_UV, const struct FVector2D& V1_UV, const struct FVector2D& V2_UV, const struct FLinearColor& V0_Color, const struct FLinearColor& V1_Color, const struct FLinearColor& V2_Color)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMaterialTriangle");

        AHUD_DrawMaterialTriangle_Params params;
        params.Material = Material;
        params.V0_Pos = V0_Pos;
        params.V1_Pos = V1_Pos;
        params.V2_Pos = V2_Pos;
        params.V0_UV = V0_UV;
        params.V1_UV = V1_UV;
        params.V2_UV = V2_UV;
        params.V0_Color = V0_Color;
        params.V1_Color = V1_Color;
        params.V2_Color = V2_Color;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.DrawMaterialSimple
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterialInterface*      Material                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenX                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenY                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenW                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenH                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Scale                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bScalePosition                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AHUD::DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMaterialSimple");

        AHUD_DrawMaterialSimple_Params params;
        params.Material = Material;
        params.ScreenX = ScreenX;
        params.ScreenY = ScreenY;
        params.ScreenW = ScreenW;
        params.ScreenH = ScreenH;
        params.Scale = Scale;
        params.bScalePosition = bScalePosition;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.DrawMaterial
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterialInterface*      Material                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenX                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenY                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenW                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenH                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MaterialU                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MaterialV                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MaterialUWidth                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MaterialVHeight                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Scale                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bScalePosition                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Rotation                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               RotPivot                       (CPF_Parm, CPF_IsPlainOldData)

    void AHUD::DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMaterial");

        AHUD_DrawMaterial_Params params;
        params.Material = Material;
        params.ScreenX = ScreenX;
        params.ScreenY = ScreenY;
        params.ScreenW = ScreenW;
        params.ScreenH = ScreenH;
        params.MaterialU = MaterialU;
        params.MaterialV = MaterialV;
        params.MaterialUWidth = MaterialUWidth;
        params.MaterialVHeight = MaterialVHeight;
        params.Scale = Scale;
        params.bScalePosition = bScalePosition;
        params.Rotation = Rotation;
        params.RotPivot = RotPivot;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.DrawLine
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // float                          StartScreenX                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StartScreenY                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          EndScreenX                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          EndScreenY                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            LineColor                      (CPF_Parm, CPF_IsPlainOldData)
    // float                          LineThickness                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AHUD::DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor, float LineThickness)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawLine");

        AHUD_DrawLine_Params params;
        params.StartScreenX = StartScreenX;
        params.StartScreenY = StartScreenY;
        params.EndScreenX = EndScreenX;
        params.EndScreenY = EndScreenY;
        params.LineColor = LineColor;
        params.LineThickness = LineThickness;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.Deproject
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ScreenX                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ScreenY                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 WorldPosition                  (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 WorldDirection                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void AHUD::Deproject(float ScreenX, float ScreenY, struct FVector* WorldPosition, struct FVector* WorldDirection)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Deproject");

        AHUD_Deproject_Params params;
        params.ScreenX = ScreenX;
        params.ScreenY = ScreenY;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (WorldPosition != nullptr)
            *WorldPosition = params.WorldPosition;
        if (WorldDirection != nullptr)
            *WorldDirection = params.WorldDirection;
    }


    // Function Engine.HUD.AddHitBox
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector2D               Position                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               Size                           (CPF_Parm, CPF_IsPlainOldData)
    // struct FName                   InName                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bConsumesInput                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Priority                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AHUD::AddHitBox(const struct FVector2D& Position, const struct FVector2D& Size, const struct FName& InName, bool bConsumesInput, int Priority)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddHitBox");

        AHUD_AddHitBox_Params params;
        params.Position = Position;
        params.Size = Size;
        params.InName = InName;
        params.bConsumesInput = bConsumesInput;
        params.Priority = Priority;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HUD.AddDebugText
    // (FUNC_Final, FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient)
    // Parameters:
    // struct FString                 DebugText                      (CPF_Parm, CPF_ZeroConstructor)
    // class AActor*                  SrcActor                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Offset                         (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 DesiredOffset                  (CPF_Parm, CPF_IsPlainOldData)
    // struct FColor                  TextColor                      (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSkipOverwriteCheck            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAbsoluteLocation              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bKeepAttachedToActor           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UFont*                   InFont                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          FontScale                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bDrawShadow                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AHUD::AddDebugText(const struct FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddDebugText");

        AHUD_AddDebugText_Params params;
        params.DebugText = DebugText;
        params.SrcActor = SrcActor;
        params.Duration = Duration;
        params.Offset = Offset;
        params.DesiredOffset = DesiredOffset;
        params.TextColor = TextColor;
        params.bSkipOverwriteCheck = bSkipOverwriteCheck;
        params.bAbsoluteLocation = bAbsoluteLocation;
        params.bKeepAttachedToActor = bKeepAttachedToActor;
        params.InFont = InFont;
        params.FontScale = FontScale;
        params.bDrawShadow = bDrawShadow;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // int                            InstanceIndex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              NewInstanceTransform           (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bWorldSpace                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bMarkRenderStateDirty          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bTeleport                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UInstancedStaticMeshComponent::UpdateInstanceTransform(int InstanceIndex, const struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform");

        UInstancedStaticMeshComponent_UpdateInstanceTransform_Params params;
        params.InstanceIndex = InstanceIndex;
        params.NewInstanceTransform = NewInstanceTransform;
        params.bWorldSpace = bWorldSpace;
        params.bMarkRenderStateDirty = bMarkRenderStateDirty;
        params.bTeleport = bTeleport;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.InstancedStaticMeshComponent.SetCullDistances
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            StartCullDistance              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            EndCullDistance                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UInstancedStaticMeshComponent::SetCullDistances(int StartCullDistance, int EndCullDistance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.SetCullDistances");

        UInstancedStaticMeshComponent_SetCullDistances_Params params;
        params.StartCullDistance = StartCullDistance;
        params.EndCullDistance = EndCullDistance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.InstancedStaticMeshComponent.RemoveInstance
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            InstanceIndex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UInstancedStaticMeshComponent::RemoveInstance(int InstanceIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.RemoveInstance");

        UInstancedStaticMeshComponent_RemoveInstance_Params params;
        params.InstanceIndex = InstanceIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.InstancedStaticMeshComponent.GetInstanceTransform
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            InstanceIndex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              OutInstanceTransform           (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bWorldSpace                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UInstancedStaticMeshComponent::GetInstanceTransform(int InstanceIndex, bool bWorldSpace, struct FTransform* OutInstanceTransform)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.GetInstanceTransform");

        UInstancedStaticMeshComponent_GetInstanceTransform_Params params;
        params.InstanceIndex = InstanceIndex;
        params.bWorldSpace = bWorldSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutInstanceTransform != nullptr)
            *OutInstanceTransform = params.OutInstanceTransform;

        return params.ReturnValue;
    }


    // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 Center                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bSphereInWorldSpace            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<int>                    ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    TArray<int> UInstancedStaticMeshComponent::GetInstancesOverlappingSphere(const struct FVector& Center, float Radius, bool bSphereInWorldSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere");

        UInstancedStaticMeshComponent_GetInstancesOverlappingSphere_Params params;
        params.Center = Center;
        params.Radius = Radius;
        params.bSphereInWorldSpace = bSphereInWorldSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FBox                    Box                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bBoxInWorldSpace               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<int>                    ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    TArray<int> UInstancedStaticMeshComponent::GetInstancesOverlappingBox(const struct FBox& Box, bool bBoxInWorldSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox");

        UInstancedStaticMeshComponent_GetInstancesOverlappingBox_Params params;
        params.Box = Box;
        params.bBoxInWorldSpace = bBoxInWorldSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.InstancedStaticMeshComponent.GetInstanceCount
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UInstancedStaticMeshComponent::GetInstanceCount()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.GetInstanceCount");

        UInstancedStaticMeshComponent_GetInstanceCount_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.InstancedStaticMeshComponent.ClearInstances
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UInstancedStaticMeshComponent::ClearInstances()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.ClearInstances");

        UInstancedStaticMeshComponent_ClearInstances_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FTransform              WorldTransform                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UInstancedStaticMeshComponent::AddInstanceWorldSpace(const struct FTransform& WorldTransform)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace");

        UInstancedStaticMeshComponent_AddInstanceWorldSpace_Params params;
        params.WorldTransform = WorldTransform;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.InstancedStaticMeshComponent.AddInstance
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FTransform              InstanceTransform              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UInstancedStaticMeshComponent::AddInstance(const struct FTransform& InstanceTransform)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.AddInstance");

        UInstancedStaticMeshComponent_AddInstance_Params params;
        params.InstanceTransform = InstanceTransform;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<int>                    InstancesToRemove              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UHierarchicalInstancedStaticMeshComponent::RemoveInstances(TArray<int> InstancesToRemove)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances");

        UHierarchicalInstancedStaticMeshComponent_RemoveInstances_Params params;
        params.InstancesToRemove = InstancesToRemove;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MaterialInterface.GetPhysicalMaterial
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UPhysicalMaterial*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UPhysicalMaterial* UMaterialInterface::GetPhysicalMaterial()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetPhysicalMaterial");

        UMaterialInterface_GetPhysicalMaterial_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MaterialInterface.GetBaseMaterial
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterial*               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UMaterial* UMaterialInterface::GetBaseMaterial()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetBaseMaterial");

        UMaterialInterface_GetBaseMaterial_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.OnlineBlueprintCallProxyBase.Activate
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UOnlineBlueprintCallProxyBase::Activate()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineBlueprintCallProxyBase.Activate");

        UOnlineBlueprintCallProxyBase_Activate_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ChildActorComponent.SetChildActorClass
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UClass*                  InClass                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UChildActorComponent::SetChildActorClass(class UClass* InClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ChildActorComponent.SetChildActorClass");

        UChildActorComponent_SetChildActorClass_Params params;
        params.InClass = InClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AmbientSound.Stop
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AAmbientSound::Stop()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.Stop");

        AAmbientSound_Stop_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AmbientSound.Play
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          StartTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AAmbientSound::Play(float StartTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.Play");

        AAmbientSound_Play_Params params;
        params.StartTime = StartTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AmbientSound.FadeOut
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          FadeOutDuration                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          FadeVolumeLevel                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AAmbientSound::FadeOut(float FadeOutDuration, float FadeVolumeLevel)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.FadeOut");

        AAmbientSound_FadeOut_Params params;
        params.FadeOutDuration = FadeOutDuration;
        params.FadeVolumeLevel = FadeVolumeLevel;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AmbientSound.FadeIn
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          FadeInDuration                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          FadeVolumeLevel                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AAmbientSound::FadeIn(float FadeInDuration, float FadeVolumeLevel)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.FadeIn");

        AAmbientSound_FadeIn_Params params;
        params.FadeInDuration = FadeInDuration;
        params.FadeVolumeLevel = FadeVolumeLevel;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AmbientSound.AdjustVolume
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          AdjustVolumeDuration           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          AdjustVolumeLevel              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AAmbientSound::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.AdjustVolume");

        AAmbientSound_AdjustVolume_Params params;
        params.AdjustVolumeDuration = AdjustVolumeDuration;
        params.AdjustVolumeLevel = AdjustVolumeLevel;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioVolume.SetReverbSettings
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FReverbSettings         NewReverbSettings              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void AAudioVolume::SetReverbSettings(const struct FReverbSettings& NewReverbSettings)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioVolume.SetReverbSettings");

        AAudioVolume_SetReverbSettings_Params params;
        params.NewReverbSettings = NewReverbSettings;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioVolume.SetPriority
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewPriority                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AAudioVolume::SetPriority(float NewPriority)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioVolume.SetPriority");

        AAudioVolume_SetPriority_Params params;
        params.NewPriority = NewPriority;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioVolume.SetInteriorSettings
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FInteriorSettings       NewInteriorSettings            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void AAudioVolume::SetInteriorSettings(const struct FInteriorSettings& NewInteriorSettings)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioVolume.SetInteriorSettings");

        AAudioVolume_SetInteriorSettings_Params params;
        params.NewInteriorSettings = NewInteriorSettings;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioVolume.SetEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewEnabled                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AAudioVolume::SetEnabled(bool bNewEnabled)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioVolume.SetEnabled");

        AAudioVolume_SetEnabled_Params params;
        params.bNewEnabled = bNewEnabled;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioVolume.OnRep_bEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Private)

    void AAudioVolume::OnRep_bEnabled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioVolume.OnRep_bEnabled");

        AAudioVolume_OnRep_bEnabled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.NavModifierVolume.SetAreaClass
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UClass*                  NewAreaClass                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ANavModifierVolume::SetAreaClass(class UClass* NewAreaClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavModifierVolume.SetAreaClass");

        ANavModifierVolume_SetAreaClass_Params params;
        params.NewAreaClass = NewAreaClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PostProcessVolume.AddOrUpdateBlendable
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TScriptInterface<class UBlendableInterface> InBlendableObject              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InWeight                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APostProcessVolume::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PostProcessVolume.AddOrUpdateBlendable");

        APostProcessVolume_AddOrUpdateBlendable_Params params;
        params.InBlendableObject = InBlendableObject;
        params.InWeight = InWeight;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraShake.ReceiveStopShake
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // bool                           bImmediately                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCameraShake::ReceiveStopShake(bool bImmediately)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.ReceiveStopShake");

        UCameraShake_ReceiveStopShake_Params params;
        params.bImmediately = bImmediately;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraShake.ReceivePlayShake
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // float                          Scale                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCameraShake::ReceivePlayShake(float Scale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.ReceivePlayShake");

        UCameraShake_ReceivePlayShake_Params params;
        params.Scale = Scale;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraShake.ReceiveIsFinished
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UCameraShake::ReceiveIsFinished()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.ReceiveIsFinished");

        UCameraShake_ReceiveIsFinished_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CameraShake.BlueprintUpdateCameraShake
    // (FUNC_Event, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintEvent)
    // Parameters:
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Alpha                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FMinimalViewInfo        POV                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FMinimalViewInfo        ModifiedPOV                    (CPF_Parm, CPF_OutParm)

    void UCameraShake::BlueprintUpdateCameraShake(float DeltaTime, float Alpha, const struct FMinimalViewInfo& POV, struct FMinimalViewInfo* ModifiedPOV)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.BlueprintUpdateCameraShake");

        UCameraShake_BlueprintUpdateCameraShake_Params params;
        params.DeltaTime = DeltaTime;
        params.Alpha = Alpha;
        params.POV = POV;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (ModifiedPOV != nullptr)
            *ModifiedPOV = params.ModifiedPOV;
    }


    // Function Engine.InputComponent.WasControllerKeyJustReleased
    // (FUNC_Final, FUNC_Native, FUNC_Private, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FKey                    Key                            (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UInputComponent::WasControllerKeyJustReleased(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.WasControllerKeyJustReleased");

        UInputComponent_WasControllerKeyJustReleased_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.InputComponent.WasControllerKeyJustPressed
    // (FUNC_Final, FUNC_Native, FUNC_Private, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FKey                    Key                            (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UInputComponent::WasControllerKeyJustPressed(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.WasControllerKeyJustPressed");

        UInputComponent_WasControllerKeyJustPressed_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.InputComponent.IsControllerKeyDown
    // (FUNC_Final, FUNC_Native, FUNC_Private, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FKey                    Key                            (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UInputComponent::IsControllerKeyDown(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.IsControllerKeyDown");

        UInputComponent_IsControllerKeyDown_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.InputComponent.GetTouchState
    // (FUNC_Final, FUNC_Native, FUNC_Private, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            FingerIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          LocationX                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          LocationY                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bIsCurrentlyPressed            (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UInputComponent::GetTouchState(int FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetTouchState");

        UInputComponent_GetTouchState_Params params;
        params.FingerIndex = FingerIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (LocationX != nullptr)
            *LocationX = params.LocationX;
        if (LocationY != nullptr)
            *LocationY = params.LocationY;
        if (bIsCurrentlyPressed != nullptr)
            *bIsCurrentlyPressed = params.bIsCurrentlyPressed;
    }


    // Function Engine.InputComponent.GetControllerVectorKeyState
    // (FUNC_Final, FUNC_Native, FUNC_Private, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FKey                    Key                            (CPF_Parm)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UInputComponent::GetControllerVectorKeyState(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerVectorKeyState");

        UInputComponent_GetControllerVectorKeyState_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.InputComponent.GetControllerMouseDelta
    // (FUNC_Final, FUNC_Native, FUNC_Private, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          DeltaX                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          DeltaY                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UInputComponent::GetControllerMouseDelta(float* DeltaX, float* DeltaY)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerMouseDelta");

        UInputComponent_GetControllerMouseDelta_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (DeltaX != nullptr)
            *DeltaX = params.DeltaX;
        if (DeltaY != nullptr)
            *DeltaY = params.DeltaY;
    }


    // Function Engine.InputComponent.GetControllerKeyTimeDown
    // (FUNC_Final, FUNC_Native, FUNC_Private, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FKey                    Key                            (CPF_Parm)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UInputComponent::GetControllerKeyTimeDown(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerKeyTimeDown");

        UInputComponent_GetControllerKeyTimeDown_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.InputComponent.GetControllerAnalogStickState
    // (FUNC_Final, FUNC_Native, FUNC_Private, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TEnumAsByte<EControllerAnalogStick> WhichStick                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StickX                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StickY                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UInputComponent::GetControllerAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerAnalogStickState");

        UInputComponent_GetControllerAnalogStickState_Params params;
        params.WhichStick = WhichStick;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (StickX != nullptr)
            *StickX = params.StickX;
        if (StickY != nullptr)
            *StickY = params.StickY;
    }


    // Function Engine.InputComponent.GetControllerAnalogKeyState
    // (FUNC_Final, FUNC_Native, FUNC_Private, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FKey                    Key                            (CPF_Parm)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UInputComponent::GetControllerAnalogKeyState(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerAnalogKeyState");

        UInputComponent_GetControllerAnalogKeyState_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CurveBase.GetValueRange
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          MinValue                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MaxValue                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCurveBase::GetValueRange(float* MinValue, float* MaxValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveBase.GetValueRange");

        UCurveBase_GetValueRange_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (MinValue != nullptr)
            *MinValue = params.MinValue;
        if (MaxValue != nullptr)
            *MaxValue = params.MaxValue;
    }


    // Function Engine.CurveBase.GetTimeRange
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          MinTime                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MaxTime                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCurveBase::GetTimeRange(float* MinTime, float* MaxTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveBase.GetTimeRange");

        UCurveBase_GetTimeRange_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (MinTime != nullptr)
            *MinTime = params.MinTime;
        if (MaxTime != nullptr)
            *MaxTime = params.MaxTime;
    }


    // Function Engine.CurveFloat.GetFloatValue
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          InTime                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCurveFloat::GetFloatValue(float InTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveFloat.GetFloatValue");

        UCurveFloat_GetFloatValue_Params params;
        params.InTime = InTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.DebugCameraController.ToggleDisplay
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void ADebugCameraController::ToggleDisplay()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.ToggleDisplay");

        ADebugCameraController_ToggleDisplay_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DebugCameraController.ShowDebugSelectedInfo
    // (FUNC_Exec, FUNC_Native, FUNC_Public)

    void ADebugCameraController::ShowDebugSelectedInfo()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.ShowDebugSelectedInfo");

        ADebugCameraController_ShowDebugSelectedInfo_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DebugCameraController.SetPawnMovementSpeedScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewSpeedScale                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ADebugCameraController::SetPawnMovementSpeedScale(float NewSpeedScale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.SetPawnMovementSpeedScale");

        ADebugCameraController_SetPawnMovementSpeedScale_Params params;
        params.NewSpeedScale = NewSpeedScale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DebugCameraController.ReceiveOnDeactivate
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class APlayerController*       RestoredPC                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ADebugCameraController::ReceiveOnDeactivate(class APlayerController* RestoredPC)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.ReceiveOnDeactivate");

        ADebugCameraController_ReceiveOnDeactivate_Params params;
        params.RestoredPC = RestoredPC;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DebugCameraController.ReceiveOnActorSelected
    // (FUNC_Event, FUNC_Protected, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintEvent)
    // Parameters:
    // class AActor*                  NewSelectedActor               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 SelectHitLocation              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 SelectHitNormal                (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FHitResult              Hit                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void ADebugCameraController::ReceiveOnActorSelected(class AActor* NewSelectedActor, const struct FVector& SelectHitLocation, const struct FVector& SelectHitNormal, const struct FHitResult& Hit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.ReceiveOnActorSelected");

        ADebugCameraController_ReceiveOnActorSelected_Params params;
        params.NewSelectedActor = NewSelectedActor;
        params.SelectHitLocation = SelectHitLocation;
        params.SelectHitNormal = SelectHitNormal;
        params.Hit = Hit;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DebugCameraController.ReceiveOnActivate
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class APlayerController*       OriginalPC                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ADebugCameraController::ReceiveOnActivate(class APlayerController* OriginalPC)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.ReceiveOnActivate");

        ADebugCameraController_ReceiveOnActivate_Params params;
        params.OriginalPC = OriginalPC;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DebugCameraController.GetSelectedActor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AActor* ADebugCameraController::GetSelectedActor()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.GetSelectedActor");

        ADebugCameraController_GetSelectedActor_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.DecalActor.SetDecalMaterial
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterialInterface*      NewDecalMaterial               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ADecalActor::SetDecalMaterial(class UMaterialInterface* NewDecalMaterial)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalActor.SetDecalMaterial");

        ADecalActor_SetDecalMaterial_Params params;
        params.NewDecalMaterial = NewDecalMaterial;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DecalActor.GetDecalMaterial
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UMaterialInterface*      ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UMaterialInterface* ADecalActor::GetDecalMaterial()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalActor.GetDecalMaterial");

        ADecalActor_GetDecalMaterial_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.DecalActor.CreateDynamicMaterialInstance
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterialInstanceDynamic* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UMaterialInstanceDynamic* ADecalActor::CreateDynamicMaterialInstance()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalActor.CreateDynamicMaterialInstance");

        ADecalActor_CreateDynamicMaterialInstance_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.ExponentialHeightFog.OnRep_bEnabled
    // (FUNC_Native, FUNC_Public)

    void AExponentialHeightFog::OnRep_bEnabled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFog.OnRep_bEnabled");

        AExponentialHeightFog_OnRep_bEnabled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkyLight.OnRep_bEnabled
    // (FUNC_Native, FUNC_Public)

    void ASkyLight::OnRep_bEnabled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLight.OnRep_bEnabled");

        ASkyLight_OnRep_bEnabled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Light.ToggleEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void ALight::ToggleEnabled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.ToggleEnabled");

        ALight_ToggleEnabled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Light.SetLightFunctionScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewLightFunctionScale          (CPF_Parm, CPF_IsPlainOldData)

    void ALight::SetLightFunctionScale(const struct FVector& NewLightFunctionScale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetLightFunctionScale");

        ALight_SetLightFunctionScale_Params params;
        params.NewLightFunctionScale = NewLightFunctionScale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Light.SetLightFunctionMaterial
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterialInterface*      NewLightFunctionMaterial       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ALight::SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetLightFunctionMaterial");

        ALight_SetLightFunctionMaterial_Params params;
        params.NewLightFunctionMaterial = NewLightFunctionMaterial;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Light.SetLightFunctionFadeDistance
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewLightFunctionFadeDistance   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ALight::SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetLightFunctionFadeDistance");

        ALight_SetLightFunctionFadeDistance_Params params;
        params.NewLightFunctionFadeDistance = NewLightFunctionFadeDistance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Light.SetLightColor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FLinearColor            NewLightColor                  (CPF_Parm, CPF_IsPlainOldData)

    void ALight::SetLightColor(const struct FLinearColor& NewLightColor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetLightColor");

        ALight_SetLightColor_Params params;
        params.NewLightColor = NewLightColor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Light.SetEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bSetEnabled                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ALight::SetEnabled(bool bSetEnabled)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetEnabled");

        ALight_SetEnabled_Params params;
        params.bSetEnabled = bSetEnabled;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Light.SetCastShadows
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewValue                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ALight::SetCastShadows(bool bNewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetCastShadows");

        ALight_SetCastShadows_Params params;
        params.bNewValue = bNewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Light.SetBrightness
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewBrightness                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ALight::SetBrightness(float NewBrightness)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetBrightness");

        ALight_SetBrightness_Params params;
        params.NewBrightness = NewBrightness;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Light.SetAffectTranslucentLighting
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewValue                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ALight::SetAffectTranslucentLighting(bool bNewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetAffectTranslucentLighting");

        ALight_SetAffectTranslucentLighting_Params params;
        params.bNewValue = bNewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Light.OnRep_bEnabled
    // (FUNC_Native, FUNC_Public)

    void ALight::OnRep_bEnabled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.OnRep_bEnabled");

        ALight_OnRep_bEnabled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Light.IsEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool ALight::IsEnabled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.IsEnabled");

        ALight_IsEnabled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Light.GetLightColor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FLinearColor            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FLinearColor ALight::GetLightColor()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.GetLightColor");

        ALight_GetLightColor_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Light.GetBrightness
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float ALight::GetBrightness()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.GetBrightness");

        ALight_GetBrightness_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PointLight.SetRadius
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewRadius                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APointLight::SetRadius(float NewRadius)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLight.SetRadius");

        APointLight_SetRadius_Params params;
        params.NewRadius = NewRadius;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PointLight.SetLightFalloffExponent
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewLightFalloffExponent        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APointLight::SetLightFalloffExponent(float NewLightFalloffExponent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLight.SetLightFalloffExponent");

        APointLight_SetLightFalloffExponent_Params params;
        params.NewLightFalloffExponent = NewLightFalloffExponent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SpotLight.SetOuterConeAngle
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewOuterConeAngle              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ASpotLight::SetOuterConeAngle(float NewOuterConeAngle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLight.SetOuterConeAngle");

        ASpotLight_SetOuterConeAngle_Params params;
        params.NewOuterConeAngle = NewOuterConeAngle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SpotLight.SetInnerConeAngle
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewInnerConeAngle              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ASpotLight::SetInnerConeAngle(float NewInnerConeAngle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLight.SetInnerConeAngle");

        ASpotLight_SetInnerConeAngle_Params params;
        params.NewInnerConeAngle = NewInnerConeAngle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MatineeActor.Stop
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AMatineeActor::Stop()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Stop");

        AMatineeActor_Stop_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MatineeActor.SetPosition
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewPosition                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bJump                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AMatineeActor::SetPosition(float NewPosition, bool bJump)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.SetPosition");

        AMatineeActor_SetPosition_Params params;
        params.NewPosition = NewPosition;
        params.bJump = bJump;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MatineeActor.SetLoopingState
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewLooping                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AMatineeActor::SetLoopingState(bool bNewLooping)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.SetLoopingState");

        AMatineeActor_SetLoopingState_Params params;
        params.bNewLooping = bNewLooping;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MatineeActor.Reverse
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AMatineeActor::Reverse()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Reverse");

        AMatineeActor_Reverse_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MatineeActor.Play
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AMatineeActor::Play()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Play");

        AMatineeActor_Play_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MatineeActor.Pause
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AMatineeActor::Pause()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Pause");

        AMatineeActor_Pause_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MatineeActor.EnableGroupByName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FString                 GroupName                      (CPF_Parm, CPF_ZeroConstructor)
    // bool                           bEnable                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void AMatineeActor::EnableGroupByName(const struct FString& GroupName, bool bEnable)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.EnableGroupByName");

        AMatineeActor_EnableGroupByName_Params params;
        params.GroupName = GroupName;
        params.bEnable = bEnable;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MatineeActor.ChangePlaybackDirection
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void AMatineeActor::ChangePlaybackDirection()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.ChangePlaybackDirection");

        AMatineeActor_ChangePlaybackDirection_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystem.ContainsEmitterType
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UClass*                  TypeData                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UParticleSystem::ContainsEmitterType(class UClass* TypeData)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.ContainsEmitterType");

        UParticleSystem_ContainsEmitterType_Params params;
        params.TypeData = TypeData;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.ParticleSystemComponent.SetVectorParameter
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Param                          (CPF_Parm, CPF_IsPlainOldData)

    void UParticleSystemComponent::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetVectorParameter");

        UParticleSystemComponent_SetVectorParameter_Params params;
        params.ParameterName = ParameterName;
        params.Param = Param;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.SetTrailSourceData
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   InFirstSocketName              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   InSecondSocketName             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ETrailWidthMode>   InWidthMode                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InWidth                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UParticleSystemComponent::SetTrailSourceData(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetTrailSourceData");

        UParticleSystemComponent_SetTrailSourceData_Params params;
        params.InFirstSocketName = InFirstSocketName;
        params.InSecondSocketName = InSecondSocketName;
        params.InWidthMode = InWidthMode;
        params.InWidth = InWidth;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.SetTemplate
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UParticleSystem*         NewTemplate                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UParticleSystemComponent::SetTemplate(class UParticleSystem* NewTemplate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetTemplate");

        UParticleSystemComponent_SetTemplate_Params params;
        params.NewTemplate = NewTemplate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.SetMaterialParameter
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInterface*      Param                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UParticleSystemComponent::SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetMaterialParameter");

        UParticleSystemComponent_SetMaterialParameter_Params params;
        params.ParameterName = ParameterName;
        params.Param = Param;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.SetFloatParameter
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Param                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UParticleSystemComponent::SetFloatParameter(const struct FName& ParameterName, float Param)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetFloatParameter");

        UParticleSystemComponent_SetFloatParameter_Params params;
        params.ParameterName = ParameterName;
        params.Param = Param;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.SetEmitterEnable
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   EmitterName                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bNewEnableState                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UParticleSystemComponent::SetEmitterEnable(const struct FName& EmitterName, bool bNewEnableState)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetEmitterEnable");

        UParticleSystemComponent_SetEmitterEnable_Params params;
        params.EmitterName = EmitterName;
        params.bNewEnableState = bNewEnableState;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.SetColorParameter
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            Param                          (CPF_Parm, CPF_IsPlainOldData)

    void UParticleSystemComponent::SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetColorParameter");

        UParticleSystemComponent_SetColorParameter_Params params;
        params.ParameterName = ParameterName;
        params.Param = Param;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.SetBeamTargetTangent
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // int                            EmitterIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 NewTangentPoint                (CPF_Parm, CPF_IsPlainOldData)
    // int                            TargetIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UParticleSystemComponent::SetBeamTargetTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int TargetIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetTangent");

        UParticleSystemComponent_SetBeamTargetTangent_Params params;
        params.EmitterIndex = EmitterIndex;
        params.NewTangentPoint = NewTangentPoint;
        params.TargetIndex = TargetIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.SetBeamTargetStrength
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            EmitterIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          NewTargetStrength              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            TargetIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UParticleSystemComponent::SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetStrength");

        UParticleSystemComponent_SetBeamTargetStrength_Params params;
        params.EmitterIndex = EmitterIndex;
        params.NewTargetStrength = NewTargetStrength;
        params.TargetIndex = TargetIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.SetBeamTargetPoint
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // int                            EmitterIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 NewTargetPoint                 (CPF_Parm, CPF_IsPlainOldData)
    // int                            TargetIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UParticleSystemComponent::SetBeamTargetPoint(int EmitterIndex, const struct FVector& NewTargetPoint, int TargetIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetPoint");

        UParticleSystemComponent_SetBeamTargetPoint_Params params;
        params.EmitterIndex = EmitterIndex;
        params.NewTargetPoint = NewTargetPoint;
        params.TargetIndex = TargetIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.SetBeamSourceTangent
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // int                            EmitterIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 NewTangentPoint                (CPF_Parm, CPF_IsPlainOldData)
    // int                            SourceIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UParticleSystemComponent::SetBeamSourceTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int SourceIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourceTangent");

        UParticleSystemComponent_SetBeamSourceTangent_Params params;
        params.EmitterIndex = EmitterIndex;
        params.NewTangentPoint = NewTangentPoint;
        params.SourceIndex = SourceIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.SetBeamSourceStrength
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            EmitterIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          NewSourceStrength              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            SourceIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UParticleSystemComponent::SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourceStrength");

        UParticleSystemComponent_SetBeamSourceStrength_Params params;
        params.EmitterIndex = EmitterIndex;
        params.NewSourceStrength = NewSourceStrength;
        params.SourceIndex = SourceIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.SetBeamSourcePoint
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // int                            EmitterIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 NewSourcePoint                 (CPF_Parm, CPF_IsPlainOldData)
    // int                            SourceIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UParticleSystemComponent::SetBeamSourcePoint(int EmitterIndex, const struct FVector& NewSourcePoint, int SourceIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourcePoint");

        UParticleSystemComponent_SetBeamSourcePoint_Params params;
        params.EmitterIndex = EmitterIndex;
        params.NewSourcePoint = NewSourcePoint;
        params.SourceIndex = SourceIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.SetBeamEndPoint
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // int                            EmitterIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 NewEndPoint                    (CPF_Parm, CPF_IsPlainOldData)

    void UParticleSystemComponent::SetBeamEndPoint(int EmitterIndex, const struct FVector& NewEndPoint)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamEndPoint");

        UParticleSystemComponent_SetBeamEndPoint_Params params;
        params.EmitterIndex = EmitterIndex;
        params.NewEndPoint = NewEndPoint;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.SetAutoAttachParams
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class USceneComponent*         Parent                         (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   SocketName                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EAttachLocation>   LocationType                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UParticleSystemComponent::SetAutoAttachParams(class USceneComponent* Parent, const struct FName& SocketName, TEnumAsByte<EAttachLocation> LocationType)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetAutoAttachParams");

        UParticleSystemComponent_SetAutoAttachParams_Params params;
        params.Parent = Parent;
        params.SocketName = SocketName;
        params.LocationType = LocationType;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.SetAutoAttachmentParameters
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class USceneComponent*         Parent                         (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   SocketName                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EAttachmentRule                LocationRule                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EAttachmentRule                RotationRule                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // EAttachmentRule                ScaleRule                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UParticleSystemComponent::SetAutoAttachmentParameters(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetAutoAttachmentParameters");

        UParticleSystemComponent_SetAutoAttachmentParameters_Params params;
        params.Parent = Parent;
        params.SocketName = SocketName;
        params.LocationRule = LocationRule;
        params.RotationRule = RotationRule;
        params.ScaleRule = ScaleRule;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.SetActorParameter
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  Param                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UParticleSystemComponent::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetActorParameter");

        UParticleSystemComponent_SetActorParameter_Params params;
        params.ParameterName = ParameterName;
        params.Param = Param;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.GetNumActiveParticles
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UParticleSystemComponent::GetNumActiveParticles()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetNumActiveParticles");

        UParticleSystemComponent_GetNumActiveParticles_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.ParticleSystemComponent.GetNamedMaterial
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   InName                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInterface*      ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UMaterialInterface* UParticleSystemComponent::GetNamedMaterial(const struct FName& InName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetNamedMaterial");

        UParticleSystemComponent_GetNamedMaterial_Params params;
        params.InName = InName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.ParticleSystemComponent.GetBeamTargetTangent
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            EmitterIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            TargetIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 OutTangentPoint                (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UParticleSystemComponent::GetBeamTargetTangent(int EmitterIndex, int TargetIndex, struct FVector* OutTangentPoint)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamTargetTangent");

        UParticleSystemComponent_GetBeamTargetTangent_Params params;
        params.EmitterIndex = EmitterIndex;
        params.TargetIndex = TargetIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutTangentPoint != nullptr)
            *OutTangentPoint = params.OutTangentPoint;

        return params.ReturnValue;
    }


    // Function Engine.ParticleSystemComponent.GetBeamTargetStrength
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            EmitterIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            TargetIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OutTargetStrength              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UParticleSystemComponent::GetBeamTargetStrength(int EmitterIndex, int TargetIndex, float* OutTargetStrength)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamTargetStrength");

        UParticleSystemComponent_GetBeamTargetStrength_Params params;
        params.EmitterIndex = EmitterIndex;
        params.TargetIndex = TargetIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutTargetStrength != nullptr)
            *OutTargetStrength = params.OutTargetStrength;

        return params.ReturnValue;
    }


    // Function Engine.ParticleSystemComponent.GetBeamTargetPoint
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            EmitterIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            TargetIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 OutTargetPoint                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UParticleSystemComponent::GetBeamTargetPoint(int EmitterIndex, int TargetIndex, struct FVector* OutTargetPoint)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamTargetPoint");

        UParticleSystemComponent_GetBeamTargetPoint_Params params;
        params.EmitterIndex = EmitterIndex;
        params.TargetIndex = TargetIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutTargetPoint != nullptr)
            *OutTargetPoint = params.OutTargetPoint;

        return params.ReturnValue;
    }


    // Function Engine.ParticleSystemComponent.GetBeamSourceTangent
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            EmitterIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            SourceIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 OutTangentPoint                (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UParticleSystemComponent::GetBeamSourceTangent(int EmitterIndex, int SourceIndex, struct FVector* OutTangentPoint)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamSourceTangent");

        UParticleSystemComponent_GetBeamSourceTangent_Params params;
        params.EmitterIndex = EmitterIndex;
        params.SourceIndex = SourceIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutTangentPoint != nullptr)
            *OutTangentPoint = params.OutTangentPoint;

        return params.ReturnValue;
    }


    // Function Engine.ParticleSystemComponent.GetBeamSourceStrength
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            EmitterIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            SourceIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OutSourceStrength              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UParticleSystemComponent::GetBeamSourceStrength(int EmitterIndex, int SourceIndex, float* OutSourceStrength)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamSourceStrength");

        UParticleSystemComponent_GetBeamSourceStrength_Params params;
        params.EmitterIndex = EmitterIndex;
        params.SourceIndex = SourceIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutSourceStrength != nullptr)
            *OutSourceStrength = params.OutSourceStrength;

        return params.ReturnValue;
    }


    // Function Engine.ParticleSystemComponent.GetBeamSourcePoint
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            EmitterIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            SourceIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 OutSourcePoint                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UParticleSystemComponent::GetBeamSourcePoint(int EmitterIndex, int SourceIndex, struct FVector* OutSourcePoint)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamSourcePoint");

        UParticleSystemComponent_GetBeamSourcePoint_Params params;
        params.EmitterIndex = EmitterIndex;
        params.SourceIndex = SourceIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutSourcePoint != nullptr)
            *OutSourcePoint = params.OutSourcePoint;

        return params.ReturnValue;
    }


    // Function Engine.ParticleSystemComponent.GetBeamEndPoint
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            EmitterIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 OutEndPoint                    (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UParticleSystemComponent::GetBeamEndPoint(int EmitterIndex, struct FVector* OutEndPoint)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamEndPoint");

        UParticleSystemComponent_GetBeamEndPoint_Params params;
        params.EmitterIndex = EmitterIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutEndPoint != nullptr)
            *OutEndPoint = params.OutEndPoint;

        return params.ReturnValue;
    }


    // Function Engine.ParticleSystemComponent.GenerateParticleEvent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   InEventName                    (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InEmitterTime                  (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 InLocation                     (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 InDirection                    (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 InVelocity                     (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)

    void UParticleSystemComponent::GenerateParticleEvent(const struct FName& InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GenerateParticleEvent");

        UParticleSystemComponent_GenerateParticleEvent_Params params;
        params.InEventName = InEventName;
        params.InEmitterTime = InEmitterTime;
        params.InLocation = InLocation;
        params.InDirection = InDirection;
        params.InVelocity = InVelocity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.EndTrails
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UParticleSystemComponent::EndTrails()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.EndTrails");

        UParticleSystemComponent_EndTrails_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   InName                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInterface*      SourceMaterial                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInstanceDynamic* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UMaterialInstanceDynamic* UParticleSystemComponent::CreateNamedDynamicMaterialInstance(const struct FName& InName, class UMaterialInterface* SourceMaterial)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance");

        UParticleSystemComponent_CreateNamedDynamicMaterialInstance_Params params;
        params.InName = InName;
        params.SourceMaterial = SourceMaterial;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.ParticleSystemComponent.BeginTrails
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   InFirstSocketName              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   InSecondSocketName             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ETrailWidthMode>   InWidthMode                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InWidth                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UParticleSystemComponent::BeginTrails(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.BeginTrails");

        UParticleSystemComponent_BeginTrails_Params params;
        params.InFirstSocketName = InFirstSocketName;
        params.InSecondSocketName = InSecondSocketName;
        params.InWidthMode = InWidthMode;
        params.InWidth = InWidth;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMesh.NumSockets
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int USkeletalMesh::NumSockets()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.NumSockets");

        USkeletalMesh_NumSockets_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMesh.IsSectionUsingCloth
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            InSectionIndex                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bCheckCorrespondingSections    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool USkeletalMesh::IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.IsSectionUsingCloth");

        USkeletalMesh_IsSectionUsingCloth_Params params;
        params.InSectionIndex = InSectionIndex;
        params.bCheckCorrespondingSections = bCheckCorrespondingSections;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMesh.GetSocketByIndex
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            Index                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USkeletalMeshSocket*     ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class USkeletalMeshSocket* USkeletalMesh::GetSocketByIndex(int Index)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.GetSocketByIndex");

        USkeletalMesh_GetSocketByIndex_Params params;
        params.Index = Index;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMesh.GetImportedBounds
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FBoxSphereBounds        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FBoxSphereBounds USkeletalMesh::GetImportedBounds()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.GetImportedBounds");

        USkeletalMesh_GetImportedBounds_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMesh.GetBounds
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FBoxSphereBounds        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FBoxSphereBounds USkeletalMesh::GetBounds()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.GetBounds");

        USkeletalMesh_GetBounds_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMesh.FindSocketAndIndex
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   InSocketName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            OutIndex                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USkeletalMeshSocket*     ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class USkeletalMeshSocket* USkeletalMesh::FindSocketAndIndex(const struct FName& InSocketName, int* OutIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.FindSocketAndIndex");

        USkeletalMesh_FindSocketAndIndex_Params params;
        params.InSocketName = InSocketName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutIndex != nullptr)
            *OutIndex = params.OutIndex;

        return params.ReturnValue;
    }


    // Function Engine.SkeletalMesh.FindSocket
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FName                   InSocketName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USkeletalMeshSocket*     ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class USkeletalMeshSocket* USkeletalMesh::FindSocket(const struct FName& InSocketName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.FindSocket");

        USkeletalMesh_FindSocket_Params params;
        params.InSocketName = InSocketName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.RadialForceActor.ToggleForce
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void ARadialForceActor::ToggleForce()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceActor.ToggleForce");

        ARadialForceActor_ToggleForce_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.RadialForceActor.FireImpulse
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void ARadialForceActor::FireImpulse()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceActor.FireImpulse");

        ARadialForceActor_FireImpulse_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.RadialForceActor.EnableForce
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void ARadialForceActor::EnableForce()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceActor.EnableForce");

        ARadialForceActor_EnableForce_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.RadialForceActor.DisableForce
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void ARadialForceActor::DisableForce()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceActor.DisableForce");

        ARadialForceActor_DisableForce_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlanarReflection.OnInterpToggle
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnable                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void APlanarReflection::OnInterpToggle(bool bEnable)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlanarReflection.OnInterpToggle");

        APlanarReflection_OnInterpToggle_Params params;
        params.bEnable = bEnable;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneCapture2D.OnInterpToggle
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnable                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ASceneCapture2D::OnInterpToggle(bool bEnable)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2D.OnInterpToggle");

        ASceneCapture2D_OnInterpToggle_Params params;
        params.bEnable = bEnable;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneCaptureCube.OnInterpToggle
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnable                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ASceneCaptureCube::OnInterpToggle(bool bEnable)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureCube.OnInterpToggle");

        ASceneCaptureCube_OnInterpToggle_Params params;
        params.bEnable = bEnable;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // DelegateFunction Engine.ApplicationLifecycleComponent.ApplicationLifetimeDelegate__DelegateSignature
    // (FUNC_MulticastDelegate, FUNC_Public, FUNC_Delegate)

    void UApplicationLifecycleComponent::ApplicationLifetimeDelegate__DelegateSignature()
    {
        static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.ApplicationLifecycleComponent.ApplicationLifetimeDelegate__DelegateSignature");

        UApplicationLifecycleComponent_ApplicationLifetimeDelegate__DelegateSignature_Params params;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.InterpToMovementComponent.StopSimulating
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FHitResult              HitResult                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UInterpToMovementComponent::StopSimulating(const struct FHitResult& HitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpToMovementComponent.StopSimulating");

        UInterpToMovementComponent_StopSimulating_Params params;
        params.HitResult = HitResult;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.InterpToMovementComponent.RestartMovement
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InitialDirection               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UInterpToMovementComponent::RestartMovement(float InitialDirection)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpToMovementComponent.RestartMovement");

        UInterpToMovementComponent_RestartMovement_Params params;
        params.InitialDirection = InitialDirection;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature
    // (FUNC_MulticastDelegate, FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
    // Parameters:
    // struct FHitResult              ImpactResult                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UInterpToMovementComponent::OnInterpToWaitEndDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)
    {
        static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature");

        UInterpToMovementComponent_OnInterpToWaitEndDelegate__DelegateSignature_Params params;
        params.ImpactResult = ImpactResult;
        params.Time = Time;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature
    // (FUNC_MulticastDelegate, FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
    // Parameters:
    // struct FHitResult              ImpactResult                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UInterpToMovementComponent::OnInterpToWaitBeginDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)
    {
        static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature");

        UInterpToMovementComponent_OnInterpToWaitBeginDelegate__DelegateSignature_Params params;
        params.ImpactResult = ImpactResult;
        params.Time = Time;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature
    // (FUNC_MulticastDelegate, FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
    // Parameters:
    // struct FHitResult              ImpactResult                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UInterpToMovementComponent::OnInterpToStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)
    {
        static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature");

        UInterpToMovementComponent_OnInterpToStopDelegate__DelegateSignature_Params params;
        params.ImpactResult = ImpactResult;
        params.Time = Time;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature
    // (FUNC_MulticastDelegate, FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
    // Parameters:
    // struct FHitResult              ImpactResult                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UInterpToMovementComponent::OnInterpToReverseDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)
    {
        static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature");

        UInterpToMovementComponent_OnInterpToReverseDelegate__DelegateSignature_Params params;
        params.ImpactResult = ImpactResult;
        params.Time = Time;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature
    // (FUNC_MulticastDelegate, FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
    // Parameters:
    // struct FHitResult              ImpactResult                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UInterpToMovementComponent::OnInterpToResetDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time)
    {
        static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature");

        UInterpToMovementComponent_OnInterpToResetDelegate__DelegateSignature_Params params;
        params.ImpactResult = ImpactResult;
        params.Time = Time;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.InterpToMovementComponent.FinaliseControlPoints
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UInterpToMovementComponent::FinaliseControlPoints()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpToMovementComponent.FinaliseControlPoints");

        UInterpToMovementComponent_FinaliseControlPoints_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimSequenceBase.GetPlayLength
    // (FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimSequenceBase::GetPlayLength()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSequenceBase.GetPlayLength");

        UAnimSequenceBase_GetPlayLength_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.ProjectileMovementComponent.StopSimulating
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FHitResult              HitResult                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UProjectileMovementComponent::StopSimulating(const struct FHitResult& HitResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.StopSimulating");

        UProjectileMovementComponent_StopSimulating_Params params;
        params.HitResult = HitResult;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewVelocity                    (CPF_Parm, CPF_IsPlainOldData)

    void UProjectileMovementComponent::SetVelocityInLocalSpace(const struct FVector& NewVelocity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace");

        UProjectileMovementComponent_SetVelocityInLocalSpace_Params params;
        params.NewVelocity = NewVelocity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature
    // (FUNC_MulticastDelegate, FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
    // Parameters:
    // struct FHitResult              ImpactResult                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UProjectileMovementComponent::OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult)
    {
        static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature");

        UProjectileMovementComponent_OnProjectileStopDelegate__DelegateSignature_Params params;
        params.ImpactResult = ImpactResult;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature
    // (FUNC_MulticastDelegate, FUNC_Public, FUNC_Delegate, FUNC_HasOutParms, FUNC_HasDefaults)
    // Parameters:
    // struct FHitResult              ImpactResult                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 ImpactVelocity                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UProjectileMovementComponent::OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity)
    {
        static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature");

        UProjectileMovementComponent_OnProjectileBounceDelegate__DelegateSignature_Params params;
        params.ImpactResult = ImpactResult;
        params.ImpactVelocity = ImpactVelocity;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ProjectileMovementComponent.LimitVelocity
    // (FUNC_Final, FUNC_Native, FUNC_Protected, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 NewVelocity                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UProjectileMovementComponent::LimitVelocity(const struct FVector& NewVelocity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.LimitVelocity");

        UProjectileMovementComponent_LimitVelocity_Params params;
        params.NewVelocity = NewVelocity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavModifierComponent.SetAreaClass
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UClass*                  NewAreaClass                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UNavModifierComponent::SetAreaClass(class UClass* NewAreaClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavModifierComponent.SetAreaClass");

        UNavModifierComponent_SetAreaClass_Params params;
        params.NewAreaClass = NewAreaClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PawnNoiseEmitterComponent.MakeNoise
    // (FUNC_BlueprintAuthorityOnly, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  NoiseMaker                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Loudness                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 NoiseLocation                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UPawnNoiseEmitterComponent::MakeNoise(class AActor* NoiseMaker, float Loudness, const struct FVector& NoiseLocation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnNoiseEmitterComponent.MakeNoise");

        UPawnNoiseEmitterComponent_MakeNoise_Params params;
        params.NoiseMaker = NoiseMaker;
        params.Loudness = Loudness;
        params.NoiseLocation = NoiseLocation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicalAnimationComponent.SetStrengthMultiplyer
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InStrengthMultiplyer           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicalAnimationComponent::SetStrengthMultiplyer(float InStrengthMultiplyer)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalAnimationComponent.SetStrengthMultiplyer");

        UPhysicalAnimationComponent_SetStrengthMultiplyer_Params params;
        params.InStrengthMultiplyer = InStrengthMultiplyer;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class USkeletalMeshComponent*  InSkeletalMeshComponent        (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

    void UPhysicalAnimationComponent::SetSkeletalMeshComponent(class USkeletalMeshComponent* InSkeletalMeshComponent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent");

        UPhysicalAnimationComponent_SetSkeletalMeshComponent_Params params;
        params.InSkeletalMeshComponent = InSkeletalMeshComponent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BodyName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FPhysicalAnimationData  PhysicalAnimationData          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           bIncludeSelf                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicalAnimationComponent::ApplyPhysicalAnimationSettingsBelow(const struct FName& BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow");

        UPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow_Params params;
        params.BodyName = BodyName;
        params.PhysicalAnimationData = PhysicalAnimationData;
        params.bIncludeSelf = bIncludeSelf;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BodyName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FPhysicalAnimationData  PhysicalAnimationData          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void UPhysicalAnimationComponent::ApplyPhysicalAnimationSettings(const struct FName& BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings");

        UPhysicalAnimationComponent_ApplyPhysicalAnimationSettings_Params params;
        params.BodyName = BodyName;
        params.PhysicalAnimationData = PhysicalAnimationData;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BodyName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   ProfileName                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bIncludeSelf                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bClearNotFound                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicalAnimationComponent::ApplyPhysicalAnimationProfileBelow(const struct FName& BodyName, const struct FName& ProfileName, bool bIncludeSelf, bool bClearNotFound)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow");

        UPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow_Params params;
        params.BodyName = BodyName;
        params.ProfileName = ProfileName;
        params.bIncludeSelf = bIncludeSelf;
        params.bClearNotFound = bClearNotFound;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsHandleComponent.SetTargetRotation
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FRotator                NewRotation                    (CPF_Parm, CPF_IsPlainOldData)

    void UPhysicsHandleComponent::SetTargetRotation(const struct FRotator& NewRotation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetTargetRotation");

        UPhysicsHandleComponent_SetTargetRotation_Params params;
        params.NewRotation = NewRotation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewLocation                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                NewRotation                    (CPF_Parm, CPF_IsPlainOldData)

    void UPhysicsHandleComponent::SetTargetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation");

        UPhysicsHandleComponent_SetTargetLocationAndRotation_Params params;
        params.NewLocation = NewLocation;
        params.NewRotation = NewRotation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsHandleComponent.SetTargetLocation
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewLocation                    (CPF_Parm, CPF_IsPlainOldData)

    void UPhysicsHandleComponent::SetTargetLocation(const struct FVector& NewLocation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetTargetLocation");

        UPhysicsHandleComponent_SetTargetLocation_Params params;
        params.NewLocation = NewLocation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsHandleComponent.SetLinearStiffness
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewLinearStiffness             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsHandleComponent::SetLinearStiffness(float NewLinearStiffness)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetLinearStiffness");

        UPhysicsHandleComponent_SetLinearStiffness_Params params;
        params.NewLinearStiffness = NewLinearStiffness;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsHandleComponent.SetLinearDamping
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewLinearDamping               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsHandleComponent::SetLinearDamping(float NewLinearDamping)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetLinearDamping");

        UPhysicsHandleComponent_SetLinearDamping_Params params;
        params.NewLinearDamping = NewLinearDamping;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsHandleComponent.SetInterpolationSpeed
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewInterpolationSpeed          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsHandleComponent::SetInterpolationSpeed(float NewInterpolationSpeed)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetInterpolationSpeed");

        UPhysicsHandleComponent_SetInterpolationSpeed_Params params;
        params.NewInterpolationSpeed = NewInterpolationSpeed;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsHandleComponent.SetAngularStiffness
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewAngularStiffness            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsHandleComponent::SetAngularStiffness(float NewAngularStiffness)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetAngularStiffness");

        UPhysicsHandleComponent_SetAngularStiffness_Params params;
        params.NewAngularStiffness = NewAngularStiffness;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsHandleComponent.SetAngularDamping
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewAngularDamping              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsHandleComponent::SetAngularDamping(float NewAngularDamping)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetAngularDamping");

        UPhysicsHandleComponent_SetAngularDamping_Params params;
        params.NewAngularDamping = NewAngularDamping;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsHandleComponent.ReleaseComponent
    // (FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UPhysicsHandleComponent::ReleaseComponent()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.ReleaseComponent");

        UPhysicsHandleComponent_ReleaseComponent_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UPrimitiveComponent*     Component                      (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   InBoneName                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_Parm, CPF_IsPlainOldData)

    void UPhysicsHandleComponent::GrabComponentAtLocationWithRotation(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& Location, const struct FRotator& Rotation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation");

        UPhysicsHandleComponent_GrabComponentAtLocationWithRotation_Params params;
        params.Component = Component;
        params.InBoneName = InBoneName;
        params.Location = Location;
        params.Rotation = Rotation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsHandleComponent.GrabComponentAtLocation
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UPrimitiveComponent*     Component                      (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   InBoneName                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 GrabLocation                   (CPF_Parm, CPF_IsPlainOldData)

    void UPhysicsHandleComponent::GrabComponentAtLocation(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.GrabComponentAtLocation");

        UPhysicsHandleComponent_GrabComponentAtLocation_Params params;
        params.Component = Component;
        params.InBoneName = InBoneName;
        params.GrabLocation = GrabLocation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsHandleComponent.GrabComponent
    // (FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UPrimitiveComponent*     Component                      (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   InBoneName                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 GrabLocation                   (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bConstrainRotation             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsHandleComponent::GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.GrabComponent");

        UPhysicsHandleComponent_GrabComponent_Params params;
        params.Component = Component;
        params.InBoneName = InBoneName;
        params.GrabLocation = GrabLocation;
        params.bConstrainRotation = bConstrainRotation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 TargetLocation                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FRotator                TargetRotation                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void UPhysicsHandleComponent::GetTargetLocationAndRotation(struct FVector* TargetLocation, struct FRotator* TargetRotation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation");

        UPhysicsHandleComponent_GetTargetLocationAndRotation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (TargetLocation != nullptr)
            *TargetLocation = params.TargetLocation;
        if (TargetRotation != nullptr)
            *TargetRotation = params.TargetRotation;
    }


    // Function Engine.PhysicsHandleComponent.GetGrabbedComponent
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UPrimitiveComponent*     ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UPrimitiveComponent* UPhysicsHandleComponent::GetGrabbedComponent()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.GetGrabbedComponent");

        UPhysicsHandleComponent_GetGrabbedComponent_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UPlatformEventsComponent::SupportsConvertibleLaptops()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops");

        UPlatformEventsComponent_SupportsConvertibleLaptops_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature
    // (FUNC_MulticastDelegate, FUNC_Public, FUNC_Delegate)

    void UPlatformEventsComponent::PlatformEventDelegate__DelegateSignature()
    {
        static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature");

        UPlatformEventsComponent_PlatformEventDelegate__DelegateSignature_Params params;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PlatformEventsComponent.IsInTabletMode
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UPlatformEventsComponent::IsInTabletMode()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformEventsComponent.IsInTabletMode");

        UPlatformEventsComponent_IsInTabletMode_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlatformEventsComponent.IsInLaptopMode
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UPlatformEventsComponent::IsInLaptopMode()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformEventsComponent.IsInLaptopMode");

        UPlatformEventsComponent_IsInLaptopMode_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AtmosphericFogComponent.StartPrecompute
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UAtmosphericFogComponent::StartPrecompute()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.StartPrecompute");

        UAtmosphericFogComponent_StartPrecompute_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AtmosphericFogComponent.SetSunMultiplier
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewSunMultiplier               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAtmosphericFogComponent::SetSunMultiplier(float NewSunMultiplier)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetSunMultiplier");

        UAtmosphericFogComponent_SetSunMultiplier_Params params;
        params.NewSunMultiplier = NewSunMultiplier;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AtmosphericFogComponent.SetStartDistance
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewStartDistance               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAtmosphericFogComponent::SetStartDistance(float NewStartDistance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetStartDistance");

        UAtmosphericFogComponent_SetStartDistance_Params params;
        params.NewStartDistance = NewStartDistance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AtmosphericFogComponent.SetPrecomputeParams
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          DensityHeight                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MaxScatteringOrder             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            InscatterAltitudeSampleNum     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAtmosphericFogComponent::SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetPrecomputeParams");

        UAtmosphericFogComponent_SetPrecomputeParams_Params params;
        params.DensityHeight = DensityHeight;
        params.MaxScatteringOrder = MaxScatteringOrder;
        params.InscatterAltitudeSampleNum = InscatterAltitudeSampleNum;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AtmosphericFogComponent.SetFogMultiplier
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewFogMultiplier               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAtmosphericFogComponent::SetFogMultiplier(float NewFogMultiplier)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetFogMultiplier");

        UAtmosphericFogComponent_SetFogMultiplier_Params params;
        params.NewFogMultiplier = NewFogMultiplier;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AtmosphericFogComponent.SetDistanceScale
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewDistanceScale               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAtmosphericFogComponent::SetDistanceScale(float NewDistanceScale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDistanceScale");

        UAtmosphericFogComponent_SetDistanceScale_Params params;
        params.NewDistanceScale = NewDistanceScale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AtmosphericFogComponent.SetDistanceOffset
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewDistanceOffset              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAtmosphericFogComponent::SetDistanceOffset(float NewDistanceOffset)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDistanceOffset");

        UAtmosphericFogComponent_SetDistanceOffset_Params params;
        params.NewDistanceOffset = NewDistanceOffset;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AtmosphericFogComponent.SetDensityOffset
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewDensityOffset               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAtmosphericFogComponent::SetDensityOffset(float NewDensityOffset)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDensityOffset");

        UAtmosphericFogComponent_SetDensityOffset_Params params;
        params.NewDensityOffset = NewDensityOffset;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AtmosphericFogComponent.SetDensityMultiplier
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewDensityMultiplier           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAtmosphericFogComponent::SetDensityMultiplier(float NewDensityMultiplier)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDensityMultiplier");

        UAtmosphericFogComponent_SetDensityMultiplier_Params params;
        params.NewDensityMultiplier = NewDensityMultiplier;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AtmosphericFogComponent.SetDefaultLightColor
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FLinearColor            NewLightColor                  (CPF_Parm, CPF_IsPlainOldData)

    void UAtmosphericFogComponent::SetDefaultLightColor(const struct FLinearColor& NewLightColor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDefaultLightColor");

        UAtmosphericFogComponent_SetDefaultLightColor_Params params;
        params.NewLightColor = NewLightColor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AtmosphericFogComponent.SetDefaultBrightness
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewBrightness                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAtmosphericFogComponent::SetDefaultBrightness(float NewBrightness)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDefaultBrightness");

        UAtmosphericFogComponent_SetDefaultBrightness_Params params;
        params.NewBrightness = NewBrightness;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AtmosphericFogComponent.SetAltitudeScale
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewAltitudeScale               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAtmosphericFogComponent::SetAltitudeScale(float NewAltitudeScale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetAltitudeScale");

        UAtmosphericFogComponent_SetAltitudeScale_Params params;
        params.NewAltitudeScale = NewAltitudeScale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AtmosphericFogComponent.DisableSunDisk
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           NewSunDisk                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAtmosphericFogComponent::DisableSunDisk(bool NewSunDisk)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.DisableSunDisk");

        UAtmosphericFogComponent_DisableSunDisk_Params params;
        params.NewSunDisk = NewSunDisk;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AtmosphericFogComponent.DisableGroundScattering
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           NewGroundScattering            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAtmosphericFogComponent::DisableGroundScattering(bool NewGroundScattering)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.DisableGroundScattering");

        UAtmosphericFogComponent_DisableGroundScattering_Params params;
        params.NewGroundScattering = NewGroundScattering;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioComponent.Stop
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UAudioComponent::Stop()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.Stop");

        UAudioComponent_Stop_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioComponent.SetWaveParameter
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   InName                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundWave*              InWave                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAudioComponent::SetWaveParameter(const struct FName& InName, class USoundWave* InWave)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetWaveParameter");

        UAudioComponent_SetWaveParameter_Params params;
        params.InName = InName;
        params.InWave = InWave;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioComponent.SetVolumeMultiplier
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewVolumeMultiplier            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAudioComponent::SetVolumeMultiplier(float NewVolumeMultiplier)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetVolumeMultiplier");

        UAudioComponent_SetVolumeMultiplier_Params params;
        params.NewVolumeMultiplier = NewVolumeMultiplier;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioComponent.SetUISound
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bInUISound                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAudioComponent::SetUISound(bool bInUISound)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetUISound");

        UAudioComponent_SetUISound_Params params;
        params.bInUISound = bInUISound;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioComponent.SetSound
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class USoundBase*              NewSound                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAudioComponent::SetSound(class USoundBase* NewSound)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetSound");

        UAudioComponent_SetSound_Params params;
        params.NewSound = NewSound;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioComponent.SetPitchMultiplier
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewPitchMultiplier             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAudioComponent::SetPitchMultiplier(float NewPitchMultiplier)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetPitchMultiplier");

        UAudioComponent_SetPitchMultiplier_Params params;
        params.NewPitchMultiplier = NewPitchMultiplier;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioComponent.SetPaused
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bPause                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAudioComponent::SetPaused(bool bPause)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetPaused");

        UAudioComponent_SetPaused_Params params;
        params.bPause = bPause;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioComponent.SetLowPassFilterFrequency
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InLowPassFilterFrequency       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAudioComponent::SetLowPassFilterFrequency(float InLowPassFilterFrequency)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetLowPassFilterFrequency");

        UAudioComponent_SetLowPassFilterFrequency_Params params;
        params.InLowPassFilterFrequency = InLowPassFilterFrequency;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioComponent.SetLowPassFilterEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           InLowPassFilterEnabled         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAudioComponent::SetLowPassFilterEnabled(bool InLowPassFilterEnabled)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetLowPassFilterEnabled");

        UAudioComponent_SetLowPassFilterEnabled_Params params;
        params.InLowPassFilterEnabled = InLowPassFilterEnabled;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioComponent.SetIntParameter
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   InName                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            inInt                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAudioComponent::SetIntParameter(const struct FName& InName, int inInt)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetIntParameter");

        UAudioComponent_SetIntParameter_Params params;
        params.InName = InName;
        params.inInt = inInt;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioComponent.SetFloatParameter
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   InName                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InFloat                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAudioComponent::SetFloatParameter(const struct FName& InName, float InFloat)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetFloatParameter");

        UAudioComponent_SetFloatParameter_Params params;
        params.InName = InName;
        params.InFloat = InFloat;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioComponent.SetBoolParameter
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   InName                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           InBool                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAudioComponent::SetBoolParameter(const struct FName& InName, bool InBool)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetBoolParameter");

        UAudioComponent_SetBoolParameter_Params params;
        params.InName = InName;
        params.InBool = InBool;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioComponent.Play
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          StartTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAudioComponent::Play(float StartTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.Play");

        UAudioComponent_Play_Params params;
        params.StartTime = StartTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioComponent.IsPlaying
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UAudioComponent::IsPlaying()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.IsPlaying");

        UAudioComponent_IsPlaying_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AudioComponent.FadeOut
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          FadeOutDuration                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          FadeVolumeLevel                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAudioComponent::FadeOut(float FadeOutDuration, float FadeVolumeLevel)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.FadeOut");

        UAudioComponent_FadeOut_Params params;
        params.FadeOutDuration = FadeOutDuration;
        params.FadeVolumeLevel = FadeVolumeLevel;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioComponent.FadeIn
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          FadeInDuration                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          FadeVolumeLevel                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StartTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAudioComponent::FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.FadeIn");

        UAudioComponent_FadeIn_Params params;
        params.FadeInDuration = FadeInDuration;
        params.FadeVolumeLevel = FadeVolumeLevel;
        params.StartTime = StartTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FSoundAttenuationSettings OutAttenuationSettings         (CPF_Parm, CPF_OutParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UAudioComponent::BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings* OutAttenuationSettings)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply");

        UAudioComponent_BP_GetAttenuationSettingsToApply_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutAttenuationSettings != nullptr)
            *OutAttenuationSettings = params.OutAttenuationSettings;

        return params.ReturnValue;
    }


    // Function Engine.AudioComponent.AdjustVolume
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          AdjustVolumeDuration           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          AdjustVolumeLevel              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAudioComponent::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.AdjustVolume");

        UAudioComponent_AdjustVolume_Params params;
        params.AdjustVolumeDuration = AdjustVolumeDuration;
        params.AdjustVolumeLevel = AdjustVolumeLevel;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AudioComponent.AdjustAttenuation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FSoundAttenuationSettings InAttenuationSettings          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void UAudioComponent::AdjustAttenuation(const struct FSoundAttenuationSettings& InAttenuationSettings)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.AdjustAttenuation");

        UAudioComponent_AdjustAttenuation_Params params;
        params.InAttenuationSettings = InAttenuationSettings;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DecalComponent.SetSortOrder
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UDecalComponent::SetSortOrder(int Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetSortOrder");

        UDecalComponent_SetSortOrder_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DecalComponent.SetFadeOut
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          StartDelay                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           DestroyOwnerAfterFade          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UDecalComponent::SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetFadeOut");

        UDecalComponent_SetFadeOut_Params params;
        params.StartDelay = StartDelay;
        params.Duration = Duration;
        params.DestroyOwnerAfterFade = DestroyOwnerAfterFade;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DecalComponent.SetDecalMaterial
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterialInterface*      NewDecalMaterial               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UDecalComponent::SetDecalMaterial(class UMaterialInterface* NewDecalMaterial)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetDecalMaterial");

        UDecalComponent_SetDecalMaterial_Params params;
        params.NewDecalMaterial = NewDecalMaterial;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DecalComponent.GetFadeStartDelay
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UDecalComponent::GetFadeStartDelay()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.GetFadeStartDelay");

        UDecalComponent_GetFadeStartDelay_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.DecalComponent.GetFadeDuration
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UDecalComponent::GetFadeDuration()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.GetFadeDuration");

        UDecalComponent_GetFadeDuration_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.DecalComponent.GetDecalMaterial
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UMaterialInterface*      ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UMaterialInterface* UDecalComponent::GetDecalMaterial()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.GetDecalMaterial");

        UDecalComponent_GetDecalMaterial_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.DecalComponent.CreateDynamicMaterialInstance
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterialInstanceDynamic* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UMaterialInstanceDynamic* UDecalComponent::CreateDynamicMaterialInstance()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.CreateDynamicMaterialInstance");

        UDecalComponent_CreateDynamicMaterialInstance_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetVolumetricFogScatteringScale(float NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringScale");

        UExponentialHeightFogComponent_SetVolumetricFogScatteringScale_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetVolumetricFogScatteringDistribution(float NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution");

        UExponentialHeightFogComponent_SetVolumetricFogScatteringDistribution_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetVolumetricFogDistance(float NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance");

        UExponentialHeightFogComponent_SetVolumetricFogDistance_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogAbsorptionScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetVolumetricFogAbsorptionScale(float NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogAbsorptionScale");

        UExponentialHeightFogComponent_SetVolumetricFogAbsorptionScale_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ExponentialHeightFogComponent.SetVolumetricFog
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewValue                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetVolumetricFog(bool bNewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetVolumetricFog");

        UExponentialHeightFogComponent_SetVolumetricFog_Params params;
        params.bNewValue = bNewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ExponentialHeightFogComponent.SetStartDistance
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetStartDistance(float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetStartDistance");

        UExponentialHeightFogComponent_SetStartDistance_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetNonDirectionalInscatteringColorDistance(float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance");

        UExponentialHeightFogComponent_SetNonDirectionalInscatteringColorDistance_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FLinearColor            Value                          (CPF_Parm, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetInscatteringTextureTint(const struct FLinearColor& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint");

        UExponentialHeightFogComponent_SetInscatteringTextureTint_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetInscatteringColorCubemapAngle(float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle");

        UExponentialHeightFogComponent_SetInscatteringColorCubemapAngle_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UTextureCube*            Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetInscatteringColorCubemap(class UTextureCube* Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap");

        UExponentialHeightFogComponent_SetInscatteringColorCubemap_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetFullyDirectionalInscatteringColorDistance(float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance");

        UExponentialHeightFogComponent_SetFullyDirectionalInscatteringColorDistance_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetFogMaxOpacity(float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity");

        UExponentialHeightFogComponent_SetFogMaxOpacity_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FLinearColor            Value                          (CPF_Parm, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetFogInscatteringColor(const struct FLinearColor& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor");

        UExponentialHeightFogComponent_SetFogInscatteringColor_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetFogHeightFalloff(float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff");

        UExponentialHeightFogComponent_SetFogHeightFalloff_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ExponentialHeightFogComponent.SetFogDensity
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetFogDensity(float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogDensity");

        UExponentialHeightFogComponent_SetFogDensity_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ExponentialHeightFogComponent.SetFogCutoffDistance
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetFogCutoffDistance(float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogCutoffDistance");

        UExponentialHeightFogComponent_SetFogCutoffDistance_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetDirectionalInscatteringStartDistance(float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance");

        UExponentialHeightFogComponent_SetDirectionalInscatteringStartDistance_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetDirectionalInscatteringExponent(float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent");

        UExponentialHeightFogComponent_SetDirectionalInscatteringExponent_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FLinearColor            Value                          (CPF_Parm, CPF_IsPlainOldData)

    void UExponentialHeightFogComponent::SetDirectionalInscatteringColor(const struct FLinearColor& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor");

        UExponentialHeightFogComponent_SetDirectionalInscatteringColor_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ForceFeedbackComponent.Stop
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UForceFeedbackComponent::Stop()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackComponent.Stop");

        UForceFeedbackComponent_Stop_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ForceFeedbackComponent.SetIntensityMultiplier
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewIntensityMultiplier         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UForceFeedbackComponent::SetIntensityMultiplier(float NewIntensityMultiplier)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackComponent.SetIntensityMultiplier");

        UForceFeedbackComponent_SetIntensityMultiplier_Params params;
        params.NewIntensityMultiplier = NewIntensityMultiplier;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ForceFeedbackComponent.SetForceFeedbackEffect
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UForceFeedbackEffect*    NewForceFeedbackEffect         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UForceFeedbackComponent::SetForceFeedbackEffect(class UForceFeedbackEffect* NewForceFeedbackEffect)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackComponent.SetForceFeedbackEffect");

        UForceFeedbackComponent_SetForceFeedbackEffect_Params params;
        params.NewForceFeedbackEffect = NewForceFeedbackEffect;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ForceFeedbackComponent.Play
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          StartTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UForceFeedbackComponent::Play(float StartTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackComponent.Play");

        UForceFeedbackComponent_Play_Params params;
        params.StartTime = StartTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FForceFeedbackAttenuationSettings OutAttenuationSettings         (CPF_Parm, CPF_OutParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UForceFeedbackComponent::BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings* OutAttenuationSettings)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply");

        UForceFeedbackComponent_BP_GetAttenuationSettingsToApply_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutAttenuationSettings != nullptr)
            *OutAttenuationSettings = params.OutAttenuationSettings;

        return params.ReturnValue;
    }


    // Function Engine.ForceFeedbackComponent.AdjustAttenuation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FForceFeedbackAttenuationSettings InAttenuationSettings          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void UForceFeedbackComponent::AdjustAttenuation(const struct FForceFeedbackAttenuationSettings& InAttenuationSettings)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackComponent.AdjustAttenuation");

        UForceFeedbackComponent_AdjustAttenuation_Params params;
        params.InAttenuationSettings = InAttenuationSettings;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponentBase.SetCastVolumetricShadow
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewValue                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ULightComponentBase::SetCastVolumetricShadow(bool bNewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.SetCastVolumetricShadow");

        ULightComponentBase_SetCastVolumetricShadow_Params params;
        params.bNewValue = bNewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponentBase.SetCastShadows
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewValue                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ULightComponentBase::SetCastShadows(bool bNewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.SetCastShadows");

        ULightComponentBase_SetCastShadows_Params params;
        params.bNewValue = bNewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponentBase.GetLightColor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FLinearColor            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FLinearColor ULightComponentBase::GetLightColor()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.GetLightColor");

        ULightComponentBase_GetLightColor_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.LightComponent.SetVolumetricScatteringIntensity
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewIntensity                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ULightComponent::SetVolumetricScatteringIntensity(float NewIntensity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetVolumetricScatteringIntensity");

        ULightComponent_SetVolumetricScatteringIntensity_Params params;
        params.NewIntensity = NewIntensity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponent.SetTemperature
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewTemperature                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ULightComponent::SetTemperature(float NewTemperature)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetTemperature");

        ULightComponent_SetTemperature_Params params;
        params.NewTemperature = NewTemperature;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponent.SetShadowBias
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ULightComponent::SetShadowBias(float NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetShadowBias");

        ULightComponent_SetShadowBias_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponent.SetLightFunctionScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewLightFunctionScale          (CPF_Parm, CPF_IsPlainOldData)

    void ULightComponent::SetLightFunctionScale(const struct FVector& NewLightFunctionScale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightFunctionScale");

        ULightComponent_SetLightFunctionScale_Params params;
        params.NewLightFunctionScale = NewLightFunctionScale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponent.SetLightFunctionMaterial
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterialInterface*      NewLightFunctionMaterial       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ULightComponent::SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightFunctionMaterial");

        ULightComponent_SetLightFunctionMaterial_Params params;
        params.NewLightFunctionMaterial = NewLightFunctionMaterial;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponent.SetLightFunctionFadeDistance
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewLightFunctionFadeDistance   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ULightComponent::SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightFunctionFadeDistance");

        ULightComponent_SetLightFunctionFadeDistance_Params params;
        params.NewLightFunctionFadeDistance = NewLightFunctionFadeDistance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponent.SetLightFunctionDisabledBrightness
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ULightComponent::SetLightFunctionDisabledBrightness(float NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightFunctionDisabledBrightness");

        ULightComponent_SetLightFunctionDisabledBrightness_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponent.SetLightColor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FLinearColor            NewLightColor                  (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bSRGB                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ULightComponent::SetLightColor(const struct FLinearColor& NewLightColor, bool bSRGB)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightColor");

        ULightComponent_SetLightColor_Params params;
        params.NewLightColor = NewLightColor;
        params.bSRGB = bSRGB;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponent.SetIntensity
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewIntensity                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ULightComponent::SetIntensity(float NewIntensity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetIntensity");

        ULightComponent_SetIntensity_Params params;
        params.NewIntensity = NewIntensity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponent.SetIndirectLightingIntensity
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewIntensity                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ULightComponent::SetIndirectLightingIntensity(float NewIntensity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetIndirectLightingIntensity");

        ULightComponent_SetIndirectLightingIntensity_Params params;
        params.NewIntensity = NewIntensity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponent.SetIESTexture
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UTextureLightProfile*    NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ULightComponent::SetIESTexture(class UTextureLightProfile* NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetIESTexture");

        ULightComponent_SetIESTexture_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewValue                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ULightComponent::SetForceCachedShadowsForMovablePrimitives(bool bNewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives");

        ULightComponent_SetForceCachedShadowsForMovablePrimitives_Params params;
        params.bNewValue = bNewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponent.SetEnableLightShaftBloom
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewValue                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ULightComponent::SetEnableLightShaftBloom(bool bNewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetEnableLightShaftBloom");

        ULightComponent_SetEnableLightShaftBloom_Params params;
        params.bNewValue = bNewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponent.SetBloomTint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FColor                  NewValue                       (CPF_Parm, CPF_IsPlainOldData)

    void ULightComponent::SetBloomTint(const struct FColor& NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetBloomTint");

        ULightComponent_SetBloomTint_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponent.SetBloomThreshold
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ULightComponent::SetBloomThreshold(float NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetBloomThreshold");

        ULightComponent_SetBloomThreshold_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponent.SetBloomScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ULightComponent::SetBloomScale(float NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetBloomScale");

        ULightComponent_SetBloomScale_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponent.SetAffectTranslucentLighting
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewValue                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ULightComponent::SetAffectTranslucentLighting(bool bNewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetAffectTranslucentLighting");

        ULightComponent_SetAffectTranslucentLighting_Params params;
        params.bNewValue = bNewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.LightComponent.SetAffectDynamicIndirectLighting
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewValue                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void ULightComponent::SetAffectDynamicIndirectLighting(bool bNewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetAffectDynamicIndirectLighting");

        ULightComponent_SetAffectDynamicIndirectLighting_Params params;
        params.bNewValue = bNewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UDirectionalLightComponent::SetShadowDistanceFadeoutFraction(float NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction");

        UDirectionalLightComponent_SetShadowDistanceFadeoutFraction_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UDirectionalLightComponent::SetOcclusionMaskDarkness(float NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness");

        UDirectionalLightComponent_SetOcclusionMaskDarkness_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 NewValue                       (CPF_Parm, CPF_IsPlainOldData)

    void UDirectionalLightComponent::SetLightShaftOverrideDirection(const struct FVector& NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection");

        UDirectionalLightComponent_SetLightShaftOverrideDirection_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewValue                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UDirectionalLightComponent::SetEnableLightShaftOcclusion(bool bNewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion");

        UDirectionalLightComponent_SetEnableLightShaftOcclusion_Params params;
        params.bNewValue = bNewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UDirectionalLightComponent::SetDynamicShadowDistanceStationaryLight(float NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight");

        UDirectionalLightComponent_SetDynamicShadowDistanceStationaryLight_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UDirectionalLightComponent::SetDynamicShadowDistanceMovableLight(float NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight");

        UDirectionalLightComponent_SetDynamicShadowDistanceMovableLight_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DirectionalLightComponent.SetDynamicShadowCascades
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UDirectionalLightComponent::SetDynamicShadowCascades(int NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetDynamicShadowCascades");

        UDirectionalLightComponent_SetDynamicShadowCascades_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UDirectionalLightComponent::SetCascadeTransitionFraction(float NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction");

        UDirectionalLightComponent_SetCascadeTransitionFraction_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UDirectionalLightComponent::SetCascadeDistributionExponent(float NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent");

        UDirectionalLightComponent_SetCascadeDistributionExponent_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PointLightComponent.SetSourceRadius
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          bNewValue                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPointLightComponent::SetSourceRadius(float bNewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetSourceRadius");

        UPointLightComponent_SetSourceRadius_Params params;
        params.bNewValue = bNewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PointLightComponent.SetSourceLength
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewValue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPointLightComponent::SetSourceLength(float NewValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetSourceLength");

        UPointLightComponent_SetSourceLength_Params params;
        params.NewValue = NewValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PointLightComponent.SetLightFalloffExponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewLightFalloffExponent        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPointLightComponent::SetLightFalloffExponent(float NewLightFalloffExponent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetLightFalloffExponent");

        UPointLightComponent_SetLightFalloffExponent_Params params;
        params.NewLightFalloffExponent = NewLightFalloffExponent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PointLightComponent.SetAttenuationRadius
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewRadius                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPointLightComponent::SetAttenuationRadius(float NewRadius)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetAttenuationRadius");

        UPointLightComponent_SetAttenuationRadius_Params params;
        params.NewRadius = NewRadius;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SpotLightComponent.SetOuterConeAngle
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewOuterConeAngle              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USpotLightComponent::SetOuterConeAngle(float NewOuterConeAngle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLightComponent.SetOuterConeAngle");

        USpotLightComponent_SetOuterConeAngle_Params params;
        params.NewOuterConeAngle = NewOuterConeAngle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SpotLightComponent.SetInnerConeAngle
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewInnerConeAngle              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USpotLightComponent::SetInnerConeAngle(float NewInnerConeAngle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLightComponent.SetInnerConeAngle");

        USpotLightComponent_SetInnerConeAngle_Params params;
        params.NewInnerConeAngle = NewInnerConeAngle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkyLightComponent.SetVolumetricScatteringIntensity
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewIntensity                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkyLightComponent::SetVolumetricScatteringIntensity(float NewIntensity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetVolumetricScatteringIntensity");

        USkyLightComponent_SetVolumetricScatteringIntensity_Params params;
        params.NewIntensity = NewIntensity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkyLightComponent.SetOcclusionTint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FColor                  InTint                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void USkyLightComponent::SetOcclusionTint(const struct FColor& InTint)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetOcclusionTint");

        USkyLightComponent_SetOcclusionTint_Params params;
        params.InTint = InTint;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkyLightComponent.SetOcclusionExponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InOcclusionExponent            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkyLightComponent::SetOcclusionExponent(float InOcclusionExponent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetOcclusionExponent");

        USkyLightComponent_SetOcclusionExponent_Params params;
        params.InOcclusionExponent = InOcclusionExponent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkyLightComponent.SetOcclusionContrast
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InOcclusionContrast            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkyLightComponent::SetOcclusionContrast(float InOcclusionContrast)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetOcclusionContrast");

        USkyLightComponent_SetOcclusionContrast_Params params;
        params.InOcclusionContrast = InOcclusionContrast;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkyLightComponent.SetMinOcclusion
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InMinOcclusion                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkyLightComponent::SetMinOcclusion(float InMinOcclusion)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetMinOcclusion");

        USkyLightComponent_SetMinOcclusion_Params params;
        params.InMinOcclusion = InMinOcclusion;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkyLightComponent.SetLightColor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FLinearColor            NewLightColor                  (CPF_Parm, CPF_IsPlainOldData)

    void USkyLightComponent::SetLightColor(const struct FLinearColor& NewLightColor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetLightColor");

        USkyLightComponent_SetLightColor_Params params;
        params.NewLightColor = NewLightColor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkyLightComponent.SetIntensity
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewIntensity                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkyLightComponent::SetIntensity(float NewIntensity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetIntensity");

        USkyLightComponent_SetIntensity_Params params;
        params.NewIntensity = NewIntensity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkyLightComponent.SetIndirectLightingIntensity
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewIntensity                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkyLightComponent::SetIndirectLightingIntensity(float NewIntensity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetIndirectLightingIntensity");

        USkyLightComponent_SetIndirectLightingIntensity_Params params;
        params.NewIntensity = NewIntensity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkyLightComponent.SetCubemapBlend
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UTextureCube*            SourceCubemap                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UTextureCube*            DestinationCubemap             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InBlendFraction                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkyLightComponent::SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetCubemapBlend");

        USkyLightComponent_SetCubemapBlend_Params params;
        params.SourceCubemap = SourceCubemap;
        params.DestinationCubemap = DestinationCubemap;
        params.InBlendFraction = InBlendFraction;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkyLightComponent.SetCubemap
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UTextureCube*            NewCubemap                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USkyLightComponent::SetCubemap(class UTextureCube* NewCubemap)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetCubemap");

        USkyLightComponent_SetCubemap_Params params;
        params.NewCubemap = NewCubemap;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkyLightComponent.RecaptureSky
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void USkyLightComponent::RecaptureSky()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.RecaptureSky");

        USkyLightComponent_RecaptureSky_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnableTwistDrive              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bEnableSwingDrive              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing");

        UPhysicsConstraintComponent_SetOrientationDriveTwistAndSwing_Params params;
        params.bEnableTwistDrive = bEnableTwistDrive;
        params.bEnableSwingDrive = bEnableSwingDrive;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnableSLERP                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetOrientationDriveSLERP(bool bEnableSLERP)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP");

        UPhysicsConstraintComponent_SetOrientationDriveSLERP_Params params;
        params.bEnableSLERP = bEnableSLERP;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetLinearZLimit
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<ELinearConstraintMotion> ConstraintType                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          LimitSize                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetLinearZLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearZLimit");

        UPhysicsConstraintComponent_SetLinearZLimit_Params params;
        params.ConstraintType = ConstraintType;
        params.LimitSize = LimitSize;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetLinearYLimit
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<ELinearConstraintMotion> ConstraintType                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          LimitSize                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetLinearYLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearYLimit");

        UPhysicsConstraintComponent_SetLinearYLimit_Params params;
        params.ConstraintType = ConstraintType;
        params.LimitSize = LimitSize;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetLinearXLimit
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<ELinearConstraintMotion> ConstraintType                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          LimitSize                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetLinearXLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearXLimit");

        UPhysicsConstraintComponent_SetLinearXLimit_Params params;
        params.ConstraintType = ConstraintType;
        params.LimitSize = LimitSize;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 InVelTarget                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetLinearVelocityTarget(const struct FVector& InVelTarget)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget");

        UPhysicsConstraintComponent_SetLinearVelocityTarget_Params params;
        params.InVelTarget = InVelTarget;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnableDriveX                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bEnableDriveY                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bEnableDriveZ                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive");

        UPhysicsConstraintComponent_SetLinearVelocityDrive_Params params;
        params.bEnableDriveX = bEnableDriveX;
        params.bEnableDriveY = bEnableDriveY;
        params.bEnableDriveZ = bEnableDriveZ;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 InPosTarget                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetLinearPositionTarget(const struct FVector& InPosTarget)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget");

        UPhysicsConstraintComponent_SetLinearPositionTarget_Params params;
        params.InPosTarget = InPosTarget;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnableDriveX                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bEnableDriveY                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bEnableDriveZ                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive");

        UPhysicsConstraintComponent_SetLinearPositionDrive_Params params;
        params.bEnableDriveX = bEnableDriveX;
        params.bEnableDriveY = bEnableDriveY;
        params.bEnableDriveZ = bEnableDriveZ;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetLinearDriveParams
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          PositionStrength               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          VelocityStrength               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InForceLimit                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearDriveParams");

        UPhysicsConstraintComponent_SetLinearDriveParams_Params params;
        params.PositionStrength = PositionStrength;
        params.VelocityStrength = VelocityStrength;
        params.InForceLimit = InForceLimit;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetDisableCollision
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bDisableCollision              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetDisableCollision(bool bDisableCollision)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetDisableCollision");

        UPhysicsConstraintComponent_SetDisableCollision_Params params;
        params.bDisableCollision = bDisableCollision;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<EConstraintFrame>  Frame                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 RefPosition                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetConstraintReferencePosition(TEnumAsByte<EConstraintFrame> Frame, const struct FVector& RefPosition)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition");

        UPhysicsConstraintComponent_SetConstraintReferencePosition_Params params;
        params.Frame = Frame;
        params.RefPosition = RefPosition;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<EConstraintFrame>  Frame                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 PriAxis                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 SecAxis                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetConstraintReferenceOrientation(TEnumAsByte<EConstraintFrame> Frame, const struct FVector& PriAxis, const struct FVector& SecAxis)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation");

        UPhysicsConstraintComponent_SetConstraintReferenceOrientation_Params params;
        params.Frame = Frame;
        params.PriAxis = PriAxis;
        params.SecAxis = SecAxis;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<EConstraintFrame>  Frame                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              RefFrame                       (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetConstraintReferenceFrame(TEnumAsByte<EConstraintFrame> Frame, const struct FTransform& RefFrame)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame");

        UPhysicsConstraintComponent_SetConstraintReferenceFrame_Params params;
        params.Frame = Frame;
        params.RefFrame = RefFrame;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetConstrainedComponents
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UPrimitiveComponent*     Component1                     (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   BoneName1                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UPrimitiveComponent*     Component2                     (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   BoneName2                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetConstrainedComponents(class UPrimitiveComponent* Component1, const struct FName& BoneName1, class UPrimitiveComponent* Component2, const struct FName& BoneName2)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetConstrainedComponents");

        UPhysicsConstraintComponent_SetConstrainedComponents_Params params;
        params.Component1 = Component1;
        params.BoneName1 = BoneName1;
        params.Component2 = Component2;
        params.BoneName2 = BoneName2;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 InVelTarget                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetAngularVelocityTarget(const struct FVector& InVelTarget)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget");

        UPhysicsConstraintComponent_SetAngularVelocityTarget_Params params;
        params.InVelTarget = InVelTarget;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnableTwistDrive              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bEnableSwingDrive              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing");

        UPhysicsConstraintComponent_SetAngularVelocityDriveTwistAndSwing_Params params;
        params.bEnableTwistDrive = bEnableTwistDrive;
        params.bEnableSwingDrive = bEnableSwingDrive;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnableSLERP                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetAngularVelocityDriveSLERP(bool bEnableSLERP)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP");

        UPhysicsConstraintComponent_SetAngularVelocityDriveSLERP_Params params;
        params.bEnableSLERP = bEnableSLERP;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnableSwingDrive              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bEnableTwistDrive              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive");

        UPhysicsConstraintComponent_SetAngularVelocityDrive_Params params;
        params.bEnableSwingDrive = bEnableSwingDrive;
        params.bEnableTwistDrive = bEnableTwistDrive;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<EAngularConstraintMotion> ConstraintType                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          TwistLimitAngle                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetAngularTwistLimit(TEnumAsByte<EAngularConstraintMotion> ConstraintType, float TwistLimitAngle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit");

        UPhysicsConstraintComponent_SetAngularTwistLimit_Params params;
        params.ConstraintType = ConstraintType;
        params.TwistLimitAngle = TwistLimitAngle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<EAngularConstraintMotion> MotionType                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Swing2LimitAngle               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetAngularSwing2Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing2LimitAngle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit");

        UPhysicsConstraintComponent_SetAngularSwing2Limit_Params params;
        params.MotionType = MotionType;
        params.Swing2LimitAngle = Swing2LimitAngle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<EAngularConstraintMotion> MotionType                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Swing1LimitAngle               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetAngularSwing1Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing1LimitAngle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit");

        UPhysicsConstraintComponent_SetAngularSwing1Limit_Params params;
        params.MotionType = MotionType;
        params.Swing1LimitAngle = Swing1LimitAngle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FRotator                InPosTarget                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetAngularOrientationTarget(const struct FRotator& InPosTarget)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget");

        UPhysicsConstraintComponent_SetAngularOrientationTarget_Params params;
        params.InPosTarget = InPosTarget;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnableSwingDrive              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bEnableTwistDrive              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive");

        UPhysicsConstraintComponent_SetAngularOrientationDrive_Params params;
        params.bEnableSwingDrive = bEnableSwingDrive;
        params.bEnableTwistDrive = bEnableTwistDrive;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetAngularDriveParams
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          PositionStrength               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          VelocityStrength               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InForceLimit                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularDriveParams");

        UPhysicsConstraintComponent_SetAngularDriveParams_Params params;
        params.PositionStrength = PositionStrength;
        params.VelocityStrength = VelocityStrength;
        params.InForceLimit = InForceLimit;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.SetAngularDriveMode
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<EAngularDriveMode> DriveMode                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::SetAngularDriveMode(TEnumAsByte<EAngularDriveMode> DriveMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularDriveMode");

        UPhysicsConstraintComponent_SetAngularDriveMode_Params params;
        params.DriveMode = DriveMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsConstraintComponent.GetCurrentTwist
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UPhysicsConstraintComponent::GetCurrentTwist()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.GetCurrentTwist");

        UPhysicsConstraintComponent_GetCurrentTwist_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PhysicsConstraintComponent.GetCurrentSwing2
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UPhysicsConstraintComponent::GetCurrentSwing2()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.GetCurrentSwing2");

        UPhysicsConstraintComponent_GetCurrentSwing2_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PhysicsConstraintComponent.GetCurrentSwing1
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UPhysicsConstraintComponent::GetCurrentSwing1()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.GetCurrentSwing1");

        UPhysicsConstraintComponent_GetCurrentSwing1_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PhysicsConstraintComponent.GetConstraintForce
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 OutLinearForce                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 OutAngularForce                (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void UPhysicsConstraintComponent::GetConstraintForce(struct FVector* OutLinearForce, struct FVector* OutAngularForce)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.GetConstraintForce");

        UPhysicsConstraintComponent_GetConstraintForce_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutLinearForce != nullptr)
            *OutLinearForce = params.OutLinearForce;
        if (OutAngularForce != nullptr)
            *OutAngularForce = params.OutAngularForce;
    }


    // Function Engine.PhysicsConstraintComponent.BreakConstraint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UPhysicsConstraintComponent::BreakConstraint()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.BreakConstraint");

        UPhysicsConstraintComponent_BreakConstraint_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PhysicsSpringComponent.GetSpringRestingPoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UPhysicsSpringComponent::GetSpringRestingPoint()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsSpringComponent.GetSpringRestingPoint");

        UPhysicsSpringComponent_GetSpringRestingPoint_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PhysicsSpringComponent.GetSpringDirection
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UPhysicsSpringComponent::GetSpringDirection()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsSpringComponent.GetSpringDirection");

        UPhysicsSpringComponent_GetSpringDirection_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UPhysicsSpringComponent::GetSpringCurrentEndPoint()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint");

        UPhysicsSpringComponent_GetSpringCurrentEndPoint_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UPhysicsSpringComponent::GetNormalizedCompressionScalar()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar");

        UPhysicsSpringComponent_GetNormalizedCompressionScalar_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PostProcessComponent.AddOrUpdateBlendable
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TScriptInterface<class UBlendableInterface> InBlendableObject              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InWeight                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPostProcessComponent::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PostProcessComponent.AddOrUpdateBlendable");

        UPostProcessComponent_AddOrUpdateBlendable_Params params;
        params.InBlendableObject = InBlendableObject;
        params.InWeight = InWeight;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.ArrowComponent.SetArrowColor
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FLinearColor            NewColor                       (CPF_Parm, CPF_IsPlainOldData)

    void UArrowComponent::SetArrowColor(const struct FLinearColor& NewColor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.ArrowComponent.SetArrowColor");

        UArrowComponent_SetArrowColor_Params params;
        params.NewColor = NewColor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.BillboardComponent.SetUV
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            NewU                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            NewUL                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            NewV                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            NewVL                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UBillboardComponent::SetUV(int NewU, int NewUL, int NewV, int NewVL)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BillboardComponent.SetUV");

        UBillboardComponent_SetUV_Params params;
        params.NewU = NewU;
        params.NewUL = NewUL;
        params.NewV = NewV;
        params.NewVL = NewVL;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.BillboardComponent.SetSpriteAndUV
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UTexture2D*              NewSprite                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            NewU                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            NewUL                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            NewV                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            NewVL                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UBillboardComponent::SetSpriteAndUV(class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BillboardComponent.SetSpriteAndUV");

        UBillboardComponent_SetSpriteAndUV_Params params;
        params.NewSprite = NewSprite;
        params.NewU = NewU;
        params.NewUL = NewUL;
        params.NewV = NewV;
        params.NewVL = NewVL;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.BillboardComponent.SetSprite
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UTexture2D*              NewSprite                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UBillboardComponent::SetSprite(class UTexture2D* NewSprite)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BillboardComponent.SetSprite");

        UBillboardComponent_SetSprite_Params params;
        params.NewSprite = NewSprite;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MaterialBillboardComponent.SetElements
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<struct FMaterialSpriteElement> NewElements                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)

    void UMaterialBillboardComponent::SetElements(TArray<struct FMaterialSpriteElement> NewElements)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialBillboardComponent.SetElements");

        UMaterialBillboardComponent_SetElements_Params params;
        params.NewElements = NewElements;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MaterialBillboardComponent.AddElement
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterialInterface*      Material                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UCurveFloat*             DistanceToOpacityCurve         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bSizeIsInScreenSpace           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BaseSizeX                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BaseSizeY                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UCurveFloat*             DistanceToSizeCurve            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UMaterialBillboardComponent::AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialBillboardComponent.AddElement");

        UMaterialBillboardComponent_AddElement_Params params;
        params.Material = Material;
        params.DistanceToOpacityCurve = DistanceToOpacityCurve;
        params.bSizeIsInScreenSpace = bSizeIsInScreenSpace;
        params.BaseSizeX = BaseSizeX;
        params.BaseSizeY = BaseSizeY;
        params.DistanceToSizeCurve = DistanceToSizeCurve;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DestructibleComponent.SetDestructibleMesh
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UDestructibleMesh*       NewMesh                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UDestructibleComponent::SetDestructibleMesh(class UDestructibleMesh* NewMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DestructibleComponent.SetDestructibleMesh");

        UDestructibleComponent_SetDestructibleMesh_Params params;
        params.NewMesh = NewMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DestructibleComponent.GetDestructibleMesh
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UDestructibleMesh*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UDestructibleMesh* UDestructibleComponent::GetDestructibleMesh()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DestructibleComponent.GetDestructibleMesh");

        UDestructibleComponent_GetDestructibleMesh_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.DestructibleComponent.ApplyRadiusDamage
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // float                          BaseDamage                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 HurtOrigin                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          DamageRadius                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ImpulseStrength                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bFullDamage                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UDestructibleComponent::ApplyRadiusDamage(float BaseDamage, const struct FVector& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DestructibleComponent.ApplyRadiusDamage");

        UDestructibleComponent_ApplyRadiusDamage_Params params;
        params.BaseDamage = BaseDamage;
        params.HurtOrigin = HurtOrigin;
        params.DamageRadius = DamageRadius;
        params.ImpulseStrength = ImpulseStrength;
        params.bFullDamage = bFullDamage;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.DestructibleComponent.ApplyDamage
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // float                          DamageAmount                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 HitLocation                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 ImpulseDir                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          ImpulseStrength                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UDestructibleComponent::ApplyDamage(float DamageAmount, const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DestructibleComponent.ApplyDamage");

        UDestructibleComponent_ApplyDamage_Params params;
        params.DamageAmount = DamageAmount;
        params.HitLocation = HitLocation;
        params.ImpulseDir = ImpulseDir;
        params.ImpulseStrength = ImpulseStrength;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PoseableMeshComponent.SetBoneTransformByName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              InTransform                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TEnumAsByte<EBoneSpaces>       BoneSpace                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPoseableMeshComponent::SetBoneTransformByName(const struct FName& BoneName, const struct FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.SetBoneTransformByName");

        UPoseableMeshComponent_SetBoneTransformByName_Params params;
        params.BoneName = BoneName;
        params.InTransform = InTransform;
        params.BoneSpace = BoneSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PoseableMeshComponent.SetBoneScaleByName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 InScale3D                      (CPF_Parm, CPF_IsPlainOldData)
    // TEnumAsByte<EBoneSpaces>       BoneSpace                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPoseableMeshComponent::SetBoneScaleByName(const struct FName& BoneName, const struct FVector& InScale3D, TEnumAsByte<EBoneSpaces> BoneSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.SetBoneScaleByName");

        UPoseableMeshComponent_SetBoneScaleByName_Params params;
        params.BoneName = BoneName;
        params.InScale3D = InScale3D;
        params.BoneSpace = BoneSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PoseableMeshComponent.SetBoneRotationByName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                InRotation                     (CPF_Parm, CPF_IsPlainOldData)
    // TEnumAsByte<EBoneSpaces>       BoneSpace                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPoseableMeshComponent::SetBoneRotationByName(const struct FName& BoneName, const struct FRotator& InRotation, TEnumAsByte<EBoneSpaces> BoneSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.SetBoneRotationByName");

        UPoseableMeshComponent_SetBoneRotationByName_Params params;
        params.BoneName = BoneName;
        params.InRotation = InRotation;
        params.BoneSpace = BoneSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PoseableMeshComponent.SetBoneLocationByName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 InLocation                     (CPF_Parm, CPF_IsPlainOldData)
    // TEnumAsByte<EBoneSpaces>       BoneSpace                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPoseableMeshComponent::SetBoneLocationByName(const struct FName& BoneName, const struct FVector& InLocation, TEnumAsByte<EBoneSpaces> BoneSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.SetBoneLocationByName");

        UPoseableMeshComponent_SetBoneLocationByName_Params params;
        params.BoneName = BoneName;
        params.InLocation = InLocation;
        params.BoneSpace = BoneSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PoseableMeshComponent.ResetBoneTransformByName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPoseableMeshComponent::ResetBoneTransformByName(const struct FName& BoneName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.ResetBoneTransformByName");

        UPoseableMeshComponent_ResetBoneTransformByName_Params params;
        params.BoneName = BoneName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.PoseableMeshComponent.GetBoneTransformByName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EBoneSpaces>       BoneSpace                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FTransform UPoseableMeshComponent::GetBoneTransformByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.GetBoneTransformByName");

        UPoseableMeshComponent_GetBoneTransformByName_Params params;
        params.BoneName = BoneName;
        params.BoneSpace = BoneSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PoseableMeshComponent.GetBoneScaleByName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EBoneSpaces>       BoneSpace                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UPoseableMeshComponent::GetBoneScaleByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.GetBoneScaleByName");

        UPoseableMeshComponent_GetBoneScaleByName_Params params;
        params.BoneName = BoneName;
        params.BoneSpace = BoneSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PoseableMeshComponent.GetBoneRotationByName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EBoneSpaces>       BoneSpace                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UPoseableMeshComponent::GetBoneRotationByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.GetBoneRotationByName");

        UPoseableMeshComponent_GetBoneRotationByName_Params params;
        params.BoneName = BoneName;
        params.BoneSpace = BoneSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PoseableMeshComponent.GetBoneLocationByName
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   BoneName                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EBoneSpaces>       BoneSpace                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UPoseableMeshComponent::GetBoneLocationByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.GetBoneLocationByName");

        UPoseableMeshComponent_GetBoneLocationByName_Params params;
        params.BoneName = BoneName;
        params.BoneSpace = BoneSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PoseableMeshComponent.CopyPoseFromSkeletalComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class USkeletalMeshComponent*  InComponentToCopy              (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

    void UPoseableMeshComponent::CopyPoseFromSkeletalComponent(class USkeletalMeshComponent* InComponentToCopy)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.CopyPoseFromSkeletalComponent");

        UPoseableMeshComponent_CopyPoseFromSkeletalComponent_Params params;
        params.InComponentToCopy = InComponentToCopy;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineMeshComponent.UpdateMesh
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void USplineMeshComponent::UpdateMesh()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.UpdateMesh");

        USplineMeshComponent_UpdateMesh_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineMeshComponent.SetStartTangent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 StartTangent                   (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bUpdateMesh                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineMeshComponent::SetStartTangent(const struct FVector& StartTangent, bool bUpdateMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartTangent");

        USplineMeshComponent_SetStartTangent_Params params;
        params.StartTangent = StartTangent;
        params.bUpdateMesh = bUpdateMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineMeshComponent.SetStartScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector2D               StartScale                     (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bUpdateMesh                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineMeshComponent::SetStartScale(const struct FVector2D& StartScale, bool bUpdateMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartScale");

        USplineMeshComponent_SetStartScale_Params params;
        params.StartScale = StartScale;
        params.bUpdateMesh = bUpdateMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineMeshComponent.SetStartRoll
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          StartRoll                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateMesh                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineMeshComponent::SetStartRoll(float StartRoll, bool bUpdateMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartRoll");

        USplineMeshComponent_SetStartRoll_Params params;
        params.StartRoll = StartRoll;
        params.bUpdateMesh = bUpdateMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineMeshComponent.SetStartPosition
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 StartPos                       (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bUpdateMesh                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineMeshComponent::SetStartPosition(const struct FVector& StartPos, bool bUpdateMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartPosition");

        USplineMeshComponent_SetStartPosition_Params params;
        params.StartPos = StartPos;
        params.bUpdateMesh = bUpdateMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineMeshComponent.SetStartOffset
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector2D               StartOffset                    (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bUpdateMesh                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineMeshComponent::SetStartOffset(const struct FVector2D& StartOffset, bool bUpdateMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartOffset");

        USplineMeshComponent_SetStartOffset_Params params;
        params.StartOffset = StartOffset;
        params.bUpdateMesh = bUpdateMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineMeshComponent.SetStartAndEnd
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 StartPos                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 StartTangent                   (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 EndPos                         (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 EndTangent                     (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bUpdateMesh                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineMeshComponent::SetStartAndEnd(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent, bool bUpdateMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartAndEnd");

        USplineMeshComponent_SetStartAndEnd_Params params;
        params.StartPos = StartPos;
        params.StartTangent = StartTangent;
        params.EndPos = EndPos;
        params.EndTangent = EndTangent;
        params.bUpdateMesh = bUpdateMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineMeshComponent.SetSplineUpDir
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 InSplineUpDir                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bUpdateMesh                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineMeshComponent::SetSplineUpDir(const struct FVector& InSplineUpDir, bool bUpdateMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetSplineUpDir");

        USplineMeshComponent_SetSplineUpDir_Params params;
        params.InSplineUpDir = InSplineUpDir;
        params.bUpdateMesh = bUpdateMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineMeshComponent.SetForwardAxis
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<ESplineMeshAxis>   InForwardAxis                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateMesh                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineMeshComponent::SetForwardAxis(TEnumAsByte<ESplineMeshAxis> InForwardAxis, bool bUpdateMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetForwardAxis");

        USplineMeshComponent_SetForwardAxis_Params params;
        params.InForwardAxis = InForwardAxis;
        params.bUpdateMesh = bUpdateMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineMeshComponent.SetEndTangent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 EndTangent                     (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bUpdateMesh                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineMeshComponent::SetEndTangent(const struct FVector& EndTangent, bool bUpdateMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndTangent");

        USplineMeshComponent_SetEndTangent_Params params;
        params.EndTangent = EndTangent;
        params.bUpdateMesh = bUpdateMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineMeshComponent.SetEndScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector2D               EndScale                       (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bUpdateMesh                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineMeshComponent::SetEndScale(const struct FVector2D& EndScale, bool bUpdateMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndScale");

        USplineMeshComponent_SetEndScale_Params params;
        params.EndScale = EndScale;
        params.bUpdateMesh = bUpdateMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineMeshComponent.SetEndRoll
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          EndRoll                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateMesh                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineMeshComponent::SetEndRoll(float EndRoll, bool bUpdateMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndRoll");

        USplineMeshComponent_SetEndRoll_Params params;
        params.EndRoll = EndRoll;
        params.bUpdateMesh = bUpdateMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineMeshComponent.SetEndPosition
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 EndPos                         (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bUpdateMesh                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineMeshComponent::SetEndPosition(const struct FVector& EndPos, bool bUpdateMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndPosition");

        USplineMeshComponent_SetEndPosition_Params params;
        params.EndPos = EndPos;
        params.bUpdateMesh = bUpdateMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineMeshComponent.SetEndOffset
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector2D               EndOffset                      (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bUpdateMesh                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineMeshComponent::SetEndOffset(const struct FVector2D& EndOffset, bool bUpdateMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndOffset");

        USplineMeshComponent_SetEndOffset_Params params;
        params.EndOffset = EndOffset;
        params.bUpdateMesh = bUpdateMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineMeshComponent.SetBoundaryMin
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InBoundaryMin                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateMesh                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineMeshComponent::SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetBoundaryMin");

        USplineMeshComponent_SetBoundaryMin_Params params;
        params.InBoundaryMin = InBoundaryMin;
        params.bUpdateMesh = bUpdateMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineMeshComponent.SetBoundaryMax
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InBoundaryMax                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateMesh                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineMeshComponent::SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetBoundaryMax");

        USplineMeshComponent_SetBoundaryMax_Params params;
        params.InBoundaryMax = InBoundaryMax;
        params.bUpdateMesh = bUpdateMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineMeshComponent.GetStartTangent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineMeshComponent::GetStartTangent()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartTangent");

        USplineMeshComponent_GetStartTangent_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineMeshComponent.GetStartScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D USplineMeshComponent::GetStartScale()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartScale");

        USplineMeshComponent_GetStartScale_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineMeshComponent.GetStartRoll
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USplineMeshComponent::GetStartRoll()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartRoll");

        USplineMeshComponent_GetStartRoll_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineMeshComponent.GetStartPosition
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineMeshComponent::GetStartPosition()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartPosition");

        USplineMeshComponent_GetStartPosition_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineMeshComponent.GetStartOffset
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D USplineMeshComponent::GetStartOffset()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartOffset");

        USplineMeshComponent_GetStartOffset_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineMeshComponent.GetSplineUpDir
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineMeshComponent::GetSplineUpDir()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetSplineUpDir");

        USplineMeshComponent_GetSplineUpDir_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineMeshComponent.GetForwardAxis
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TEnumAsByte<ESplineMeshAxis>   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    TEnumAsByte<ESplineMeshAxis> USplineMeshComponent::GetForwardAxis()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetForwardAxis");

        USplineMeshComponent_GetForwardAxis_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineMeshComponent.GetEndTangent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineMeshComponent::GetEndTangent()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndTangent");

        USplineMeshComponent_GetEndTangent_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineMeshComponent.GetEndScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D USplineMeshComponent::GetEndScale()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndScale");

        USplineMeshComponent_GetEndScale_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineMeshComponent.GetEndRoll
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USplineMeshComponent::GetEndRoll()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndRoll");

        USplineMeshComponent_GetEndRoll_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineMeshComponent.GetEndPosition
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineMeshComponent::GetEndPosition()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndPosition");

        USplineMeshComponent_GetEndPosition_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineMeshComponent.GetEndOffset
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D USplineMeshComponent::GetEndOffset()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndOffset");

        USplineMeshComponent_GetEndOffset_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineMeshComponent.GetBoundaryMin
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USplineMeshComponent::GetBoundaryMin()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetBoundaryMin");

        USplineMeshComponent_GetBoundaryMin_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineMeshComponent.GetBoundaryMax
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USplineMeshComponent::GetBoundaryMax()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetBoundaryMax");

        USplineMeshComponent_GetBoundaryMax_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CapsuleComponent.SetCapsuleSize
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InRadius                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InHalfHeight                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateOverlaps                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCapsuleComponent::SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.SetCapsuleSize");

        UCapsuleComponent_SetCapsuleSize_Params params;
        params.InRadius = InRadius;
        params.InHalfHeight = InHalfHeight;
        params.bUpdateOverlaps = bUpdateOverlaps;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CapsuleComponent.SetCapsuleRadius
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateOverlaps                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCapsuleComponent::SetCapsuleRadius(float Radius, bool bUpdateOverlaps)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.SetCapsuleRadius");

        UCapsuleComponent_SetCapsuleRadius_Params params;
        params.Radius = Radius;
        params.bUpdateOverlaps = bUpdateOverlaps;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CapsuleComponent.SetCapsuleHalfHeight
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          HalfHeight                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateOverlaps                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCapsuleComponent::SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.SetCapsuleHalfHeight");

        UCapsuleComponent_SetCapsuleHalfHeight_Params params;
        params.HalfHeight = HalfHeight;
        params.bUpdateOverlaps = bUpdateOverlaps;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          OutRadius                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OutHalfHeightWithoutHemisphere (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCapsuleComponent::GetUnscaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere");

        UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphere_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutRadius != nullptr)
            *OutRadius = params.OutRadius;
        if (OutHalfHeightWithoutHemisphere != nullptr)
            *OutHalfHeightWithoutHemisphere = params.OutHalfHeightWithoutHemisphere;
    }


    // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          OutRadius                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OutHalfHeight                  (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCapsuleComponent::GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetUnscaledCapsuleSize");

        UCapsuleComponent_GetUnscaledCapsuleSize_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutRadius != nullptr)
            *OutRadius = params.OutRadius;
        if (OutHalfHeight != nullptr)
            *OutHalfHeight = params.OutHalfHeight;
    }


    // Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCapsuleComponent::GetUnscaledCapsuleRadius()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius");

        UCapsuleComponent_GetUnscaledCapsuleRadius_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCapsuleComponent::GetUnscaledCapsuleHalfHeight_WithoutHemisphere()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere");

        UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCapsuleComponent::GetUnscaledCapsuleHalfHeight()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight");

        UCapsuleComponent_GetUnscaledCapsuleHalfHeight_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CapsuleComponent.GetShapeScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCapsuleComponent::GetShapeScale()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetShapeScale");

        UCapsuleComponent_GetShapeScale_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          OutRadius                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OutHalfHeightWithoutHemisphere (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCapsuleComponent::GetScaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere");

        UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphere_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutRadius != nullptr)
            *OutRadius = params.OutRadius;
        if (OutHalfHeightWithoutHemisphere != nullptr)
            *OutHalfHeightWithoutHemisphere = params.OutHalfHeightWithoutHemisphere;
    }


    // Function Engine.CapsuleComponent.GetScaledCapsuleSize
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          OutRadius                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OutHalfHeight                  (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCapsuleComponent::GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetScaledCapsuleSize");

        UCapsuleComponent_GetScaledCapsuleSize_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutRadius != nullptr)
            *OutRadius = params.OutRadius;
        if (OutHalfHeight != nullptr)
            *OutHalfHeight = params.OutHalfHeight;
    }


    // Function Engine.CapsuleComponent.GetScaledCapsuleRadius
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCapsuleComponent::GetScaledCapsuleRadius()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetScaledCapsuleRadius");

        UCapsuleComponent_GetScaledCapsuleRadius_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCapsuleComponent::GetScaledCapsuleHalfHeight_WithoutHemisphere()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere");

        UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCapsuleComponent::GetScaledCapsuleHalfHeight()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight");

        UCapsuleComponent_GetScaledCapsuleHalfHeight_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SphereComponent.SetSphereRadius
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InSphereRadius                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateOverlaps                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USphereComponent::SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SphereComponent.SetSphereRadius");

        USphereComponent_SetSphereRadius_Params params;
        params.InSphereRadius = InSphereRadius;
        params.bUpdateOverlaps = bUpdateOverlaps;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SphereComponent.GetUnscaledSphereRadius
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USphereComponent::GetUnscaledSphereRadius()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SphereComponent.GetUnscaledSphereRadius");

        USphereComponent_GetUnscaledSphereRadius_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SphereComponent.GetShapeScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USphereComponent::GetShapeScale()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SphereComponent.GetShapeScale");

        USphereComponent_GetShapeScale_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SphereComponent.GetScaledSphereRadius
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USphereComponent::GetScaledSphereRadius()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SphereComponent.GetScaledSphereRadius");

        USphereComponent_GetScaledSphereRadius_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.UpdateSpline
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void USplineComponent::UpdateSpline()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.UpdateSpline");

        USplineComponent_UpdateSpline_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.SetWorldLocationAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 InLocation                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void USplineComponent::SetWorldLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetWorldLocationAtSplinePoint");

        USplineComponent_SetWorldLocationAtSplinePoint_Params params;
        params.PointIndex = PointIndex;
        params.InLocation = InLocation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.SetUpVectorAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 InUpVector                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateSpline                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineComponent::SetUpVectorAtSplinePoint(int PointIndex, const struct FVector& InUpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetUpVectorAtSplinePoint");

        USplineComponent_SetUpVectorAtSplinePoint_Params params;
        params.PointIndex = PointIndex;
        params.InUpVector = InUpVector;
        params.CoordinateSpace = CoordinateSpace;
        params.bUpdateSpline = bUpdateSpline;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.SetUnselectedSplineSegmentColor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FLinearColor            SegmentColor                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void USplineComponent::SetUnselectedSplineSegmentColor(const struct FLinearColor& SegmentColor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetUnselectedSplineSegmentColor");

        USplineComponent_SetUnselectedSplineSegmentColor_Params params;
        params.SegmentColor = SegmentColor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.SetTangentsAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 InArriveTangent                (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 InLeaveTangent                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateSpline                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineComponent::SetTangentsAtSplinePoint(int PointIndex, const struct FVector& InArriveTangent, const struct FVector& InLeaveTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetTangentsAtSplinePoint");

        USplineComponent_SetTangentsAtSplinePoint_Params params;
        params.PointIndex = PointIndex;
        params.InArriveTangent = InArriveTangent;
        params.InLeaveTangent = InLeaveTangent;
        params.CoordinateSpace = CoordinateSpace;
        params.bUpdateSpline = bUpdateSpline;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.SetTangentAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 InTangent                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateSpline                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineComponent::SetTangentAtSplinePoint(int PointIndex, const struct FVector& InTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetTangentAtSplinePoint");

        USplineComponent_SetTangentAtSplinePoint_Params params;
        params.PointIndex = PointIndex;
        params.InTangent = InTangent;
        params.CoordinateSpace = CoordinateSpace;
        params.bUpdateSpline = bUpdateSpline;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.SetSplineWorldPoints
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<struct FVector>         Points                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)

    void USplineComponent::SetSplineWorldPoints(TArray<struct FVector> Points)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSplineWorldPoints");

        USplineComponent_SetSplineWorldPoints_Params params;
        params.Points = Points;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.SetSplinePointType
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplinePointType>  Type                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateSpline                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineComponent::SetSplinePointType(int PointIndex, TEnumAsByte<ESplinePointType> Type, bool bUpdateSpline)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSplinePointType");

        USplineComponent_SetSplinePointType_Params params;
        params.PointIndex = PointIndex;
        params.Type = Type;
        params.bUpdateSpline = bUpdateSpline;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.SetSplinePoints
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<struct FVector>         Points                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateSpline                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineComponent::SetSplinePoints(TArray<struct FVector> Points, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSplinePoints");

        USplineComponent_SetSplinePoints_Params params;
        params.Points = Points;
        params.CoordinateSpace = CoordinateSpace;
        params.bUpdateSpline = bUpdateSpline;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.SetSplineLocalPoints
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<struct FVector>         Points                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)

    void USplineComponent::SetSplineLocalPoints(TArray<struct FVector> Points)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSplineLocalPoints");

        USplineComponent_SetSplineLocalPoints_Params params;
        params.Points = Points;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.SetSelectedSplineSegmentColor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FLinearColor            SegmentColor                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void USplineComponent::SetSelectedSplineSegmentColor(const struct FLinearColor& SegmentColor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSelectedSplineSegmentColor");

        USplineComponent_SetSelectedSplineSegmentColor_Params params;
        params.SegmentColor = SegmentColor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.SetLocationAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 InLocation                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateSpline                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineComponent::SetLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetLocationAtSplinePoint");

        USplineComponent_SetLocationAtSplinePoint_Params params;
        params.PointIndex = PointIndex;
        params.InLocation = InLocation;
        params.CoordinateSpace = CoordinateSpace;
        params.bUpdateSpline = bUpdateSpline;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.SetDrawDebug
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bShow                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineComponent::SetDrawDebug(bool bShow)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetDrawDebug");

        USplineComponent_SetDrawDebug_Params params;
        params.bShow = bShow;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.SetDefaultUpVector
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 UpVector                       (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineComponent::SetDefaultUpVector(const struct FVector& UpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetDefaultUpVector");

        USplineComponent_SetDefaultUpVector_Params params;
        params.UpVector = UpVector;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.SetClosedLoopAtPosition
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bInClosedLoop                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Key                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateSpline                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineComponent::SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetClosedLoopAtPosition");

        USplineComponent_SetClosedLoopAtPosition_Params params;
        params.bInClosedLoop = bInClosedLoop;
        params.Key = Key;
        params.bUpdateSpline = bUpdateSpline;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.SetClosedLoop
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bInClosedLoop                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateSpline                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineComponent::SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetClosedLoop");

        USplineComponent_SetClosedLoop_Params params;
        params.bInClosedLoop = bInClosedLoop;
        params.bUpdateSpline = bUpdateSpline;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.RemoveSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Index                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateSpline                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineComponent::RemoveSplinePoint(int Index, bool bUpdateSpline)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.RemoveSplinePoint");

        USplineComponent_RemoveSplinePoint_Params params;
        params.Index = Index;
        params.bUpdateSpline = bUpdateSpline;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.IsClosedLoop
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool USplineComponent::IsClosedLoop()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.IsClosedLoop");

        USplineComponent_IsClosedLoop_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Distance                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetWorldTangentAtDistanceAlongSpline(float Distance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline");

        USplineComponent_GetWorldTangentAtDistanceAlongSpline_Params params;
        params.Distance = Distance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetWorldRotationAtTime
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseConstantVelocity           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator USplineComponent::GetWorldRotationAtTime(float Time, bool bUseConstantVelocity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldRotationAtTime");

        USplineComponent_GetWorldRotationAtTime_Params params;
        params.Time = Time;
        params.bUseConstantVelocity = bUseConstantVelocity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Distance                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator USplineComponent::GetWorldRotationAtDistanceAlongSpline(float Distance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline");

        USplineComponent_GetWorldRotationAtDistanceAlongSpline_Params params;
        params.Distance = Distance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetWorldLocationAtTime
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseConstantVelocity           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetWorldLocationAtTime(float Time, bool bUseConstantVelocity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldLocationAtTime");

        USplineComponent_GetWorldLocationAtTime_Params params;
        params.Time = Time;
        params.bUseConstantVelocity = bUseConstantVelocity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetWorldLocationAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetWorldLocationAtSplinePoint(int PointIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldLocationAtSplinePoint");

        USplineComponent_GetWorldLocationAtSplinePoint_Params params;
        params.PointIndex = PointIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Distance                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetWorldLocationAtDistanceAlongSpline(float Distance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline");

        USplineComponent_GetWorldLocationAtDistanceAlongSpline_Params params;
        params.Distance = Distance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetWorldDirectionAtTime
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseConstantVelocity           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldDirectionAtTime");

        USplineComponent_GetWorldDirectionAtTime_Params params;
        params.Time = Time;
        params.bUseConstantVelocity = bUseConstantVelocity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Distance                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetWorldDirectionAtDistanceAlongSpline(float Distance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline");

        USplineComponent_GetWorldDirectionAtDistanceAlongSpline_Params params;
        params.Distance = Distance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetUpVectorAtTime
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseConstantVelocity           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetUpVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetUpVectorAtTime");

        USplineComponent_GetUpVectorAtTime_Params params;
        params.Time = Time;
        params.CoordinateSpace = CoordinateSpace;
        params.bUseConstantVelocity = bUseConstantVelocity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetUpVectorAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetUpVectorAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetUpVectorAtSplinePoint");

        USplineComponent_GetUpVectorAtSplinePoint_Params params;
        params.PointIndex = PointIndex;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Distance                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline");

        USplineComponent_GetUpVectorAtDistanceAlongSpline_Params params;
        params.Distance = Distance;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetTransformAtTime
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseConstantVelocity           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseScale                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FTransform USplineComponent::GetTransformAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTransformAtTime");

        USplineComponent_GetTransformAtTime_Params params;
        params.Time = Time;
        params.CoordinateSpace = CoordinateSpace;
        params.bUseConstantVelocity = bUseConstantVelocity;
        params.bUseScale = bUseScale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetTransformAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseScale                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FTransform USplineComponent::GetTransformAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTransformAtSplinePoint");

        USplineComponent_GetTransformAtSplinePoint_Params params;
        params.PointIndex = PointIndex;
        params.CoordinateSpace = CoordinateSpace;
        params.bUseScale = bUseScale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Distance                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseScale                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FTransform USplineComponent::GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline");

        USplineComponent_GetTransformAtDistanceAlongSpline_Params params;
        params.Distance = Distance;
        params.CoordinateSpace = CoordinateSpace;
        params.bUseScale = bUseScale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetTangentAtTime
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseConstantVelocity           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetTangentAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTangentAtTime");

        USplineComponent_GetTangentAtTime_Params params;
        params.Time = Time;
        params.CoordinateSpace = CoordinateSpace;
        params.bUseConstantVelocity = bUseConstantVelocity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetTangentAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTangentAtSplinePoint");

        USplineComponent_GetTangentAtSplinePoint_Params params;
        params.PointIndex = PointIndex;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Distance                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline");

        USplineComponent_GetTangentAtDistanceAlongSpline_Params params;
        params.Distance = Distance;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetSplinePointType
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplinePointType>  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    TEnumAsByte<ESplinePointType> USplineComponent::GetSplinePointType(int PointIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetSplinePointType");

        USplineComponent_GetSplinePointType_Params params;
        params.PointIndex = PointIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetSplineLength
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USplineComponent::GetSplineLength()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetSplineLength");

        USplineComponent_GetSplineLength_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetScaleAtTime
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseConstantVelocity           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetScaleAtTime(float Time, bool bUseConstantVelocity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetScaleAtTime");

        USplineComponent_GetScaleAtTime_Params params;
        params.Time = Time;
        params.bUseConstantVelocity = bUseConstantVelocity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetScaleAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetScaleAtSplinePoint(int PointIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetScaleAtSplinePoint");

        USplineComponent_GetScaleAtSplinePoint_Params params;
        params.PointIndex = PointIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Distance                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetScaleAtDistanceAlongSpline(float Distance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline");

        USplineComponent_GetScaleAtDistanceAlongSpline_Params params;
        params.Distance = Distance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetRotationAtTime
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseConstantVelocity           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator USplineComponent::GetRotationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRotationAtTime");

        USplineComponent_GetRotationAtTime_Params params;
        params.Time = Time;
        params.CoordinateSpace = CoordinateSpace;
        params.bUseConstantVelocity = bUseConstantVelocity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetRotationAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator USplineComponent::GetRotationAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRotationAtSplinePoint");

        USplineComponent_GetRotationAtSplinePoint_Params params;
        params.PointIndex = PointIndex;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Distance                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator USplineComponent::GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline");

        USplineComponent_GetRotationAtDistanceAlongSpline_Params params;
        params.Distance = Distance;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetRollAtTime
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseConstantVelocity           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USplineComponent::GetRollAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRollAtTime");

        USplineComponent_GetRollAtTime_Params params;
        params.Time = Time;
        params.CoordinateSpace = CoordinateSpace;
        params.bUseConstantVelocity = bUseConstantVelocity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetRollAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USplineComponent::GetRollAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRollAtSplinePoint");

        USplineComponent_GetRollAtSplinePoint_Params params;
        params.PointIndex = PointIndex;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetRollAtDistanceAlongSpline
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Distance                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USplineComponent::GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRollAtDistanceAlongSpline");

        USplineComponent_GetRollAtDistanceAlongSpline_Params params;
        params.Distance = Distance;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetRightVectorAtTime
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseConstantVelocity           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetRightVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRightVectorAtTime");

        USplineComponent_GetRightVectorAtTime_Params params;
        params.Time = Time;
        params.CoordinateSpace = CoordinateSpace;
        params.bUseConstantVelocity = bUseConstantVelocity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetRightVectorAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetRightVectorAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRightVectorAtSplinePoint");

        USplineComponent_GetRightVectorAtSplinePoint_Params params;
        params.PointIndex = PointIndex;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Distance                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline");

        USplineComponent_GetRightVectorAtDistanceAlongSpline_Params params;
        params.Distance = Distance;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetNumberOfSplinePoints
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int USplineComponent::GetNumberOfSplinePoints()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetNumberOfSplinePoints");

        USplineComponent_GetNumberOfSplinePoints_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetLocationAtTime
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseConstantVelocity           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetLocationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocationAtTime");

        USplineComponent_GetLocationAtTime_Params params;
        params.Time = Time;
        params.CoordinateSpace = CoordinateSpace;
        params.bUseConstantVelocity = bUseConstantVelocity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetLocationAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetLocationAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocationAtSplinePoint");

        USplineComponent_GetLocationAtSplinePoint_Params params;
        params.PointIndex = PointIndex;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Distance                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline");

        USplineComponent_GetLocationAtDistanceAlongSpline_Params params;
        params.Distance = Distance;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 Tangent                        (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineComponent::GetLocationAndTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, struct FVector* Location, struct FVector* Tangent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint");

        USplineComponent_GetLocationAndTangentAtSplinePoint_Params params;
        params.PointIndex = PointIndex;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Location != nullptr)
            *Location = params.Location;
        if (Tangent != nullptr)
            *Tangent = params.Tangent;
    }


    // Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 LocalLocation                  (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 LocalTangent                   (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void USplineComponent::GetLocalLocationAndTangentAtSplinePoint(int PointIndex, struct FVector* LocalLocation, struct FVector* LocalTangent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint");

        USplineComponent_GetLocalLocationAndTangentAtSplinePoint_Params params;
        params.PointIndex = PointIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (LocalLocation != nullptr)
            *LocalLocation = params.LocalLocation;
        if (LocalTangent != nullptr)
            *LocalTangent = params.LocalTangent;
    }


    // Function Engine.SplineComponent.GetLeaveTangentAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetLeaveTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLeaveTangentAtSplinePoint");

        USplineComponent_GetLeaveTangentAtSplinePoint_Params params;
        params.PointIndex = PointIndex;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Distance                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USplineComponent::GetInputKeyAtDistanceAlongSpline(float Distance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline");

        USplineComponent_GetInputKeyAtDistanceAlongSpline_Params params;
        params.Distance = Distance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USplineComponent::GetDistanceAlongSplineAtSplinePoint(int PointIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint");

        USplineComponent_GetDistanceAlongSplineAtSplinePoint_Params params;
        params.PointIndex = PointIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetDirectionAtTime
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseConstantVelocity           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetDirectionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDirectionAtTime");

        USplineComponent_GetDirectionAtTime_Params params;
        params.Time = Time;
        params.CoordinateSpace = CoordinateSpace;
        params.bUseConstantVelocity = bUseConstantVelocity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetDirectionAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetDirectionAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDirectionAtSplinePoint");

        USplineComponent_GetDirectionAtSplinePoint_Params params;
        params.PointIndex = PointIndex;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          Distance                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline");

        USplineComponent_GetDirectionAtDistanceAlongSpline_Params params;
        params.Distance = Distance;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetDefaultUpVector
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetDefaultUpVector(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDefaultUpVector");

        USplineComponent_GetDefaultUpVector_Params params;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.GetArriveTangentAtSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            PointIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::GetArriveTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetArriveTangentAtSplinePoint");

        USplineComponent_GetArriveTangentAtSplinePoint_Params params;
        params.PointIndex = PointIndex;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.FindUpVectorClosestToWorldLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 WorldLocation                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::FindUpVectorClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindUpVectorClosestToWorldLocation");

        USplineComponent_FindUpVectorClosestToWorldLocation_Params params;
        params.WorldLocation = WorldLocation;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.FindTransformClosestToWorldLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 WorldLocation                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseScale                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FTransform USplineComponent::FindTransformClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindTransformClosestToWorldLocation");

        USplineComponent_FindTransformClosestToWorldLocation_Params params;
        params.WorldLocation = WorldLocation;
        params.CoordinateSpace = CoordinateSpace;
        params.bUseScale = bUseScale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.FindTangentClosestToWorldLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 WorldLocation                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::FindTangentClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindTangentClosestToWorldLocation");

        USplineComponent_FindTangentClosestToWorldLocation_Params params;
        params.WorldLocation = WorldLocation;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.FindScaleClosestToWorldLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 WorldLocation                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::FindScaleClosestToWorldLocation(const struct FVector& WorldLocation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindScaleClosestToWorldLocation");

        USplineComponent_FindScaleClosestToWorldLocation_Params params;
        params.WorldLocation = WorldLocation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.FindRotationClosestToWorldLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 WorldLocation                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator USplineComponent::FindRotationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindRotationClosestToWorldLocation");

        USplineComponent_FindRotationClosestToWorldLocation_Params params;
        params.WorldLocation = WorldLocation;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.FindRollClosestToWorldLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 WorldLocation                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USplineComponent::FindRollClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindRollClosestToWorldLocation");

        USplineComponent_FindRollClosestToWorldLocation_Params params;
        params.WorldLocation = WorldLocation;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.FindRightVectorClosestToWorldLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 WorldLocation                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::FindRightVectorClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindRightVectorClosestToWorldLocation");

        USplineComponent_FindRightVectorClosestToWorldLocation_Params params;
        params.WorldLocation = WorldLocation;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.FindLocationClosestToWorldLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 WorldLocation                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::FindLocationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindLocationClosestToWorldLocation");

        USplineComponent_FindLocationClosestToWorldLocation_Params params;
        params.WorldLocation = WorldLocation;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 WorldLocation                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float USplineComponent::FindInputKeyClosestToWorldLocation(const struct FVector& WorldLocation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation");

        USplineComponent_FindInputKeyClosestToWorldLocation_Params params;
        params.WorldLocation = WorldLocation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.FindDirectionClosestToWorldLocation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 WorldLocation                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USplineComponent::FindDirectionClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindDirectionClosestToWorldLocation");

        USplineComponent_FindDirectionClosestToWorldLocation_Params params;
        params.WorldLocation = WorldLocation;
        params.CoordinateSpace = CoordinateSpace;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.SplineComponent.ClearSplinePoints
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bUpdateSpline                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineComponent::ClearSplinePoints(bool bUpdateSpline)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.ClearSplinePoints");

        USplineComponent_ClearSplinePoints_Params params;
        params.bUpdateSpline = bUpdateSpline;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.AddSplineWorldPoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Position                       (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void USplineComponent::AddSplineWorldPoint(const struct FVector& Position)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddSplineWorldPoint");

        USplineComponent_AddSplineWorldPoint_Params params;
        params.Position = Position;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.AddSplinePointAtIndex
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Position                       (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // int                            Index                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateSpline                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineComponent::AddSplinePointAtIndex(const struct FVector& Position, int Index, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddSplinePointAtIndex");

        USplineComponent_AddSplinePointAtIndex_Params params;
        params.Position = Position;
        params.Index = Index;
        params.CoordinateSpace = CoordinateSpace;
        params.bUpdateSpline = bUpdateSpline;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.AddSplinePoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Position                       (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUpdateSpline                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineComponent::AddSplinePoint(const struct FVector& Position, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddSplinePoint");

        USplineComponent_AddSplinePoint_Params params;
        params.Position = Position;
        params.CoordinateSpace = CoordinateSpace;
        params.bUpdateSpline = bUpdateSpline;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.AddSplineLocalPoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Position                       (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void USplineComponent::AddSplineLocalPoint(const struct FVector& Position)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddSplineLocalPoint");

        USplineComponent_AddSplineLocalPoint_Params params;
        params.Position = Position;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.AddPoints
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<struct FSplinePoint>    Points                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // bool                           bUpdateSpline                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineComponent::AddPoints(TArray<struct FSplinePoint> Points, bool bUpdateSpline)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddPoints");

        USplineComponent_AddPoints_Params params;
        params.Points = Points;
        params.bUpdateSpline = bUpdateSpline;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SplineComponent.AddPoint
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FSplinePoint            Point                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           bUpdateSpline                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USplineComponent::AddPoint(const struct FSplinePoint& Point, bool bUpdateSpline)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddPoint");

        USplineComponent_AddPoint_Params params;
        params.Point = Point;
        params.bUpdateSpline = bUpdateSpline;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SubDSurfaceComponent.SetMesh
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class USubDSurface*            NewMesh                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool USubDSurfaceComponent::SetMesh(class USubDSurface* NewMesh)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SubDSurfaceComponent.SetMesh");

        USubDSurfaceComponent_SetMesh_Params params;
        params.NewMesh = NewMesh;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.TextRenderComponent.SetYScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTextRenderComponent::SetYScale(float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetYScale");

        UTextRenderComponent_SetYScale_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TextRenderComponent.SetXScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTextRenderComponent::SetXScale(float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetXScale");

        UTextRenderComponent_SetXScale_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TextRenderComponent.SetWorldSize
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTextRenderComponent::SetWorldSize(float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetWorldSize");

        UTextRenderComponent_SetWorldSize_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TextRenderComponent.SetVertSpacingAdjust
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTextRenderComponent::SetVertSpacingAdjust(float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetVertSpacingAdjust");

        UTextRenderComponent_SetVertSpacingAdjust_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TextRenderComponent.SetVerticalAlignment
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<EVerticalTextAligment> Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTextRenderComponent::SetVerticalAlignment(TEnumAsByte<EVerticalTextAligment> Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetVerticalAlignment");

        UTextRenderComponent_SetVerticalAlignment_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TextRenderComponent.SetTextRenderColor
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FColor                  Value                          (CPF_Parm, CPF_IsPlainOldData)

    void UTextRenderComponent::SetTextRenderColor(const struct FColor& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetTextRenderColor");

        UTextRenderComponent_SetTextRenderColor_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TextRenderComponent.SetTextMaterial
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterialInterface*      Material                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTextRenderComponent::SetTextMaterial(class UMaterialInterface* Material)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetTextMaterial");

        UTextRenderComponent_SetTextMaterial_Params params;
        params.Material = Material;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TextRenderComponent.SetText
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FString                 Value                          (CPF_Parm, CPF_ZeroConstructor)

    void UTextRenderComponent::SetText(const struct FString& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetText");

        UTextRenderComponent_SetText_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TextRenderComponent.SetHorizSpacingAdjust
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTextRenderComponent::SetHorizSpacingAdjust(float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetHorizSpacingAdjust");

        UTextRenderComponent_SetHorizSpacingAdjust_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TextRenderComponent.SetHorizontalAlignment
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<EHorizTextAligment> Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTextRenderComponent::SetHorizontalAlignment(TEnumAsByte<EHorizTextAligment> Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetHorizontalAlignment");

        UTextRenderComponent_SetHorizontalAlignment_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TextRenderComponent.SetFont
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UFont*                   Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTextRenderComponent::SetFont(class UFont* Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetFont");

        UTextRenderComponent_SetFont_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TextRenderComponent.K2_SetText
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FText                   Value                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void UTextRenderComponent::K2_SetText(const struct FText& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.K2_SetText");

        UTextRenderComponent_K2_SetText_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TextRenderComponent.GetTextWorldSize
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UTextRenderComponent::GetTextWorldSize()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.GetTextWorldSize");

        UTextRenderComponent_GetTextWorldSize_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.TextRenderComponent.GetTextLocalSize
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UTextRenderComponent::GetTextLocalSize()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.GetTextLocalSize");

        UTextRenderComponent_GetTextLocalSize_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.VectorFieldComponent.SetIntensity
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewIntensity                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UVectorFieldComponent::SetIntensity(float NewIntensity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.VectorFieldComponent.SetIntensity");

        UVectorFieldComponent_SetIntensity_Params params;
        params.NewIntensity = NewIntensity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.RadialForceComponent.RemoveObjectTypeToAffect
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<EObjectTypeQuery>  ObjectType                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void URadialForceComponent::RemoveObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceComponent.RemoveObjectTypeToAffect");

        URadialForceComponent_RemoveObjectTypeToAffect_Params params;
        params.ObjectType = ObjectType;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.RadialForceComponent.FireImpulse
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void URadialForceComponent::FireImpulse()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceComponent.FireImpulse");

        URadialForceComponent_FireImpulse_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.RadialForceComponent.AddObjectTypeToAffect
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<EObjectTypeQuery>  ObjectType                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void URadialForceComponent::AddObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceComponent.AddObjectTypeToAffect");

        URadialForceComponent_AddObjectTypeToAffect_Params params;
        params.ObjectType = ObjectType;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneCaptureComponent.ShowOnlyComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UPrimitiveComponent*     InComponent                    (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

    void USceneCaptureComponent::ShowOnlyComponent(class UPrimitiveComponent* InComponent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.ShowOnlyComponent");

        USceneCaptureComponent_ShowOnlyComponent_Params params;
        params.InComponent = InComponent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneCaptureComponent.ShowOnlyActorComponents
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  InActor                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneCaptureComponent::ShowOnlyActorComponents(class AActor* InActor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.ShowOnlyActorComponents");

        USceneCaptureComponent_ShowOnlyActorComponents_Params params;
        params.InActor = InActor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneCaptureComponent.RemoveShowOnlyComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UPrimitiveComponent*     InComponent                    (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

    void USceneCaptureComponent::RemoveShowOnlyComponent(class UPrimitiveComponent* InComponent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.RemoveShowOnlyComponent");

        USceneCaptureComponent_RemoveShowOnlyComponent_Params params;
        params.InComponent = InComponent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  InActor                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneCaptureComponent::RemoveShowOnlyActorComponents(class AActor* InActor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents");

        USceneCaptureComponent_RemoveShowOnlyActorComponents_Params params;
        params.InActor = InActor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneCaptureComponent.HideComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UPrimitiveComponent*     InComponent                    (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

    void USceneCaptureComponent::HideComponent(class UPrimitiveComponent* InComponent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.HideComponent");

        USceneCaptureComponent_HideComponent_Params params;
        params.InComponent = InComponent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneCaptureComponent.HideActorComponents
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  InActor                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneCaptureComponent::HideActorComponents(class AActor* InActor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.HideActorComponents");

        USceneCaptureComponent_HideActorComponents_Params params;
        params.InActor = InActor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneCaptureComponent.ClearShowOnlyComponents
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UPrimitiveComponent*     InComponent                    (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

    void USceneCaptureComponent::ClearShowOnlyComponents(class UPrimitiveComponent* InComponent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.ClearShowOnlyComponents");

        USceneCaptureComponent_ClearShowOnlyComponents_Params params;
        params.InComponent = InComponent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneCaptureComponent2D.CaptureScene
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void USceneCaptureComponent2D::CaptureScene()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent2D.CaptureScene");

        USceneCaptureComponent2D_CaptureScene_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TScriptInterface<class UBlendableInterface> InBlendableObject              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InWeight                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void USceneCaptureComponent2D::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable");

        USceneCaptureComponent2D_AddOrUpdateBlendable_Params params;
        params.InBlendableObject = InBlendableObject;
        params.InWeight = InWeight;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SceneCaptureComponentCube.CaptureScene
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void USceneCaptureComponentCube::CaptureScene()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponentCube.CaptureScene");

        USceneCaptureComponentCube_CaptureScene_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.StereoLayerComponent.SetUVRect
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FBox2D                  InUVRect                       (CPF_Parm)

    void UStereoLayerComponent::SetUVRect(const struct FBox2D& InUVRect)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.SetUVRect");

        UStereoLayerComponent_SetUVRect_Params params;
        params.InUVRect = InUVRect;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.StereoLayerComponent.SetTexture
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UTexture*                InTexture                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UStereoLayerComponent::SetTexture(class UTexture* InTexture)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.SetTexture");

        UStereoLayerComponent_SetTexture_Params params;
        params.InTexture = InTexture;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.StereoLayerComponent.SetQuadSize
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector2D               InQuadSize                     (CPF_Parm, CPF_IsPlainOldData)

    void UStereoLayerComponent::SetQuadSize(const struct FVector2D& InQuadSize)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.SetQuadSize");

        UStereoLayerComponent_SetQuadSize_Params params;
        params.InQuadSize = InQuadSize;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.StereoLayerComponent.SetPriority
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            InPriority                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UStereoLayerComponent::SetPriority(int InPriority)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.SetPriority");

        UStereoLayerComponent_SetPriority_Params params;
        params.InPriority = InPriority;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.StereoLayerComponent.MarkTextureForUpdate
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UStereoLayerComponent::MarkTextureForUpdate()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.MarkTextureForUpdate");

        UStereoLayerComponent_MarkTextureForUpdate_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.StereoLayerComponent.GetUVRect
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FBox2D                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FBox2D UStereoLayerComponent::GetUVRect()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.GetUVRect");

        UStereoLayerComponent_GetUVRect_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.StereoLayerComponent.GetTexture
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class UTexture*                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UTexture* UStereoLayerComponent::GetTexture()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.GetTexture");

        UStereoLayerComponent_GetTexture_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.StereoLayerComponent.GetQuadSize
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UStereoLayerComponent::GetQuadSize()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.GetQuadSize");

        UStereoLayerComponent_GetQuadSize_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.StereoLayerComponent.GetPriority
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UStereoLayerComponent::GetPriority()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.GetPriority");

        UStereoLayerComponent_GetPriority_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.WindDirectionalSourceComponent.SetWindType
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // EWindSourceType                InNewType                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UWindDirectionalSourceComponent::SetWindType(EWindSourceType InNewType)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.WindDirectionalSourceComponent.SetWindType");

        UWindDirectionalSourceComponent_SetWindType_Params params;
        params.InNewType = InNewType;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.WindDirectionalSourceComponent.SetStrength
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InNewStrength                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UWindDirectionalSourceComponent::SetStrength(float InNewStrength)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.WindDirectionalSourceComponent.SetStrength");

        UWindDirectionalSourceComponent_SetStrength_Params params;
        params.InNewStrength = InNewStrength;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.WindDirectionalSourceComponent.SetSpeed
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InNewSpeed                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UWindDirectionalSourceComponent::SetSpeed(float InNewSpeed)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.WindDirectionalSourceComponent.SetSpeed");

        UWindDirectionalSourceComponent_SetSpeed_Params params;
        params.InNewSpeed = InNewSpeed;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.WindDirectionalSourceComponent.SetRadius
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InNewRadius                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UWindDirectionalSourceComponent::SetRadius(float InNewRadius)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.WindDirectionalSourceComponent.SetRadius");

        UWindDirectionalSourceComponent_SetRadius_Params params;
        params.InNewRadius = InNewRadius;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.WindDirectionalSourceComponent.SetMinimumGustAmount
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InNewMinGust                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UWindDirectionalSourceComponent::SetMinimumGustAmount(float InNewMinGust)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.WindDirectionalSourceComponent.SetMinimumGustAmount");

        UWindDirectionalSourceComponent_SetMinimumGustAmount_Params params;
        params.InNewMinGust = InNewMinGust;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.WindDirectionalSourceComponent.SetMaximumGustAmount
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InNewMaxGust                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UWindDirectionalSourceComponent::SetMaximumGustAmount(float InNewMaxGust)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.WindDirectionalSourceComponent.SetMaximumGustAmount");

        UWindDirectionalSourceComponent_SetMaximumGustAmount_Params params;
        params.InNewMaxGust = InNewMaxGust;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TimelineComponent.Stop
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UTimelineComponent::Stop()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.Stop");

        UTimelineComponent_Stop_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TimelineComponent.SetVectorCurve
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UCurveVector*            NewVectorCurve                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   VectorTrackName                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTimelineComponent::SetVectorCurve(class UCurveVector* NewVectorCurve, const struct FName& VectorTrackName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetVectorCurve");

        UTimelineComponent_SetVectorCurve_Params params;
        params.NewVectorCurve = NewVectorCurve;
        params.VectorTrackName = VectorTrackName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TimelineComponent.SetTimelineLengthMode
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<ETimelineLengthMode> NewLengthMode                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTimelineComponent::SetTimelineLengthMode(TEnumAsByte<ETimelineLengthMode> NewLengthMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetTimelineLengthMode");

        UTimelineComponent_SetTimelineLengthMode_Params params;
        params.NewLengthMode = NewLengthMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TimelineComponent.SetTimelineLength
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewLength                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTimelineComponent::SetTimelineLength(float NewLength)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetTimelineLength");

        UTimelineComponent_SetTimelineLength_Params params;
        params.NewLength = NewLength;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TimelineComponent.SetPlayRate
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewRate                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTimelineComponent::SetPlayRate(float NewRate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetPlayRate");

        UTimelineComponent_SetPlayRate_Params params;
        params.NewRate = NewRate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TimelineComponent.SetPlaybackPosition
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewPosition                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bFireEvents                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bFireUpdate                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTimelineComponent::SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetPlaybackPosition");

        UTimelineComponent_SetPlaybackPosition_Params params;
        params.NewPosition = NewPosition;
        params.bFireEvents = bFireEvents;
        params.bFireUpdate = bFireUpdate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TimelineComponent.SetNewTime
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewTime                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTimelineComponent::SetNewTime(float NewTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetNewTime");

        UTimelineComponent_SetNewTime_Params params;
        params.NewTime = NewTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TimelineComponent.SetLooping
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewLooping                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTimelineComponent::SetLooping(bool bNewLooping)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetLooping");

        UTimelineComponent_SetLooping_Params params;
        params.bNewLooping = bNewLooping;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TimelineComponent.SetLinearColorCurve
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UCurveLinearColor*       NewLinearColorCurve            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   LinearColorTrackName           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTimelineComponent::SetLinearColorCurve(class UCurveLinearColor* NewLinearColorCurve, const struct FName& LinearColorTrackName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetLinearColorCurve");

        UTimelineComponent_SetLinearColorCurve_Params params;
        params.NewLinearColorCurve = NewLinearColorCurve;
        params.LinearColorTrackName = LinearColorTrackName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TimelineComponent.SetIgnoreTimeDilation
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bNewIgnoreTimeDilation         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTimelineComponent::SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetIgnoreTimeDilation");

        UTimelineComponent_SetIgnoreTimeDilation_Params params;
        params.bNewIgnoreTimeDilation = bNewIgnoreTimeDilation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TimelineComponent.SetFloatCurve
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UCurveFloat*             NewFloatCurve                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   FloatTrackName                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UTimelineComponent::SetFloatCurve(class UCurveFloat* NewFloatCurve, const struct FName& FloatTrackName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetFloatCurve");

        UTimelineComponent_SetFloatCurve_Params params;
        params.NewFloatCurve = NewFloatCurve;
        params.FloatTrackName = FloatTrackName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TimelineComponent.ReverseFromEnd
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UTimelineComponent::ReverseFromEnd()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.ReverseFromEnd");

        UTimelineComponent_ReverseFromEnd_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TimelineComponent.Reverse
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UTimelineComponent::Reverse()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.Reverse");

        UTimelineComponent_Reverse_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TimelineComponent.PlayFromStart
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UTimelineComponent::PlayFromStart()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.PlayFromStart");

        UTimelineComponent_PlayFromStart_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TimelineComponent.Play
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UTimelineComponent::Play()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.Play");

        UTimelineComponent_Play_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TimelineComponent.OnRep_Timeline
    // (FUNC_Final, FUNC_Native, FUNC_Public)

    void UTimelineComponent::OnRep_Timeline()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.OnRep_Timeline");

        UTimelineComponent_OnRep_Timeline_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TimelineComponent.IsReversing
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UTimelineComponent::IsReversing()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.IsReversing");

        UTimelineComponent_IsReversing_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.TimelineComponent.IsPlaying
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UTimelineComponent::IsPlaying()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.IsPlaying");

        UTimelineComponent_IsPlaying_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.TimelineComponent.IsLooping
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UTimelineComponent::IsLooping()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.IsLooping");

        UTimelineComponent_IsLooping_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.TimelineComponent.GetTimelineLength
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UTimelineComponent::GetTimelineLength()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.GetTimelineLength");

        UTimelineComponent_GetTimelineLength_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.TimelineComponent.GetPlayRate
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UTimelineComponent::GetPlayRate()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.GetPlayRate");

        UTimelineComponent_GetPlayRate_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.TimelineComponent.GetPlaybackPosition
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UTimelineComponent::GetPlaybackPosition()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.GetPlaybackPosition");

        UTimelineComponent_GetPlaybackPosition_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.TimelineComponent.GetIgnoreTimeDilation
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UTimelineComponent::GetIgnoreTimeDilation()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.GetIgnoreTimeDilation");

        UTimelineComponent_GetIgnoreTimeDilation_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimSingleNodeInstance.StopAnim
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UAnimSingleNodeInstance::StopAnim()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.StopAnim");

        UAnimSingleNodeInstance_StopAnim_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimSingleNodeInstance.SetReverse
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bInReverse                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimSingleNodeInstance::SetReverse(bool bInReverse)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetReverse");

        UAnimSingleNodeInstance_SetReverse_Params params;
        params.bInReverse = bInReverse;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimSingleNodeInstance.SetPreviewCurveOverride
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   PoseName                       (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bRemoveIfZero                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimSingleNodeInstance::SetPreviewCurveOverride(const struct FName& PoseName, float Value, bool bRemoveIfZero)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetPreviewCurveOverride");

        UAnimSingleNodeInstance_SetPreviewCurveOverride_Params params;
        params.PoseName = PoseName;
        params.Value = Value;
        params.bRemoveIfZero = bRemoveIfZero;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InPosition                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InPreviousTime                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bFireNotifies                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimSingleNodeInstance::SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime");

        UAnimSingleNodeInstance_SetPositionWithPreviousTime_Params params;
        params.InPosition = InPosition;
        params.InPreviousTime = InPreviousTime;
        params.bFireNotifies = bFireNotifies;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimSingleNodeInstance.SetPosition
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InPosition                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bFireNotifies                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimSingleNodeInstance::SetPosition(float InPosition, bool bFireNotifies)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetPosition");

        UAnimSingleNodeInstance_SetPosition_Params params;
        params.InPosition = InPosition;
        params.bFireNotifies = bFireNotifies;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimSingleNodeInstance.SetPlayRate
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          InPlayRate                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimSingleNodeInstance::SetPlayRate(float InPlayRate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetPlayRate");

        UAnimSingleNodeInstance_SetPlayRate_Params params;
        params.InPlayRate = InPlayRate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimSingleNodeInstance.SetPlaying
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bIsPlaying                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimSingleNodeInstance::SetPlaying(bool bIsPlaying)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetPlaying");

        UAnimSingleNodeInstance_SetPlaying_Params params;
        params.bIsPlaying = bIsPlaying;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimSingleNodeInstance.SetLooping
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bIsLooping                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimSingleNodeInstance::SetLooping(bool bIsLooping)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetLooping");

        UAnimSingleNodeInstance_SetLooping_Params params;
        params.bIsLooping = bIsLooping;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 InBlendInput                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UAnimSingleNodeInstance::SetBlendSpaceInput(const struct FVector& InBlendInput)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput");

        UAnimSingleNodeInstance_SetBlendSpaceInput_Params params;
        params.InBlendInput = InBlendInput;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimSingleNodeInstance.SetAnimationAsset
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UAnimationAsset*         NewAsset                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bIsLooping                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InPlayRate                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimSingleNodeInstance::SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetAnimationAsset");

        UAnimSingleNodeInstance_SetAnimationAsset_Params params;
        params.NewAsset = NewAsset;
        params.bIsLooping = bIsLooping;
        params.InPlayRate = InPlayRate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimSingleNodeInstance.PlayAnim
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bIsLooping                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InPlayRate                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InStartPosition                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UAnimSingleNodeInstance::PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.PlayAnim");

        UAnimSingleNodeInstance_PlayAnim_Params params;
        params.bIsLooping = bIsLooping;
        params.InPlayRate = InPlayRate;
        params.InStartPosition = InStartPosition;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.AnimSingleNodeInstance.GetLength
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UAnimSingleNodeInstance::GetLength()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.GetLength");

        UAnimSingleNodeInstance_GetLength_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AnimNotifyState_Trail.OverridePSTemplate
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent, FUNC_Const)
    // Parameters:
    // class USkeletalMeshComponent*  MeshComp                       (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // class UAnimSequenceBase*       Animation                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UParticleSystem*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UParticleSystem* UAnimNotifyState_Trail::OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotifyState_Trail.OverridePSTemplate");

        UAnimNotifyState_Trail_OverridePSTemplate_Params params;
        params.MeshComp = MeshComp;
        params.Animation = Animation;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AvoidanceManager.RegisterMovementComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UMovementComponent*      MovementComp                   (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // float                          AvoidanceWeight                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UAvoidanceManager::RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.RegisterMovementComponent");

        UAvoidanceManager_RegisterMovementComponent_Params params;
        params.MovementComp = MovementComp;
        params.AvoidanceWeight = AvoidanceWeight;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AvoidanceManager.GetObjectCount
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UAvoidanceManager::GetObjectCount()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.GetObjectCount");

        UAvoidanceManager_GetObjectCount_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AvoidanceManager.GetNewAvoidanceUID
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UAvoidanceManager::GetNewAvoidanceUID()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.GetNewAvoidanceUID");

        UAvoidanceManager_GetNewAvoidanceUID_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AvoidanceManager.GetAvoidanceVelocityIgnoringUID
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FNavAvoidanceData       AvoidanceData                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            IgnoreThisUID                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UAvoidanceManager::GetAvoidanceVelocityIgnoringUID(const struct FNavAvoidanceData& AvoidanceData, float DeltaTime, int IgnoreThisUID)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.GetAvoidanceVelocityIgnoringUID");

        UAvoidanceManager_GetAvoidanceVelocityIgnoringUID_Params params;
        params.AvoidanceData = AvoidanceData;
        params.DeltaTime = DeltaTime;
        params.IgnoreThisUID = IgnoreThisUID;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UMovementComponent*      MovementComp                   (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UAvoidanceManager::GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent");

        UAvoidanceManager_GetAvoidanceVelocityForComponent_Params params;
        params.MovementComp = MovementComp;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.AvoidanceManager.GetAvoidanceVelocity
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FNavAvoidanceData       AvoidanceData                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UAvoidanceManager::GetAvoidanceVelocity(const struct FNavAvoidanceData& AvoidanceData, float DeltaTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.GetAvoidanceVelocity");

        UAvoidanceManager_GetAvoidanceVelocity_Params params;
        params.AvoidanceData = AvoidanceData;
        params.DeltaTime = DeltaTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.BlueprintMapLibrary.Map_Values
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Private, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TMap<int, int>                 TargetMap                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TArray<int>                    Values                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)

    void UBlueprintMapLibrary::STATIC_Map_Values(TMap<int, int> TargetMap, TArray<int>* Values)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintMapLibrary.Map_Values");

        UBlueprintMapLibrary_Map_Values_Params params;
        params.TargetMap = TargetMap;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Values != nullptr)
            *Values = params.Values;
    }


    // Function Engine.BlueprintMapLibrary.Map_Remove
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Private, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TMap<int, int>                 TargetMap                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            Key                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UBlueprintMapLibrary::STATIC_Map_Remove(TMap<int, int> TargetMap, int Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintMapLibrary.Map_Remove");

        UBlueprintMapLibrary_Map_Remove_Params params;
        params.TargetMap = TargetMap;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.BlueprintMapLibrary.Map_Length
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Private, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TMap<int, int>                 TargetMap                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UBlueprintMapLibrary::STATIC_Map_Length(TMap<int, int> TargetMap)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintMapLibrary.Map_Length");

        UBlueprintMapLibrary_Map_Length_Params params;
        params.TargetMap = TargetMap;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.BlueprintMapLibrary.Map_Keys
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Private, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TMap<int, int>                 TargetMap                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TArray<int>                    Keys                           (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)

    void UBlueprintMapLibrary::STATIC_Map_Keys(TMap<int, int> TargetMap, TArray<int>* Keys)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintMapLibrary.Map_Keys");

        UBlueprintMapLibrary_Map_Keys_Params params;
        params.TargetMap = TargetMap;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Keys != nullptr)
            *Keys = params.Keys;
    }


    // Function Engine.BlueprintMapLibrary.Map_Find
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Private, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TMap<int, int>                 TargetMap                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            Key                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // int                            Value                          (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UBlueprintMapLibrary::STATIC_Map_Find(TMap<int, int> TargetMap, int Key, int* Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintMapLibrary.Map_Find");

        UBlueprintMapLibrary_Map_Find_Params params;
        params.TargetMap = TargetMap;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Value != nullptr)
            *Value = params.Value;

        return params.ReturnValue;
    }


    // Function Engine.BlueprintMapLibrary.Map_Contains
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Private, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TMap<int, int>                 TargetMap                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            Key                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UBlueprintMapLibrary::STATIC_Map_Contains(TMap<int, int> TargetMap, int Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintMapLibrary.Map_Contains");

        UBlueprintMapLibrary_Map_Contains_Params params;
        params.TargetMap = TargetMap;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.BlueprintMapLibrary.Map_Clear
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Private, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TMap<int, int>                 TargetMap                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)

    void UBlueprintMapLibrary::STATIC_Map_Clear(TMap<int, int> TargetMap)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintMapLibrary.Map_Clear");

        UBlueprintMapLibrary_Map_Clear_Params params;
        params.TargetMap = TargetMap;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.BlueprintMapLibrary.Map_Add
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Private, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TMap<int, int>                 TargetMap                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            Key                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // int                            Value                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UBlueprintMapLibrary::STATIC_Map_Add(TMap<int, int> TargetMap, int Key, int Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintMapLibrary.Map_Add");

        UBlueprintMapLibrary_Map_Add_Params params;
        params.TargetMap = TargetMap;
        params.Key = Key;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // DelegateFunction Engine.PlatformGameInstance.PlatformScreenOrientationChangedDelegate__DelegateSignature
    // (FUNC_MulticastDelegate, FUNC_Public, FUNC_Delegate)
    // Parameters:
    // TEnumAsByte<EScreenOrientation> inScreenOrientation            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPlatformGameInstance::PlatformScreenOrientationChangedDelegate__DelegateSignature(TEnumAsByte<EScreenOrientation> inScreenOrientation)
    {
        static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.PlatformGameInstance.PlatformScreenOrientationChangedDelegate__DelegateSignature");

        UPlatformGameInstance_PlatformScreenOrientationChangedDelegate__DelegateSignature_Params params;
        params.inScreenOrientation = inScreenOrientation;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // DelegateFunction Engine.PlatformGameInstance.PlatformRegisteredForUserNotificationsDelegate__DelegateSignature
    // (FUNC_MulticastDelegate, FUNC_Public, FUNC_Delegate)
    // Parameters:
    // int                            inInt                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPlatformGameInstance::PlatformRegisteredForUserNotificationsDelegate__DelegateSignature(int inInt)
    {
        static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.PlatformGameInstance.PlatformRegisteredForUserNotificationsDelegate__DelegateSignature");

        UPlatformGameInstance_PlatformRegisteredForUserNotificationsDelegate__DelegateSignature_Params params;
        params.inInt = inInt;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // DelegateFunction Engine.PlatformGameInstance.PlatformRegisteredForRemoteNotificationsDelegate__DelegateSignature
    // (FUNC_MulticastDelegate, FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
    // Parameters:
    // TArray<unsigned char>          inArray                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)

    void UPlatformGameInstance::PlatformRegisteredForRemoteNotificationsDelegate__DelegateSignature(TArray<unsigned char> inArray)
    {
        static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.PlatformGameInstance.PlatformRegisteredForRemoteNotificationsDelegate__DelegateSignature");

        UPlatformGameInstance_PlatformRegisteredForRemoteNotificationsDelegate__DelegateSignature_Params params;
        params.inArray = inArray;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // DelegateFunction Engine.PlatformGameInstance.PlatformReceivedRemoteNotificationDelegate__DelegateSignature
    // (FUNC_MulticastDelegate, FUNC_Public, FUNC_Delegate)
    // Parameters:
    // struct FString                 inString                       (CPF_Parm, CPF_ZeroConstructor)

    void UPlatformGameInstance::PlatformReceivedRemoteNotificationDelegate__DelegateSignature(const struct FString& inString)
    {
        static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.PlatformGameInstance.PlatformReceivedRemoteNotificationDelegate__DelegateSignature");

        UPlatformGameInstance_PlatformReceivedRemoteNotificationDelegate__DelegateSignature_Params params;
        params.inString = inString;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // DelegateFunction Engine.PlatformGameInstance.PlatformReceivedLocalNotificationDelegate__DelegateSignature
    // (FUNC_MulticastDelegate, FUNC_Public, FUNC_Delegate)
    // Parameters:
    // struct FString                 inString                       (CPF_Parm, CPF_ZeroConstructor)
    // int                            inInt                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UPlatformGameInstance::PlatformReceivedLocalNotificationDelegate__DelegateSignature(const struct FString& inString, int inInt)
    {
        static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.PlatformGameInstance.PlatformReceivedLocalNotificationDelegate__DelegateSignature");

        UPlatformGameInstance_PlatformReceivedLocalNotificationDelegate__DelegateSignature_Params params;
        params.inString = inString;
        params.inInt = inInt;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // DelegateFunction Engine.PlatformGameInstance.PlatformFailedToRegisterForRemoteNotificationsDelegate__DelegateSignature
    // (FUNC_MulticastDelegate, FUNC_Public, FUNC_Delegate)
    // Parameters:
    // struct FString                 inString                       (CPF_Parm, CPF_ZeroConstructor)

    void UPlatformGameInstance::PlatformFailedToRegisterForRemoteNotificationsDelegate__DelegateSignature(const struct FString& inString)
    {
        static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.PlatformGameInstance.PlatformFailedToRegisterForRemoteNotificationsDelegate__DelegateSignature");

        UPlatformGameInstance_PlatformFailedToRegisterForRemoteNotificationsDelegate__DelegateSignature_Params params;
        params.inString = inString;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // DelegateFunction Engine.PlatformGameInstance.PlatformDelegate__DelegateSignature
    // (FUNC_MulticastDelegate, FUNC_Public, FUNC_Delegate)

    void UPlatformGameInstance::PlatformDelegate__DelegateSignature()
    {
        static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.PlatformGameInstance.PlatformDelegate__DelegateSignature");

        UPlatformGameInstance_PlatformDelegate__DelegateSignature_Params params;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // int                            inSecondsFromNow               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FText                   Title                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FText                   Body                           (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FText                   Action                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FString                 ActivationEvent                (CPF_Parm, CPF_ZeroConstructor)

    void UBlueprintPlatformLibrary::STATIC_ScheduleLocalNotificationFromNow(int inSecondsFromNow, const struct FText& Title, const struct FText& Body, const struct FText& Action, const struct FString& ActivationEvent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow");

        UBlueprintPlatformLibrary_ScheduleLocalNotificationFromNow_Params params;
        params.inSecondsFromNow = inSecondsFromNow;
        params.Title = Title;
        params.Body = Body;
        params.Action = Action;
        params.ActivationEvent = ActivationEvent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationAtTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FDateTime               FireDateTime                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           LocalTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FText                   Title                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FText                   Body                           (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FText                   Action                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FString                 ActivationEvent                (CPF_Parm, CPF_ZeroConstructor)

    void UBlueprintPlatformLibrary::STATIC_ScheduleLocalNotificationAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const struct FText& Title, const struct FText& Body, const struct FText& Action, const struct FString& ActivationEvent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationAtTime");

        UBlueprintPlatformLibrary_ScheduleLocalNotificationAtTime_Params params;
        params.FireDateTime = FireDateTime;
        params.LocalTime = LocalTime;
        params.Title = Title;
        params.Body = Body;
        params.Action = Action;
        params.ActivationEvent = ActivationEvent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.BlueprintPlatformLibrary.GetLaunchNotification
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           NotificationLaunchedApp        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ActivationEvent                (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // int                            FireDate                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UBlueprintPlatformLibrary::STATIC_GetLaunchNotification(bool* NotificationLaunchedApp, struct FString* ActivationEvent, int* FireDate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintPlatformLibrary.GetLaunchNotification");

        UBlueprintPlatformLibrary_GetLaunchNotification_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (NotificationLaunchedApp != nullptr)
            *NotificationLaunchedApp = params.NotificationLaunchedApp;
        if (ActivationEvent != nullptr)
            *ActivationEvent = params.ActivationEvent;
        if (FireDate != nullptr)
            *FireDate = params.FireDate;
    }


    // Function Engine.BlueprintPlatformLibrary.ClearAllLocalNotifications
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)

    void UBlueprintPlatformLibrary::STATIC_ClearAllLocalNotifications()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintPlatformLibrary.ClearAllLocalNotifications");

        UBlueprintPlatformLibrary_ClearAllLocalNotifications_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.BlueprintPlatformLibrary.CancelLocalNotification
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FString                 ActivationEvent                (CPF_Parm, CPF_ZeroConstructor)

    void UBlueprintPlatformLibrary::STATIC_CancelLocalNotification(const struct FString& ActivationEvent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintPlatformLibrary.CancelLocalNotification");

        UBlueprintPlatformLibrary_CancelLocalNotification_Params params;
        params.ActivationEvent = ActivationEvent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.BlueprintSetLibrary.Set_Union
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)

    void UBlueprintSetLibrary::STATIC_Set_Union()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintSetLibrary.Set_Union");

        UBlueprintSetLibrary_Set_Union_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.BlueprintSetLibrary.Set_ToArray
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<int>                    Result                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)

    void UBlueprintSetLibrary::STATIC_Set_ToArray(TArray<int>* Result)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintSetLibrary.Set_ToArray");

        UBlueprintSetLibrary_Set_ToArray_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Result != nullptr)
            *Result = params.Result;
    }


    // Function Engine.BlueprintSetLibrary.Set_RemoveItems
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<int>                    Items                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)

    void UBlueprintSetLibrary::STATIC_Set_RemoveItems(TArray<int> Items)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintSetLibrary.Set_RemoveItems");

        UBlueprintSetLibrary_Set_RemoveItems_Params params;
        params.Items = Items;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.BlueprintSetLibrary.Set_Remove
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Item                           (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UBlueprintSetLibrary::STATIC_Set_Remove(int Item)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintSetLibrary.Set_Remove");

        UBlueprintSetLibrary_Set_Remove_Params params;
        params.Item = Item;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.BlueprintSetLibrary.Set_Length
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UBlueprintSetLibrary::STATIC_Set_Length()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintSetLibrary.Set_Length");

        UBlueprintSetLibrary_Set_Length_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.BlueprintSetLibrary.Set_Intersection
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)

    void UBlueprintSetLibrary::STATIC_Set_Intersection()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintSetLibrary.Set_Intersection");

        UBlueprintSetLibrary_Set_Intersection_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.BlueprintSetLibrary.Set_Difference
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)

    void UBlueprintSetLibrary::STATIC_Set_Difference()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintSetLibrary.Set_Difference");

        UBlueprintSetLibrary_Set_Difference_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.BlueprintSetLibrary.Set_Contains
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            ItemToFind                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UBlueprintSetLibrary::STATIC_Set_Contains(int ItemToFind)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintSetLibrary.Set_Contains");

        UBlueprintSetLibrary_Set_Contains_Params params;
        params.ItemToFind = ItemToFind;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.BlueprintSetLibrary.Set_Clear
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)

    void UBlueprintSetLibrary::STATIC_Set_Clear()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintSetLibrary.Set_Clear");

        UBlueprintSetLibrary_Set_Clear_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.BlueprintSetLibrary.Set_AddItems
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<int>                    NewItems                       (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)

    void UBlueprintSetLibrary::STATIC_Set_AddItems(TArray<int> NewItems)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintSetLibrary.Set_AddItems");

        UBlueprintSetLibrary_Set_AddItems_Params params;
        params.NewItems = NewItems;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.BlueprintSetLibrary.Set_Add
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // int                            NewItem                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UBlueprintSetLibrary::STATIC_Set_Add(int NewItem)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.BlueprintSetLibrary.Set_Add");

        UBlueprintSetLibrary_Set_Add_Params params;
        params.NewItem = NewItem;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.DataTableFunctionLibrary.GetDataTableRowNames
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UDataTable*              Table                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<struct FName>           OutRowNames                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)

    void UDataTableFunctionLibrary::STATIC_GetDataTableRowNames(class UDataTable* Table, TArray<struct FName>* OutRowNames)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DataTableFunctionLibrary.GetDataTableRowNames");

        UDataTableFunctionLibrary_GetDataTableRowNames_Params params;
        params.Table = Table;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutRowNames != nullptr)
            *OutRowNames = params.OutRowNames;
    }


    // Function Engine.DataTableFunctionLibrary.GetDataTableRowFromName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UDataTable*              Table                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   RowName                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTableRowBase           OutRow                         (CPF_Parm, CPF_OutParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UDataTableFunctionLibrary::STATIC_GetDataTableRowFromName(class UDataTable* Table, const struct FName& RowName, struct FTableRowBase* OutRow)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DataTableFunctionLibrary.GetDataTableRowFromName");

        UDataTableFunctionLibrary_GetDataTableRowFromName_Params params;
        params.Table = Table;
        params.RowName = RowName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutRow != nullptr)
            *OutRow = params.OutRow;

        return params.ReturnValue;
    }


    // Function Engine.DataTableFunctionLibrary.EvaluateCurveTableRow
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UCurveTable*             CurveTable                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   RowName                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InXY                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EEvaluateCurveTableResult> OutResult                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OutXY                          (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ContextString                  (CPF_Parm, CPF_ZeroConstructor)

    void UDataTableFunctionLibrary::STATIC_EvaluateCurveTableRow(class UCurveTable* CurveTable, const struct FName& RowName, float InXY, const struct FString& ContextString, TEnumAsByte<EEvaluateCurveTableResult>* OutResult, float* OutXY)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.DataTableFunctionLibrary.EvaluateCurveTableRow");

        UDataTableFunctionLibrary_EvaluateCurveTableRow_Params params;
        params.CurveTable = CurveTable;
        params.RowName = RowName;
        params.InXY = InXY;
        params.ContextString = ContextString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutResult != nullptr)
            *OutResult = params.OutResult;
        if (OutXY != nullptr)
            *OutXY = params.OutXY;
    }


    // Function Engine.KismetSystemLibrary.StackTrace
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)

    void UKismetSystemLibrary::STATIC_StackTrace()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.StackTrace");

        UKismetSystemLibrary_StackTrace_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SphereTraceSingleForObjects
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Start                          (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 End                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              OutHit                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bIgnoreSelf                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TraceColor                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            TraceHitColor                  (CPF_Parm, CPF_IsPlainOldData)
    // float                          DrawTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_SphereTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereTraceSingleForObjects");

        UKismetSystemLibrary_SphereTraceSingleForObjects_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Start = Start;
        params.End = End;
        params.Radius = Radius;
        params.ObjectTypes = ObjectTypes;
        params.bTraceComplex = bTraceComplex;
        params.ActorsToIgnore = ActorsToIgnore;
        params.DrawDebugType = DrawDebugType;
        params.bIgnoreSelf = bIgnoreSelf;
        params.TraceColor = TraceColor;
        params.TraceHitColor = TraceHitColor;
        params.DrawTime = DrawTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHit != nullptr)
            *OutHit = params.OutHit;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.SphereTraceSingle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Start                          (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 End                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              OutHit                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bIgnoreSelf                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TraceColor                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            TraceHitColor                  (CPF_Parm, CPF_IsPlainOldData)
    // float                          DrawTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_SphereTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereTraceSingle");

        UKismetSystemLibrary_SphereTraceSingle_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Start = Start;
        params.End = End;
        params.Radius = Radius;
        params.TraceChannel = TraceChannel;
        params.bTraceComplex = bTraceComplex;
        params.ActorsToIgnore = ActorsToIgnore;
        params.DrawDebugType = DrawDebugType;
        params.bIgnoreSelf = bIgnoreSelf;
        params.TraceColor = TraceColor;
        params.TraceHitColor = TraceHitColor;
        params.DrawTime = DrawTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHit != nullptr)
            *OutHit = params.OutHit;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.SphereTraceMultiForObjects
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Start                          (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 End                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<struct FHitResult>      OutHits                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           bIgnoreSelf                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TraceColor                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            TraceHitColor                  (CPF_Parm, CPF_IsPlainOldData)
    // float                          DrawTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_SphereTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereTraceMultiForObjects");

        UKismetSystemLibrary_SphereTraceMultiForObjects_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Start = Start;
        params.End = End;
        params.Radius = Radius;
        params.ObjectTypes = ObjectTypes;
        params.bTraceComplex = bTraceComplex;
        params.ActorsToIgnore = ActorsToIgnore;
        params.DrawDebugType = DrawDebugType;
        params.bIgnoreSelf = bIgnoreSelf;
        params.TraceColor = TraceColor;
        params.TraceHitColor = TraceHitColor;
        params.DrawTime = DrawTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHits != nullptr)
            *OutHits = params.OutHits;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.SphereTraceMulti
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Start                          (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 End                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<struct FHitResult>      OutHits                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           bIgnoreSelf                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TraceColor                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            TraceHitColor                  (CPF_Parm, CPF_IsPlainOldData)
    // float                          DrawTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_SphereTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereTraceMulti");

        UKismetSystemLibrary_SphereTraceMulti_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Start = Start;
        params.End = End;
        params.Radius = Radius;
        params.TraceChannel = TraceChannel;
        params.bTraceComplex = bTraceComplex;
        params.ActorsToIgnore = ActorsToIgnore;
        params.DrawDebugType = DrawDebugType;
        params.bIgnoreSelf = bIgnoreSelf;
        params.TraceColor = TraceColor;
        params.TraceHitColor = TraceHitColor;
        params.DrawTime = DrawTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHits != nullptr)
            *OutHits = params.OutHits;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.SphereOverlapComponents
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 SpherePos                      (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          SphereRadius                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // class UClass*                  ComponentClassFilter           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TArray<class UPrimitiveComponent*> OutComponents                  (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_SphereOverlapComponents(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereOverlapComponents");

        UKismetSystemLibrary_SphereOverlapComponents_Params params;
        params.WorldContextObject = WorldContextObject;
        params.SpherePos = SpherePos;
        params.SphereRadius = SphereRadius;
        params.ObjectTypes = ObjectTypes;
        params.ComponentClassFilter = ComponentClassFilter;
        params.ActorsToIgnore = ActorsToIgnore;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutComponents != nullptr)
            *OutComponents = params.OutComponents;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.SphereOverlapActors
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 SpherePos                      (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          SphereRadius                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // class UClass*                  ActorClassFilter               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TArray<class AActor*>          OutActors                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_SphereOverlapActors(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereOverlapActors");

        UKismetSystemLibrary_SphereOverlapActors_Params params;
        params.WorldContextObject = WorldContextObject;
        params.SpherePos = SpherePos;
        params.SphereRadius = SphereRadius;
        params.ObjectTypes = ObjectTypes;
        params.ActorClassFilter = ActorClassFilter;
        params.ActorsToIgnore = ActorsToIgnore;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutActors != nullptr)
            *OutActors = params.OutActors;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FString                 CategoryName                   (CPF_Parm, CPF_ZeroConstructor)

    void UKismetSystemLibrary::STATIC_ShowPlatformSpecificLeaderboardScreen(const struct FString& CategoryName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen");

        UKismetSystemLibrary_ShowPlatformSpecificLeaderboardScreen_Params params;
        params.CategoryName = CategoryName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class APlayerController*       SpecificPlayer                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen");

        UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen_Params params;
        params.SpecificPlayer = SpecificPlayer;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.ShowInterstitialAd
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)

    void UKismetSystemLibrary::STATIC_ShowInterstitialAd()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ShowInterstitialAd");

        UKismetSystemLibrary_ShowInterstitialAd_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.ShowAdBanner
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            AdIdIndex                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bShowOnBottomOfScreen          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ShowAdBanner");

        UKismetSystemLibrary_ShowAdBanner_Params params;
        params.AdIdIndex = AdIdIndex;
        params.bShowOnBottomOfScreen = bShowOnBottomOfScreen;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetWindowTitle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FText                   Title                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void UKismetSystemLibrary::STATIC_SetWindowTitle(const struct FText& Title)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetWindowTitle");

        UKismetSystemLibrary_SetWindowTitle_Params params;
        params.Title = Title;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnabled                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_SetVolumeButtonsHandledBySystem(bool bEnabled)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem");

        UKismetSystemLibrary_SetVolumeButtonsHandledBySystem_Params params;
        params.bEnabled = bEnabled;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetVectorPropertyByName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Value                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_SetVectorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FVector& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetVectorPropertyByName");

        UKismetSystemLibrary_SetVectorPropertyByName_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetUserActivity
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FUserActivity           UserActivity                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void UKismetSystemLibrary::STATIC_SetUserActivity(const struct FUserActivity& UserActivity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetUserActivity");

        UKismetSystemLibrary_SetUserActivity_Params params;
        params.UserActivity = UserActivity;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetTransformPropertyByName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              Value                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_SetTransformPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FTransform& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetTransformPropertyByName");

        UKismetSystemLibrary_SetTransformPropertyByName_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetTextPropertyByName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FText                   Value                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void UKismetSystemLibrary::STATIC_SetTextPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FText& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetTextPropertyByName");

        UKismetSystemLibrary_SetTextPropertyByName_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetSuppressViewportTransitionMessage
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bState                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_SetSuppressViewportTransitionMessage(class UObject* WorldContextObject, bool bState)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetSuppressViewportTransitionMessage");

        UKismetSystemLibrary_SetSuppressViewportTransitionMessage_Params params;
        params.WorldContextObject = WorldContextObject;
        params.bState = bState;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetStructurePropertyByName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FGenericStruct          Value                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_SetStructurePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FGenericStruct& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetStructurePropertyByName");

        UKismetSystemLibrary_SetStructurePropertyByName_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetStringPropertyByName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 Value                          (CPF_Parm, CPF_ZeroConstructor)

    void UKismetSystemLibrary::STATIC_SetStringPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FString& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetStringPropertyByName");

        UKismetSystemLibrary_SetStringPropertyByName_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetRotatorPropertyByName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                Value                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_SetRotatorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FRotator& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetRotatorPropertyByName");

        UKismetSystemLibrary_SetRotatorPropertyByName_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetObjectPropertyByName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UObject*                 Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_SetObjectPropertyByName(class UObject* Object, const struct FName& PropertyName, class UObject* Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetObjectPropertyByName");

        UKismetSystemLibrary_SetObjectPropertyByName_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetNamePropertyByName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   Value                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_SetNamePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FName& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetNamePropertyByName");

        UKismetSystemLibrary_SetNamePropertyByName_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetLinearColorPropertyByName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            Value                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_SetLinearColorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FLinearColor& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetLinearColorPropertyByName");

        UKismetSystemLibrary_SetLinearColorPropertyByName_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetIntPropertyByName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_SetIntPropertyByName(class UObject* Object, const struct FName& PropertyName, int Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetIntPropertyByName");

        UKismetSystemLibrary_SetIntPropertyByName_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetInterfacePropertyByName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TScriptInterface<class UInterface> Value                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_SetInterfacePropertyByName(class UObject* Object, const struct FName& PropertyName, const TScriptInterface<class UInterface>& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetInterfacePropertyByName");

        UKismetSystemLibrary_SetInterfacePropertyByName_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetFloatPropertyByName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_SetFloatPropertyByName(class UObject* Object, const struct FName& PropertyName, float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetFloatPropertyByName");

        UKismetSystemLibrary_SetFloatPropertyByName_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetCollisionProfileNameProperty
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FCollisionProfileName   Value                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void UKismetSystemLibrary::STATIC_SetCollisionProfileNameProperty(class UObject* Object, const struct FName& PropertyName, const struct FCollisionProfileName& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetCollisionProfileNameProperty");

        UKismetSystemLibrary_SetCollisionProfileNameProperty_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetClassPropertyByName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_SetClassPropertyByName(class UObject* Object, const struct FName& PropertyName, class UClass* Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetClassPropertyByName");

        UKismetSystemLibrary_SetClassPropertyByName_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetBytePropertyByName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_SetBytePropertyByName(class UObject* Object, const struct FName& PropertyName, unsigned char Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetBytePropertyByName");

        UKismetSystemLibrary_SetBytePropertyByName_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetBoolPropertyByName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_SetBoolPropertyByName(class UObject* Object, const struct FName& PropertyName, bool Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetBoolPropertyByName");

        UKismetSystemLibrary_SetBoolPropertyByName_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetAssetPropertyByName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TAssetPtr<class UObject>       Value                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void UKismetSystemLibrary::STATIC_SetAssetPropertyByName(class UObject* Object, const struct FName& PropertyName, TAssetPtr<class UObject> Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetAssetPropertyByName");

        UKismetSystemLibrary_SetAssetPropertyByName_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.SetAssetClassPropertyByName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TAssetPtr<class UClass>        Value                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void UKismetSystemLibrary::STATIC_SetAssetClassPropertyByName(class UObject* Object, const struct FName& PropertyName, TAssetPtr<class UClass> Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetAssetClassPropertyByName");

        UKismetSystemLibrary_SetAssetClassPropertyByName_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.RetriggerableDelay
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLatentActionInfo       LatentInfo                     (CPF_Parm)

    void UKismetSystemLibrary::STATIC_RetriggerableDelay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.RetriggerableDelay");

        UKismetSystemLibrary_RetriggerableDelay_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Duration = Duration;
        params.LatentInfo = LatentInfo;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.ResetGamepadAssignmentToController
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            ControllerId                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_ResetGamepadAssignmentToController(int ControllerId)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ResetGamepadAssignmentToController");

        UKismetSystemLibrary_ResetGamepadAssignmentToController_Params params;
        params.ControllerId = ControllerId;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.ResetGamepadAssignments
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)

    void UKismetSystemLibrary::STATIC_ResetGamepadAssignments()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ResetGamepadAssignments");

        UKismetSystemLibrary_ResetGamepadAssignments_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.RegisterForRemoteNotifications
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)

    void UKismetSystemLibrary::STATIC_RegisterForRemoteNotifications()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.RegisterForRemoteNotifications");

        UKismetSystemLibrary_RegisterForRemoteNotifications_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.QuitGame
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class APlayerController*       SpecificPlayer                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EQuitPreference>   QuitPreference                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, TEnumAsByte<EQuitPreference> QuitPreference)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.QuitGame");

        UKismetSystemLibrary_QuitGame_Params params;
        params.WorldContextObject = WorldContextObject;
        params.SpecificPlayer = SpecificPlayer;
        params.QuitPreference = QuitPreference;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.PrintWarning
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FString                 inString                       (CPF_Parm, CPF_ZeroConstructor)

    void UKismetSystemLibrary::STATIC_PrintWarning(const struct FString& inString)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.PrintWarning");

        UKismetSystemLibrary_PrintWarning_Params params;
        params.inString = inString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.PrintText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FText                   InText                         (CPF_ConstParm, CPF_Parm)
    // bool                           bPrintToScreen                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bPrintToLog                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TextColor                      (CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_PrintText(class UObject* WorldContextObject, const struct FText& InText, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.PrintText");

        UKismetSystemLibrary_PrintText_Params params;
        params.WorldContextObject = WorldContextObject;
        params.InText = InText;
        params.bPrintToScreen = bPrintToScreen;
        params.bPrintToLog = bPrintToLog;
        params.TextColor = TextColor;
        params.Duration = Duration;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.PrintString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 inString                       (CPF_Parm, CPF_ZeroConstructor)
    // bool                           bPrintToScreen                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bPrintToLog                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TextColor                      (CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_PrintString(class UObject* WorldContextObject, const struct FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.PrintString");

        UKismetSystemLibrary_PrintString_Params params;
        params.WorldContextObject = WorldContextObject;
        params.inString = inString;
        params.bPrintToScreen = bPrintToScreen;
        params.bPrintToLog = bPrintToLog;
        params.TextColor = TextColor;
        params.Duration = Duration;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // DelegateFunction Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature
    // (FUNC_Public, FUNC_Delegate)
    // Parameters:
    // class UObject*                 Loaded                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::OnAssetLoaded__DelegateSignature(class UObject* Loaded)
    {
        static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature");

        UKismetSystemLibrary_OnAssetLoaded__DelegateSignature_Params params;
        params.Loaded = Loaded;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // DelegateFunction Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature
    // (FUNC_Public, FUNC_Delegate)
    // Parameters:
    // class UClass*                  Loaded                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::OnAssetClassLoaded__DelegateSignature(class UClass* Loaded)
    {
        static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature");

        UKismetSystemLibrary_OnAssetClassLoaded__DelegateSignature_Params params;
        params.Loaded = Loaded;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.MoveComponentTo
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class USceneComponent*         Component                      (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FVector                 TargetRelativeLocation         (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                TargetRelativeRotation         (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bEaseOut                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bEaseIn                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OverTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bForceShortestRotationPath     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EMoveComponentAction> MoveAction                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLatentActionInfo       LatentInfo                     (CPF_Parm)

    void UKismetSystemLibrary::STATIC_MoveComponentTo(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, TEnumAsByte<EMoveComponentAction> MoveAction, const struct FLatentActionInfo& LatentInfo)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.MoveComponentTo");

        UKismetSystemLibrary_MoveComponentTo_Params params;
        params.Component = Component;
        params.TargetRelativeLocation = TargetRelativeLocation;
        params.TargetRelativeRotation = TargetRelativeRotation;
        params.bEaseOut = bEaseOut;
        params.bEaseIn = bEaseIn;
        params.OverTime = OverTime;
        params.bForceShortestRotationPath = bForceShortestRotationPath;
        params.MoveAction = MoveAction;
        params.LatentInfo = LatentInfo;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.MakeLiteralText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FText                   Value                          (CPF_Parm)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetSystemLibrary::STATIC_MakeLiteralText(const struct FText& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.MakeLiteralText");

        UKismetSystemLibrary_MakeLiteralText_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.MakeLiteralString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 Value                          (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetSystemLibrary::STATIC_MakeLiteralString(const struct FString& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.MakeLiteralString");

        UKismetSystemLibrary_MakeLiteralString_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.MakeLiteralName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FName                   Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FName UKismetSystemLibrary::STATIC_MakeLiteralName(const struct FName& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.MakeLiteralName");

        UKismetSystemLibrary_MakeLiteralName_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.MakeLiteralInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetSystemLibrary::STATIC_MakeLiteralInt(int Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.MakeLiteralInt");

        UKismetSystemLibrary_MakeLiteralInt_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.MakeLiteralFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetSystemLibrary::STATIC_MakeLiteralFloat(float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.MakeLiteralFloat");

        UKismetSystemLibrary_MakeLiteralFloat_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.MakeLiteralByte
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // unsigned char                  Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    unsigned char UKismetSystemLibrary::STATIC_MakeLiteralByte(unsigned char Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.MakeLiteralByte");

        UKismetSystemLibrary_MakeLiteralByte_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.MakeLiteralBool
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_MakeLiteralBool(bool Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.MakeLiteralBool");

        UKismetSystemLibrary_MakeLiteralBool_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.LoadInterstitialAd
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            AdIdIndex                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_LoadInterstitialAd(int AdIdIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.LoadInterstitialAd");

        UKismetSystemLibrary_LoadInterstitialAd_Params params;
        params.AdIdIndex = AdIdIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.LoadAssetClass
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TAssetPtr<class UClass>        AssetClass                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FScriptDelegate         OnLoaded                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FLatentActionInfo       LatentInfo                     (CPF_Parm)

    void UKismetSystemLibrary::STATIC_LoadAssetClass(class UObject* WorldContextObject, TAssetPtr<class UClass> AssetClass, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.LoadAssetClass");

        UKismetSystemLibrary_LoadAssetClass_Params params;
        params.WorldContextObject = WorldContextObject;
        params.AssetClass = AssetClass;
        params.OnLoaded = OnLoaded;
        params.LatentInfo = LatentInfo;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.LoadAsset
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TAssetPtr<class UObject>       Asset                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FScriptDelegate         OnLoaded                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FLatentActionInfo       LatentInfo                     (CPF_Parm)

    void UKismetSystemLibrary::STATIC_LoadAsset(class UObject* WorldContextObject, TAssetPtr<class UObject> Asset, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.LoadAsset");

        UKismetSystemLibrary_LoadAsset_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Asset = Asset;
        params.OnLoaded = OnLoaded;
        params.LatentInfo = LatentInfo;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.LineTraceSingleForObjects
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Start                          (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 End                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              OutHit                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bIgnoreSelf                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TraceColor                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            TraceHitColor                  (CPF_Parm, CPF_IsPlainOldData)
    // float                          DrawTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_LineTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.LineTraceSingleForObjects");

        UKismetSystemLibrary_LineTraceSingleForObjects_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Start = Start;
        params.End = End;
        params.ObjectTypes = ObjectTypes;
        params.bTraceComplex = bTraceComplex;
        params.ActorsToIgnore = ActorsToIgnore;
        params.DrawDebugType = DrawDebugType;
        params.bIgnoreSelf = bIgnoreSelf;
        params.TraceColor = TraceColor;
        params.TraceHitColor = TraceHitColor;
        params.DrawTime = DrawTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHit != nullptr)
            *OutHit = params.OutHit;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.LineTraceSingle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Start                          (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 End                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              OutHit                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bIgnoreSelf                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TraceColor                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            TraceHitColor                  (CPF_Parm, CPF_IsPlainOldData)
    // float                          DrawTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_LineTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.LineTraceSingle");

        UKismetSystemLibrary_LineTraceSingle_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Start = Start;
        params.End = End;
        params.TraceChannel = TraceChannel;
        params.bTraceComplex = bTraceComplex;
        params.ActorsToIgnore = ActorsToIgnore;
        params.DrawDebugType = DrawDebugType;
        params.bIgnoreSelf = bIgnoreSelf;
        params.TraceColor = TraceColor;
        params.TraceHitColor = TraceHitColor;
        params.DrawTime = DrawTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHit != nullptr)
            *OutHit = params.OutHit;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.LineTraceMultiForObjects
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Start                          (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 End                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<struct FHitResult>      OutHits                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           bIgnoreSelf                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TraceColor                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            TraceHitColor                  (CPF_Parm, CPF_IsPlainOldData)
    // float                          DrawTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_LineTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.LineTraceMultiForObjects");

        UKismetSystemLibrary_LineTraceMultiForObjects_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Start = Start;
        params.End = End;
        params.ObjectTypes = ObjectTypes;
        params.bTraceComplex = bTraceComplex;
        params.ActorsToIgnore = ActorsToIgnore;
        params.DrawDebugType = DrawDebugType;
        params.bIgnoreSelf = bIgnoreSelf;
        params.TraceColor = TraceColor;
        params.TraceHitColor = TraceHitColor;
        params.DrawTime = DrawTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHits != nullptr)
            *OutHits = params.OutHits;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.LineTraceMulti
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Start                          (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 End                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<struct FHitResult>      OutHits                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           bIgnoreSelf                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TraceColor                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            TraceHitColor                  (CPF_Parm, CPF_IsPlainOldData)
    // float                          DrawTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_LineTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.LineTraceMulti");

        UKismetSystemLibrary_LineTraceMulti_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Start = Start;
        params.End = End;
        params.TraceChannel = TraceChannel;
        params.bTraceComplex = bTraceComplex;
        params.ActorsToIgnore = ActorsToIgnore;
        params.DrawDebugType = DrawDebugType;
        params.bIgnoreSelf = bIgnoreSelf;
        params.TraceColor = TraceColor;
        params.TraceHitColor = TraceHitColor;
        params.DrawTime = DrawTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHits != nullptr)
            *OutHits = params.OutHits;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.LaunchURL
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FString                 URL                            (CPF_Parm, CPF_ZeroConstructor)

    void UKismetSystemLibrary::STATIC_LaunchURL(const struct FString& URL)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.LaunchURL");

        UKismetSystemLibrary_LaunchURL_Params params;
        params.URL = URL;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.K2_UnPauseTimerHandle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTimerHandle            Handle                         (CPF_Parm)

    void UKismetSystemLibrary::STATIC_K2_UnPauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_UnPauseTimerHandle");

        UKismetSystemLibrary_K2_UnPauseTimerHandle_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Handle = Handle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FScriptDelegate         Delegate                       (CPF_Parm, CPF_ZeroConstructor)

    void UKismetSystemLibrary::STATIC_K2_UnPauseTimerDelegate(const struct FScriptDelegate& Delegate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate");

        UKismetSystemLibrary_K2_UnPauseTimerDelegate_Params params;
        params.Delegate = Delegate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.K2_UnPauseTimer
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 FunctionName                   (CPF_Parm, CPF_ZeroConstructor)

    void UKismetSystemLibrary::STATIC_K2_UnPauseTimer(class UObject* Object, const struct FString& FunctionName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_UnPauseTimer");

        UKismetSystemLibrary_K2_UnPauseTimer_Params params;
        params.Object = Object;
        params.FunctionName = FunctionName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.K2_TimerExistsHandle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTimerHandle            Handle                         (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_K2_TimerExistsHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_TimerExistsHandle");

        UKismetSystemLibrary_K2_TimerExistsHandle_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Handle = Handle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_TimerExistsDelegate
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FScriptDelegate         Delegate                       (CPF_Parm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_K2_TimerExistsDelegate(const struct FScriptDelegate& Delegate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_TimerExistsDelegate");

        UKismetSystemLibrary_K2_TimerExistsDelegate_Params params;
        params.Delegate = Delegate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_TimerExists
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 FunctionName                   (CPF_Parm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_K2_TimerExists(class UObject* Object, const struct FString& FunctionName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_TimerExists");

        UKismetSystemLibrary_K2_TimerExists_Params params;
        params.Object = Object;
        params.FunctionName = FunctionName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_SetTimerDelegate
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FScriptDelegate         Delegate                       (CPF_Parm, CPF_ZeroConstructor)
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bLooping                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTimerHandle            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FTimerHandle UKismetSystemLibrary::STATIC_K2_SetTimerDelegate(const struct FScriptDelegate& Delegate, float Time, bool bLooping)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_SetTimerDelegate");

        UKismetSystemLibrary_K2_SetTimerDelegate_Params params;
        params.Delegate = Delegate;
        params.Time = Time;
        params.bLooping = bLooping;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_SetTimer
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 FunctionName                   (CPF_Parm, CPF_ZeroConstructor)
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bLooping                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTimerHandle            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FTimerHandle UKismetSystemLibrary::STATIC_K2_SetTimer(class UObject* Object, const struct FString& FunctionName, float Time, bool bLooping)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_SetTimer");

        UKismetSystemLibrary_K2_SetTimer_Params params;
        params.Object = Object;
        params.FunctionName = FunctionName;
        params.Time = Time;
        params.bLooping = bLooping;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_PauseTimerHandle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTimerHandle            Handle                         (CPF_Parm)

    void UKismetSystemLibrary::STATIC_K2_PauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_PauseTimerHandle");

        UKismetSystemLibrary_K2_PauseTimerHandle_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Handle = Handle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.K2_PauseTimerDelegate
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FScriptDelegate         Delegate                       (CPF_Parm, CPF_ZeroConstructor)

    void UKismetSystemLibrary::STATIC_K2_PauseTimerDelegate(const struct FScriptDelegate& Delegate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_PauseTimerDelegate");

        UKismetSystemLibrary_K2_PauseTimerDelegate_Params params;
        params.Delegate = Delegate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.K2_PauseTimer
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 FunctionName                   (CPF_Parm, CPF_ZeroConstructor)

    void UKismetSystemLibrary::STATIC_K2_PauseTimer(class UObject* Object, const struct FString& FunctionName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_PauseTimer");

        UKismetSystemLibrary_K2_PauseTimer_Params params;
        params.Object = Object;
        params.FunctionName = FunctionName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.K2_IsValidTimerHandle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimerHandle            Handle                         (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_K2_IsValidTimerHandle(const struct FTimerHandle& Handle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_IsValidTimerHandle");

        UKismetSystemLibrary_K2_IsValidTimerHandle_Params params;
        params.Handle = Handle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_IsTimerPausedHandle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTimerHandle            Handle                         (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_K2_IsTimerPausedHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_IsTimerPausedHandle");

        UKismetSystemLibrary_K2_IsTimerPausedHandle_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Handle = Handle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FScriptDelegate         Delegate                       (CPF_Parm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_K2_IsTimerPausedDelegate(const struct FScriptDelegate& Delegate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate");

        UKismetSystemLibrary_K2_IsTimerPausedDelegate_Params params;
        params.Delegate = Delegate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_IsTimerPaused
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 FunctionName                   (CPF_Parm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_K2_IsTimerPaused(class UObject* Object, const struct FString& FunctionName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_IsTimerPaused");

        UKismetSystemLibrary_K2_IsTimerPaused_Params params;
        params.Object = Object;
        params.FunctionName = FunctionName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_IsTimerActiveHandle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTimerHandle            Handle                         (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_K2_IsTimerActiveHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_IsTimerActiveHandle");

        UKismetSystemLibrary_K2_IsTimerActiveHandle_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Handle = Handle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FScriptDelegate         Delegate                       (CPF_Parm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_K2_IsTimerActiveDelegate(const struct FScriptDelegate& Delegate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate");

        UKismetSystemLibrary_K2_IsTimerActiveDelegate_Params params;
        params.Delegate = Delegate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_IsTimerActive
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 FunctionName                   (CPF_Parm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_K2_IsTimerActive(class UObject* Object, const struct FString& FunctionName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_IsTimerActive");

        UKismetSystemLibrary_K2_IsTimerActive_Params params;
        params.Object = Object;
        params.FunctionName = FunctionName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_InvalidateTimerHandle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FTimerHandle            Handle                         (CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FTimerHandle            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FTimerHandle UKismetSystemLibrary::STATIC_K2_InvalidateTimerHandle(struct FTimerHandle* Handle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_InvalidateTimerHandle");

        UKismetSystemLibrary_K2_InvalidateTimerHandle_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Handle != nullptr)
            *Handle = params.Handle;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTimerHandle            Handle                         (CPF_Parm)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetSystemLibrary::STATIC_K2_GetTimerRemainingTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle");

        UKismetSystemLibrary_K2_GetTimerRemainingTimeHandle_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Handle = Handle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FScriptDelegate         Delegate                       (CPF_Parm, CPF_ZeroConstructor)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetSystemLibrary::STATIC_K2_GetTimerRemainingTimeDelegate(const struct FScriptDelegate& Delegate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate");

        UKismetSystemLibrary_K2_GetTimerRemainingTimeDelegate_Params params;
        params.Delegate = Delegate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 FunctionName                   (CPF_Parm, CPF_ZeroConstructor)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetSystemLibrary::STATIC_K2_GetTimerRemainingTime(class UObject* Object, const struct FString& FunctionName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTime");

        UKismetSystemLibrary_K2_GetTimerRemainingTime_Params params;
        params.Object = Object;
        params.FunctionName = FunctionName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTimerHandle            Handle                         (CPF_Parm)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetSystemLibrary::STATIC_K2_GetTimerElapsedTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle");

        UKismetSystemLibrary_K2_GetTimerElapsedTimeHandle_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Handle = Handle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FScriptDelegate         Delegate                       (CPF_Parm, CPF_ZeroConstructor)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetSystemLibrary::STATIC_K2_GetTimerElapsedTimeDelegate(const struct FScriptDelegate& Delegate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate");

        UKismetSystemLibrary_K2_GetTimerElapsedTimeDelegate_Params params;
        params.Delegate = Delegate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 FunctionName                   (CPF_Parm, CPF_ZeroConstructor)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetSystemLibrary::STATIC_K2_GetTimerElapsedTime(class UObject* Object, const struct FString& FunctionName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTime");

        UKismetSystemLibrary_K2_GetTimerElapsedTime_Params params;
        params.Object = Object;
        params.FunctionName = FunctionName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.K2_ClearTimerHandle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTimerHandle            Handle                         (CPF_Parm)

    void UKismetSystemLibrary::STATIC_K2_ClearTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_ClearTimerHandle");

        UKismetSystemLibrary_K2_ClearTimerHandle_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Handle = Handle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.K2_ClearTimerDelegate
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FScriptDelegate         Delegate                       (CPF_Parm, CPF_ZeroConstructor)

    void UKismetSystemLibrary::STATIC_K2_ClearTimerDelegate(const struct FScriptDelegate& Delegate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_ClearTimerDelegate");

        UKismetSystemLibrary_K2_ClearTimerDelegate_Params params;
        params.Delegate = Delegate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.K2_ClearTimer
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 FunctionName                   (CPF_Parm, CPF_ZeroConstructor)

    void UKismetSystemLibrary::STATIC_K2_ClearTimer(class UObject* Object, const struct FString& FunctionName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_ClearTimer");

        UKismetSystemLibrary_K2_ClearTimer_Params params;
        params.Object = Object;
        params.FunctionName = FunctionName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.K2_ClearAndInvalidateTimerHandle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTimerHandle            Handle                         (CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void UKismetSystemLibrary::STATIC_K2_ClearAndInvalidateTimerHandle(class UObject* WorldContextObject, struct FTimerHandle* Handle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_ClearAndInvalidateTimerHandle");

        UKismetSystemLibrary_K2_ClearAndInvalidateTimerHandle_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Handle != nullptr)
            *Handle = params.Handle;
    }


    // Function Engine.KismetSystemLibrary.IsValidClass
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UClass*                  Class                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_IsValidClass(class UClass* Class)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.IsValidClass");

        UKismetSystemLibrary_IsValidClass_Params params;
        params.Class = Class;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.IsValid
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 Object                         (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_IsValid(class UObject* Object)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.IsValid");

        UKismetSystemLibrary_IsValid_Params params;
        params.Object = Object;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.IsStandalone
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_IsStandalone(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.IsStandalone");

        UKismetSystemLibrary_IsStandalone_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.IsServer
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_IsServer(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.IsServer");

        UKismetSystemLibrary_IsServer_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.IsPackagedForDistribution
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_IsPackagedForDistribution()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.IsPackagedForDistribution");

        UKismetSystemLibrary_IsPackagedForDistribution_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.IsLoggedIn
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class APlayerController*       SpecificPlayer                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_IsLoggedIn(class APlayerController* SpecificPlayer)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.IsLoggedIn");

        UKismetSystemLibrary_IsLoggedIn_Params params;
        params.SpecificPlayer = SpecificPlayer;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.IsInterstitialAdRequested
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_IsInterstitialAdRequested()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.IsInterstitialAdRequested");

        UKismetSystemLibrary_IsInterstitialAdRequested_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.IsInterstitialAdAvailable
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_IsInterstitialAdAvailable()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.IsInterstitialAdAvailable");

        UKismetSystemLibrary_IsInterstitialAdAvailable_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.IsDedicatedServer
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_IsDedicatedServer(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.IsDedicatedServer");

        UKismetSystemLibrary_IsDedicatedServer_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.IsControllerAssignedToGamepad
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            ControllerId                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_IsControllerAssignedToGamepad(int ControllerId)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.IsControllerAssignedToGamepad");

        UKismetSystemLibrary_IsControllerAssignedToGamepad_Params params;
        params.ControllerId = ControllerId;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.HideAdBanner
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)

    void UKismetSystemLibrary::STATIC_HideAdBanner()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.HideAdBanner");

        UKismetSystemLibrary_HideAdBanner_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_GetVolumeButtonsHandledBySystem()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem");

        UKismetSystemLibrary_GetVolumeButtonsHandledBySystem_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetUniqueDeviceId
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetSystemLibrary::STATIC_GetUniqueDeviceId()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetUniqueDeviceId");

        UKismetSystemLibrary_GetUniqueDeviceId_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<struct FIntPoint>       Resolutions                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_GetSupportedFullscreenResolutions(TArray<struct FIntPoint>* Resolutions)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions");

        UKismetSystemLibrary_GetSupportedFullscreenResolutions_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Resolutions != nullptr)
            *Resolutions = params.Resolutions;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetSystemLibrary::STATIC_GetRenderingMaterialQualityLevel()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel");

        UKismetSystemLibrary_GetRenderingMaterialQualityLevel_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetRenderingDetailMode
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetSystemLibrary::STATIC_GetRenderingDetailMode()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetRenderingDetailMode");

        UKismetSystemLibrary_GetRenderingDetailMode_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetPreferredLanguages
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<struct FString>         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    TArray<struct FString> UKismetSystemLibrary::STATIC_GetPreferredLanguages()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetPreferredLanguages");

        UKismetSystemLibrary_GetPreferredLanguages_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetPlatformUserName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetSystemLibrary::STATIC_GetPlatformUserName()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetPlatformUserName");

        UKismetSystemLibrary_GetPlatformUserName_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetPathName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 Object                         (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetSystemLibrary::STATIC_GetPathName(class UObject* Object)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetPathName");

        UKismetSystemLibrary_GetPathName_Params params;
        params.Object = Object;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetObjectName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 Object                         (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetSystemLibrary::STATIC_GetObjectName(class UObject* Object)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetObjectName");

        UKismetSystemLibrary_GetObjectName_Params params;
        params.Object = Object;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetMinYResolutionForUI
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetSystemLibrary::STATIC_GetMinYResolutionForUI()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetMinYResolutionForUI");

        UKismetSystemLibrary_GetMinYResolutionForUI_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetMinYResolutionFor3DView
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetSystemLibrary::STATIC_GetMinYResolutionFor3DView()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetMinYResolutionFor3DView");

        UKismetSystemLibrary_GetMinYResolutionFor3DView_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetLocalCurrencySymbol
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetSystemLibrary::STATIC_GetLocalCurrencySymbol()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetLocalCurrencySymbol");

        UKismetSystemLibrary_GetLocalCurrencySymbol_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetLocalCurrencyCode
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetSystemLibrary::STATIC_GetLocalCurrencyCode()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetLocalCurrencyCode");

        UKismetSystemLibrary_GetLocalCurrencyCode_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetGameTimeInSeconds
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetSystemLibrary::STATIC_GetGameTimeInSeconds(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetGameTimeInSeconds");

        UKismetSystemLibrary_GetGameTimeInSeconds_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetGameName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetSystemLibrary::STATIC_GetGameName()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetGameName");

        UKismetSystemLibrary_GetGameName_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetGameBundleId
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetSystemLibrary::STATIC_GetGameBundleId()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetGameBundleId");

        UKismetSystemLibrary_GetGameBundleId_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetEngineVersion
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetSystemLibrary::STATIC_GetEngineVersion()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetEngineVersion");

        UKismetSystemLibrary_GetEngineVersion_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetDisplayName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 Object                         (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetSystemLibrary::STATIC_GetDisplayName(class UObject* Object)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetDisplayName");

        UKismetSystemLibrary_GetDisplayName_Params params;
        params.Object = Object;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetDeviceId
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetSystemLibrary::STATIC_GetDeviceId()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetDeviceId");

        UKismetSystemLibrary_GetDeviceId_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetConvenientWindowedResolutions
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<struct FIntPoint>       Resolutions                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_GetConvenientWindowedResolutions(TArray<struct FIntPoint>* Resolutions)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetConvenientWindowedResolutions");

        UKismetSystemLibrary_GetConvenientWindowedResolutions_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Resolutions != nullptr)
            *Resolutions = params.Resolutions;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetComponentBounds
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class USceneComponent*         Component                      (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FVector                 Origin                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 BoxExtent                      (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // float                          SphereRadius                   (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_GetComponentBounds(class USceneComponent* Component, struct FVector* Origin, struct FVector* BoxExtent, float* SphereRadius)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetComponentBounds");

        UKismetSystemLibrary_GetComponentBounds_Params params;
        params.Component = Component;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Origin != nullptr)
            *Origin = params.Origin;
        if (BoxExtent != nullptr)
            *BoxExtent = params.BoxExtent;
        if (SphereRadius != nullptr)
            *SphereRadius = params.SphereRadius;
    }


    // Function Engine.KismetSystemLibrary.GetCommandLine
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetSystemLibrary::STATIC_GetCommandLine()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetCommandLine");

        UKismetSystemLibrary_GetCommandLine_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetClassDisplayName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UClass*                  Class                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetSystemLibrary::STATIC_GetClassDisplayName(class UClass* Class)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetClassDisplayName");

        UKismetSystemLibrary_GetClassDisplayName_Params params;
        params.Class = Class;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetAdIDCount
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetSystemLibrary::STATIC_GetAdIDCount()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetAdIDCount");

        UKismetSystemLibrary_GetAdIDCount_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.GetActorListFromComponentList
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<class UPrimitiveComponent*> ComponentList                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // class UClass*                  ActorClassFilter               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          OutActorList                   (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)

    void UKismetSystemLibrary::STATIC_GetActorListFromComponentList(TArray<class UPrimitiveComponent*> ComponentList, class UClass* ActorClassFilter, TArray<class AActor*>* OutActorList)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetActorListFromComponentList");

        UKismetSystemLibrary_GetActorListFromComponentList_Params params;
        params.ComponentList = ComponentList;
        params.ActorClassFilter = ActorClassFilter;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutActorList != nullptr)
            *OutActorList = params.OutActorList;
    }


    // Function Engine.KismetSystemLibrary.GetActorBounds
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class AActor*                  Actor                          (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Origin                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 BoxExtent                      (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_GetActorBounds(class AActor* Actor, struct FVector* Origin, struct FVector* BoxExtent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetActorBounds");

        UKismetSystemLibrary_GetActorBounds_Params params;
        params.Actor = Actor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Origin != nullptr)
            *Origin = params.Origin;
        if (BoxExtent != nullptr)
            *BoxExtent = params.BoxExtent;
    }


    // Function Engine.KismetSystemLibrary.ForceCloseAdBanner
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)

    void UKismetSystemLibrary::STATIC_ForceCloseAdBanner()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ForceCloseAdBanner");

        UKismetSystemLibrary_ForceCloseAdBanner_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.FlushPersistentDebugLines
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_FlushPersistentDebugLines(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.FlushPersistentDebugLines");

        UKismetSystemLibrary_FlushPersistentDebugLines_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.FlushDebugStrings
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_FlushDebugStrings(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.FlushDebugStrings");

        UKismetSystemLibrary_FlushDebugStrings_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.ExecuteConsoleCommand
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 Command                        (CPF_Parm, CPF_ZeroConstructor)
    // class APlayerController*       SpecificPlayer                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_ExecuteConsoleCommand(class UObject* WorldContextObject, const struct FString& Command, class APlayerController* SpecificPlayer)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ExecuteConsoleCommand");

        UKismetSystemLibrary_ExecuteConsoleCommand_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Command = Command;
        params.SpecificPlayer = SpecificPlayer;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.DrawDebugString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 TextLocation                   (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FString                 Text                           (CPF_Parm, CPF_ZeroConstructor)
    // class AActor*                  TestBaseActor                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TextColor                      (CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_DrawDebugString(class UObject* WorldContextObject, const struct FVector& TextLocation, const struct FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugString");

        UKismetSystemLibrary_DrawDebugString_Params params;
        params.WorldContextObject = WorldContextObject;
        params.TextLocation = TextLocation;
        params.Text = Text;
        params.TestBaseActor = TestBaseActor;
        params.TextColor = TextColor;
        params.Duration = Duration;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.DrawDebugSphere
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Center                         (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Segments                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            LineColor                      (CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Thickness                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_DrawDebugSphere(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, float Thickness)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugSphere");

        UKismetSystemLibrary_DrawDebugSphere_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Center = Center;
        params.Radius = Radius;
        params.Segments = Segments;
        params.LineColor = LineColor;
        params.Duration = Duration;
        params.Thickness = Thickness;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.DrawDebugPoint
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Position                       (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          Size                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            PointColor                     (CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_DrawDebugPoint(class UObject* WorldContextObject, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugPoint");

        UKismetSystemLibrary_DrawDebugPoint_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Position = Position;
        params.Size = Size;
        params.PointColor = PointColor;
        params.Duration = Duration;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.DrawDebugPlane
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FPlane                  PlaneCoordinates               (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          Size                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            PlaneColor                     (CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_DrawDebugPlane(class UObject* WorldContextObject, const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugPlane");

        UKismetSystemLibrary_DrawDebugPlane_Params params;
        params.WorldContextObject = WorldContextObject;
        params.PlaneCoordinates = PlaneCoordinates;
        params.Location = Location;
        params.Size = Size;
        params.PlaneColor = PlaneColor;
        params.Duration = Duration;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.DrawDebugLine
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 LineStart                      (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 LineEnd                        (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            LineColor                      (CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Thickness                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_DrawDebugLine(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugLine");

        UKismetSystemLibrary_DrawDebugLine_Params params;
        params.WorldContextObject = WorldContextObject;
        params.LineStart = LineStart;
        params.LineEnd = LineEnd;
        params.LineColor = LineColor;
        params.Duration = Duration;
        params.Thickness = Thickness;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.DrawDebugFrustum
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              FrustumTransform               (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FLinearColor            FrustumColor                   (CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Thickness                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_DrawDebugFrustum(class UObject* WorldContextObject, const struct FTransform& FrustumTransform, const struct FLinearColor& FrustumColor, float Duration, float Thickness)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugFrustum");

        UKismetSystemLibrary_DrawDebugFrustum_Params params;
        params.WorldContextObject = WorldContextObject;
        params.FrustumTransform = FrustumTransform;
        params.FrustumColor = FrustumColor;
        params.Duration = Duration;
        params.Thickness = Thickness;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FDebugFloatHistory      FloatHistory                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FTransform              DrawTransform                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector2D               DrawSize                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            DrawColor                      (CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FTransform& DrawTransform, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform");

        UKismetSystemLibrary_DrawDebugFloatHistoryTransform_Params params;
        params.WorldContextObject = WorldContextObject;
        params.FloatHistory = FloatHistory;
        params.DrawTransform = DrawTransform;
        params.DrawSize = DrawSize;
        params.DrawColor = DrawColor;
        params.Duration = Duration;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FDebugFloatHistory      FloatHistory                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FVector                 DrawLocation                   (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               DrawSize                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            DrawColor                      (CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FVector& DrawLocation, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation");

        UKismetSystemLibrary_DrawDebugFloatHistoryLocation_Params params;
        params.WorldContextObject = WorldContextObject;
        params.FloatHistory = FloatHistory;
        params.DrawLocation = DrawLocation;
        params.DrawSize = DrawSize;
        params.DrawColor = DrawColor;
        params.Duration = Duration;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.DrawDebugCylinder
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Start                          (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 End                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Segments                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            LineColor                      (CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Thickness                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_DrawDebugCylinder(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, float Thickness)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugCylinder");

        UKismetSystemLibrary_DrawDebugCylinder_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Start = Start;
        params.End = End;
        params.Radius = Radius;
        params.Segments = Segments;
        params.LineColor = LineColor;
        params.Duration = Duration;
        params.Thickness = Thickness;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.DrawDebugCoordinateSystem
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 AxisLoc                        (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                AxisRot                        (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          Scale                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Thickness                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_DrawDebugCoordinateSystem(class UObject* WorldContextObject, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugCoordinateSystem");

        UKismetSystemLibrary_DrawDebugCoordinateSystem_Params params;
        params.WorldContextObject = WorldContextObject;
        params.AxisLoc = AxisLoc;
        params.AxisRot = AxisRot;
        params.Scale = Scale;
        params.Duration = Duration;
        params.Thickness = Thickness;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.DrawDebugConeInDegrees
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Origin                         (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Direction                      (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          Length                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          AngleWidth                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          AngleHeight                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            NumSides                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            LineColor                      (CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Thickness                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_DrawDebugConeInDegrees(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugConeInDegrees");

        UKismetSystemLibrary_DrawDebugConeInDegrees_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Origin = Origin;
        params.Direction = Direction;
        params.Length = Length;
        params.AngleWidth = AngleWidth;
        params.AngleHeight = AngleHeight;
        params.NumSides = NumSides;
        params.LineColor = LineColor;
        params.Duration = Duration;
        params.Thickness = Thickness;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.DrawDebugCone
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Origin                         (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Direction                      (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          Length                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          AngleWidth                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          AngleHeight                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            NumSides                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            LineColor                      (CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Thickness                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_DrawDebugCone(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugCone");

        UKismetSystemLibrary_DrawDebugCone_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Origin = Origin;
        params.Direction = Direction;
        params.Length = Length;
        params.AngleWidth = AngleWidth;
        params.AngleHeight = AngleHeight;
        params.NumSides = NumSides;
        params.LineColor = LineColor;
        params.Duration = Duration;
        params.Thickness = Thickness;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.DrawDebugCircle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Center                         (CPF_Parm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            NumSegments                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            LineColor                      (CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Thickness                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 YAxis                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ZAxis                          (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bDrawAxis                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_DrawDebugCircle(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int NumSegments, const struct FLinearColor& LineColor, float Duration, float Thickness, const struct FVector& YAxis, const struct FVector& ZAxis, bool bDrawAxis)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugCircle");

        UKismetSystemLibrary_DrawDebugCircle_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Center = Center;
        params.Radius = Radius;
        params.NumSegments = NumSegments;
        params.LineColor = LineColor;
        params.Duration = Duration;
        params.Thickness = Thickness;
        params.YAxis = YAxis;
        params.ZAxis = ZAxis;
        params.bDrawAxis = bDrawAxis;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.DrawDebugCapsule
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Center                         (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          HalfHeight                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            LineColor                      (CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Thickness                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_DrawDebugCapsule(class UObject* WorldContextObject, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, float Thickness)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugCapsule");

        UKismetSystemLibrary_DrawDebugCapsule_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Center = Center;
        params.HalfHeight = HalfHeight;
        params.Radius = Radius;
        params.Rotation = Rotation;
        params.LineColor = LineColor;
        params.Duration = Duration;
        params.Thickness = Thickness;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.DrawDebugCamera
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class ACameraActor*            CameraActor                    (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            CameraColor                    (CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_DrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugCamera");

        UKismetSystemLibrary_DrawDebugCamera_Params params;
        params.CameraActor = CameraActor;
        params.CameraColor = CameraColor;
        params.Duration = Duration;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.DrawDebugBox
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Center                         (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Extent                         (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            LineColor                      (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Thickness                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_DrawDebugBox(class UObject* WorldContextObject, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, float Thickness)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugBox");

        UKismetSystemLibrary_DrawDebugBox_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Center = Center;
        params.Extent = Extent;
        params.LineColor = LineColor;
        params.Rotation = Rotation;
        params.Duration = Duration;
        params.Thickness = Thickness;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.DrawDebugArrow
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 LineStart                      (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 LineEnd                        (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          ArrowSize                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            LineColor                      (CPF_Parm, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Thickness                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_DrawDebugArrow(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, float Thickness)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugArrow");

        UKismetSystemLibrary_DrawDebugArrow_Params params;
        params.WorldContextObject = WorldContextObject;
        params.LineStart = LineStart;
        params.LineEnd = LineEnd;
        params.ArrowSize = ArrowSize;
        params.LineColor = LineColor;
        params.Duration = Duration;
        params.Thickness = Thickness;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.DoesImplementInterface
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 TestObject                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  Interface                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_DoesImplementInterface(class UObject* TestObject, class UClass* Interface)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DoesImplementInterface");

        UKismetSystemLibrary_DoesImplementInterface_Params params;
        params.TestObject = TestObject;
        params.Interface = Interface;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.Delay
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Duration                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLatentActionInfo       LatentInfo                     (CPF_Parm)

    void UKismetSystemLibrary::STATIC_Delay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.Delay");

        UKismetSystemLibrary_Delay_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Duration = Duration;
        params.LatentInfo = LatentInfo;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.CreateCopyForUndoBuffer
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 ObjectToModify                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_CreateCopyForUndoBuffer(class UObject* ObjectToModify)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CreateCopyForUndoBuffer");

        UKismetSystemLibrary_CreateCopyForUndoBuffer_Params params;
        params.ObjectToModify = ObjectToModify;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.Conv_InterfaceToObject
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TScriptInterface<class UInterface> Interface                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // class UObject*                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UObject* UKismetSystemLibrary::STATIC_Conv_InterfaceToObject(const TScriptInterface<class UInterface>& Interface)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.Conv_InterfaceToObject");

        UKismetSystemLibrary_Conv_InterfaceToObject_Params params;
        params.Interface = Interface;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.Conv_AssetToObject
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TAssetPtr<class UObject>       Asset                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // class UObject*                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UObject* UKismetSystemLibrary::STATIC_Conv_AssetToObject(TAssetPtr<class UObject> Asset)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.Conv_AssetToObject");

        UKismetSystemLibrary_Conv_AssetToObject_Params params;
        params.Asset = Asset;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.Conv_AssetClassToClass
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TAssetPtr<class UClass>        AssetClass                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // class UClass*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UClass* UKismetSystemLibrary::STATIC_Conv_AssetClassToClass(TAssetPtr<class UClass> AssetClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.Conv_AssetClassToClass");

        UKismetSystemLibrary_Conv_AssetClassToClass_Params params;
        params.AssetClass = AssetClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.ControlScreensaver
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bAllowScreenSaver              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetSystemLibrary::STATIC_ControlScreensaver(bool bAllowScreenSaver)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ControlScreensaver");

        UKismetSystemLibrary_ControlScreensaver_Params params;
        params.bAllowScreenSaver = bAllowScreenSaver;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.ComponentOverlapComponents
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UPrimitiveComponent*     Component                      (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FTransform              ComponentTransform             (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // class UClass*                  ComponentClassFilter           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TArray<class UPrimitiveComponent*> OutComponents                  (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_ComponentOverlapComponents(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ComponentOverlapComponents");

        UKismetSystemLibrary_ComponentOverlapComponents_Params params;
        params.Component = Component;
        params.ComponentTransform = ComponentTransform;
        params.ObjectTypes = ObjectTypes;
        params.ComponentClassFilter = ComponentClassFilter;
        params.ActorsToIgnore = ActorsToIgnore;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutComponents != nullptr)
            *OutComponents = params.OutComponents;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.ComponentOverlapActors
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UPrimitiveComponent*     Component                      (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FTransform              ComponentTransform             (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // class UClass*                  ActorClassFilter               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TArray<class AActor*>          OutActors                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_ComponentOverlapActors(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ComponentOverlapActors");

        UKismetSystemLibrary_ComponentOverlapActors_Params params;
        params.Component = Component;
        params.ComponentTransform = ComponentTransform;
        params.ObjectTypes = ObjectTypes;
        params.ActorClassFilter = ActorClassFilter;
        params.ActorsToIgnore = ActorsToIgnore;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutActors != nullptr)
            *OutActors = params.OutActors;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.CollectGarbage
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)

    void UKismetSystemLibrary::STATIC_CollectGarbage()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CollectGarbage");

        UKismetSystemLibrary_CollectGarbage_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Start                          (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 End                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          HalfHeight                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              OutHit                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bIgnoreSelf                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TraceColor                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            TraceHitColor                  (CPF_Parm, CPF_IsPlainOldData)
    // float                          DrawTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_CapsuleTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects");

        UKismetSystemLibrary_CapsuleTraceSingleForObjects_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Start = Start;
        params.End = End;
        params.Radius = Radius;
        params.HalfHeight = HalfHeight;
        params.ObjectTypes = ObjectTypes;
        params.bTraceComplex = bTraceComplex;
        params.ActorsToIgnore = ActorsToIgnore;
        params.DrawDebugType = DrawDebugType;
        params.bIgnoreSelf = bIgnoreSelf;
        params.TraceColor = TraceColor;
        params.TraceHitColor = TraceHitColor;
        params.DrawTime = DrawTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHit != nullptr)
            *OutHit = params.OutHit;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.CapsuleTraceSingle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Start                          (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 End                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          HalfHeight                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              OutHit                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bIgnoreSelf                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TraceColor                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            TraceHitColor                  (CPF_Parm, CPF_IsPlainOldData)
    // float                          DrawTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_CapsuleTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CapsuleTraceSingle");

        UKismetSystemLibrary_CapsuleTraceSingle_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Start = Start;
        params.End = End;
        params.Radius = Radius;
        params.HalfHeight = HalfHeight;
        params.TraceChannel = TraceChannel;
        params.bTraceComplex = bTraceComplex;
        params.ActorsToIgnore = ActorsToIgnore;
        params.DrawDebugType = DrawDebugType;
        params.bIgnoreSelf = bIgnoreSelf;
        params.TraceColor = TraceColor;
        params.TraceHitColor = TraceHitColor;
        params.DrawTime = DrawTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHit != nullptr)
            *OutHit = params.OutHit;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Start                          (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 End                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          HalfHeight                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<struct FHitResult>      OutHits                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           bIgnoreSelf                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TraceColor                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            TraceHitColor                  (CPF_Parm, CPF_IsPlainOldData)
    // float                          DrawTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_CapsuleTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects");

        UKismetSystemLibrary_CapsuleTraceMultiForObjects_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Start = Start;
        params.End = End;
        params.Radius = Radius;
        params.HalfHeight = HalfHeight;
        params.ObjectTypes = ObjectTypes;
        params.bTraceComplex = bTraceComplex;
        params.ActorsToIgnore = ActorsToIgnore;
        params.DrawDebugType = DrawDebugType;
        params.bIgnoreSelf = bIgnoreSelf;
        params.TraceColor = TraceColor;
        params.TraceHitColor = TraceHitColor;
        params.DrawTime = DrawTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHits != nullptr)
            *OutHits = params.OutHits;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.CapsuleTraceMulti
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Start                          (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 End                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          HalfHeight                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<struct FHitResult>      OutHits                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           bIgnoreSelf                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TraceColor                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            TraceHitColor                  (CPF_Parm, CPF_IsPlainOldData)
    // float                          DrawTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_CapsuleTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CapsuleTraceMulti");

        UKismetSystemLibrary_CapsuleTraceMulti_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Start = Start;
        params.End = End;
        params.Radius = Radius;
        params.HalfHeight = HalfHeight;
        params.TraceChannel = TraceChannel;
        params.bTraceComplex = bTraceComplex;
        params.ActorsToIgnore = ActorsToIgnore;
        params.DrawDebugType = DrawDebugType;
        params.bIgnoreSelf = bIgnoreSelf;
        params.TraceColor = TraceColor;
        params.TraceHitColor = TraceHitColor;
        params.DrawTime = DrawTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHits != nullptr)
            *OutHits = params.OutHits;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.CapsuleOverlapComponents
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 CapsulePos                     (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          HalfHeight                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // class UClass*                  ComponentClassFilter           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TArray<class UPrimitiveComponent*> OutComponents                  (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_CapsuleOverlapComponents(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CapsuleOverlapComponents");

        UKismetSystemLibrary_CapsuleOverlapComponents_Params params;
        params.WorldContextObject = WorldContextObject;
        params.CapsulePos = CapsulePos;
        params.Radius = Radius;
        params.HalfHeight = HalfHeight;
        params.ObjectTypes = ObjectTypes;
        params.ComponentClassFilter = ComponentClassFilter;
        params.ActorsToIgnore = ActorsToIgnore;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutComponents != nullptr)
            *OutComponents = params.OutComponents;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.CapsuleOverlapActors
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 CapsulePos                     (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          HalfHeight                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // class UClass*                  ActorClassFilter               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TArray<class AActor*>          OutActors                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_CapsuleOverlapActors(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CapsuleOverlapActors");

        UKismetSystemLibrary_CapsuleOverlapActors_Params params;
        params.WorldContextObject = WorldContextObject;
        params.CapsulePos = CapsulePos;
        params.Radius = Radius;
        params.HalfHeight = HalfHeight;
        params.ObjectTypes = ObjectTypes;
        params.ActorClassFilter = ActorClassFilter;
        params.ActorsToIgnore = ActorsToIgnore;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutActors != nullptr)
            *OutActors = params.OutActors;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.CanLaunchURL
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FString                 URL                            (CPF_Parm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_CanLaunchURL(const struct FString& URL)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CanLaunchURL");

        UKismetSystemLibrary_CanLaunchURL_Params params;
        params.URL = URL;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.BoxTraceSingleForObjects
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Start                          (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 End                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 HalfSize                       (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Orientation                    (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              OutHit                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bIgnoreSelf                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TraceColor                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            TraceHitColor                  (CPF_Parm, CPF_IsPlainOldData)
    // float                          DrawTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_BoxTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.BoxTraceSingleForObjects");

        UKismetSystemLibrary_BoxTraceSingleForObjects_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Start = Start;
        params.End = End;
        params.HalfSize = HalfSize;
        params.Orientation = Orientation;
        params.ObjectTypes = ObjectTypes;
        params.bTraceComplex = bTraceComplex;
        params.ActorsToIgnore = ActorsToIgnore;
        params.DrawDebugType = DrawDebugType;
        params.bIgnoreSelf = bIgnoreSelf;
        params.TraceColor = TraceColor;
        params.TraceHitColor = TraceHitColor;
        params.DrawTime = DrawTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHit != nullptr)
            *OutHit = params.OutHit;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.BoxTraceSingle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Start                          (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 End                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 HalfSize                       (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Orientation                    (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              OutHit                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bIgnoreSelf                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TraceColor                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            TraceHitColor                  (CPF_Parm, CPF_IsPlainOldData)
    // float                          DrawTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_BoxTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.BoxTraceSingle");

        UKismetSystemLibrary_BoxTraceSingle_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Start = Start;
        params.End = End;
        params.HalfSize = HalfSize;
        params.Orientation = Orientation;
        params.TraceChannel = TraceChannel;
        params.bTraceComplex = bTraceComplex;
        params.ActorsToIgnore = ActorsToIgnore;
        params.DrawDebugType = DrawDebugType;
        params.bIgnoreSelf = bIgnoreSelf;
        params.TraceColor = TraceColor;
        params.TraceHitColor = TraceHitColor;
        params.DrawTime = DrawTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHit != nullptr)
            *OutHit = params.OutHit;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.BoxTraceMultiForObjects
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Start                          (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 End                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 HalfSize                       (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Orientation                    (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<struct FHitResult>      OutHits                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           bIgnoreSelf                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TraceColor                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            TraceHitColor                  (CPF_Parm, CPF_IsPlainOldData)
    // float                          DrawTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_BoxTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.BoxTraceMultiForObjects");

        UKismetSystemLibrary_BoxTraceMultiForObjects_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Start = Start;
        params.End = End;
        params.HalfSize = HalfSize;
        params.Orientation = Orientation;
        params.ObjectTypes = ObjectTypes;
        params.bTraceComplex = bTraceComplex;
        params.ActorsToIgnore = ActorsToIgnore;
        params.DrawDebugType = DrawDebugType;
        params.bIgnoreSelf = bIgnoreSelf;
        params.TraceColor = TraceColor;
        params.TraceHitColor = TraceHitColor;
        params.DrawTime = DrawTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHits != nullptr)
            *OutHits = params.OutHits;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.BoxTraceMulti
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Start                          (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 End                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 HalfSize                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Orientation                    (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<struct FHitResult>      OutHits                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           bIgnoreSelf                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            TraceColor                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            TraceHitColor                  (CPF_Parm, CPF_IsPlainOldData)
    // float                          DrawTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_BoxTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.BoxTraceMulti");

        UKismetSystemLibrary_BoxTraceMulti_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Start = Start;
        params.End = End;
        params.HalfSize = HalfSize;
        params.Orientation = Orientation;
        params.TraceChannel = TraceChannel;
        params.bTraceComplex = bTraceComplex;
        params.ActorsToIgnore = ActorsToIgnore;
        params.DrawDebugType = DrawDebugType;
        params.bIgnoreSelf = bIgnoreSelf;
        params.TraceColor = TraceColor;
        params.TraceHitColor = TraceHitColor;
        params.DrawTime = DrawTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHits != nullptr)
            *OutHits = params.OutHits;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.BoxOverlapComponents
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 BoxPos                         (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Extent                         (CPF_Parm, CPF_IsPlainOldData)
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // class UClass*                  ComponentClassFilter           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TArray<class UPrimitiveComponent*> OutComponents                  (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_BoxOverlapComponents(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.BoxOverlapComponents");

        UKismetSystemLibrary_BoxOverlapComponents_Params params;
        params.WorldContextObject = WorldContextObject;
        params.BoxPos = BoxPos;
        params.Extent = Extent;
        params.ObjectTypes = ObjectTypes;
        params.ComponentClassFilter = ComponentClassFilter;
        params.ActorsToIgnore = ActorsToIgnore;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutComponents != nullptr)
            *OutComponents = params.OutComponents;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.BoxOverlapActors
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 BoxPos                         (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 BoxExtent                      (CPF_Parm, CPF_IsPlainOldData)
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // class UClass*                  ActorClassFilter               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TArray<class AActor*>          OutActors                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetSystemLibrary::STATIC_BoxOverlapActors(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.BoxOverlapActors");

        UKismetSystemLibrary_BoxOverlapActors_Params params;
        params.WorldContextObject = WorldContextObject;
        params.BoxPos = BoxPos;
        params.BoxExtent = BoxExtent;
        params.ObjectTypes = ObjectTypes;
        params.ActorClassFilter = ActorClassFilter;
        params.ActorsToIgnore = ActorsToIgnore;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutActors != nullptr)
            *OutActors = params.OutActors;

        return params.ReturnValue;
    }


    // Function Engine.KismetSystemLibrary.AddFloatHistorySample
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FDebugFloatHistory      FloatHistory                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FDebugFloatHistory      ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FDebugFloatHistory UKismetSystemLibrary::STATIC_AddFloatHistorySample(float Value, const struct FDebugFloatHistory& FloatHistory)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.AddFloatHistorySample");

        UKismetSystemLibrary_AddFloatHistorySample_Params params;
        params.Value = Value;
        params.FloatHistory = FloatHistory;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.UnloadStreamLevel
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   LevelName                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLatentActionInfo       LatentInfo                     (CPF_Parm)

    void UGameplayStatics::STATIC_UnloadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, const struct FLatentActionInfo& LatentInfo)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.UnloadStreamLevel");

        UGameplayStatics_UnloadStreamLevel_Params params;
        params.WorldContextObject = WorldContextObject;
        params.LevelName = LevelName;
        params.LatentInfo = LatentInfo;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.SuggestProjectileVelocity_CustomArc
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 OutLaunchVelocity              (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 StartPos                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 EndPos                         (CPF_Parm, CPF_IsPlainOldData)
    // float                          OverrideGravityZ               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ArcParam                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_SuggestProjectileVelocity_CustomArc(class UObject* WorldContextObject, const struct FVector& StartPos, const struct FVector& EndPos, float OverrideGravityZ, float ArcParam, struct FVector* OutLaunchVelocity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SuggestProjectileVelocity_CustomArc");

        UGameplayStatics_SuggestProjectileVelocity_CustomArc_Params params;
        params.WorldContextObject = WorldContextObject;
        params.StartPos = StartPos;
        params.EndPos = EndPos;
        params.OverrideGravityZ = OverrideGravityZ;
        params.ArcParam = ArcParam;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutLaunchVelocity != nullptr)
            *OutLaunchVelocity = params.OutLaunchVelocity;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.SpawnSoundAttached
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class USoundBase*              Sound                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USceneComponent*         AttachToComponent              (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   AttachPointName                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_Parm, CPF_IsPlainOldData)
    // TEnumAsByte<EAttachLocation>   LocationType                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bStopWhenAttachedToDestroyed   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          VolumeMultiplier               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          PitchMultiplier                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StartTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundAttenuation*       AttenuationSettings            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundConcurrency*       ConcurrencySettings            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UAudioComponent*         ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UAudioComponent* UGameplayStatics::STATIC_SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SpawnSoundAttached");

        UGameplayStatics_SpawnSoundAttached_Params params;
        params.Sound = Sound;
        params.AttachToComponent = AttachToComponent;
        params.AttachPointName = AttachPointName;
        params.Location = Location;
        params.Rotation = Rotation;
        params.LocationType = LocationType;
        params.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
        params.VolumeMultiplier = VolumeMultiplier;
        params.PitchMultiplier = PitchMultiplier;
        params.StartTime = StartTime;
        params.AttenuationSettings = AttenuationSettings;
        params.ConcurrencySettings = ConcurrencySettings;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.SpawnSoundAtLocation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundBase*              Sound                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_Parm, CPF_IsPlainOldData)
    // float                          VolumeMultiplier               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          PitchMultiplier                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StartTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundAttenuation*       AttenuationSettings            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundConcurrency*       ConcurrencySettings            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UAudioComponent*         ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UAudioComponent* UGameplayStatics::STATIC_SpawnSoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SpawnSoundAtLocation");

        UGameplayStatics_SpawnSoundAtLocation_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Sound = Sound;
        params.Location = Location;
        params.Rotation = Rotation;
        params.VolumeMultiplier = VolumeMultiplier;
        params.PitchMultiplier = PitchMultiplier;
        params.StartTime = StartTime;
        params.AttenuationSettings = AttenuationSettings;
        params.ConcurrencySettings = ConcurrencySettings;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.SpawnSound2D
    // (FUNC_Final, FUNC_BlueprintCosmetic, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundBase*              Sound                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          VolumeMultiplier               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          PitchMultiplier                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StartTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundConcurrency*       ConcurrencySettings            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bPersistAcrossLevelTransition  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UAudioComponent*         ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UAudioComponent* UGameplayStatics::STATIC_SpawnSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SpawnSound2D");

        UGameplayStatics_SpawnSound2D_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Sound = Sound;
        params.VolumeMultiplier = VolumeMultiplier;
        params.PitchMultiplier = PitchMultiplier;
        params.StartTime = StartTime;
        params.ConcurrencySettings = ConcurrencySettings;
        params.bPersistAcrossLevelTransition = bPersistAcrossLevelTransition;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.SpawnObject
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UClass*                  ObjectClass                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UObject*                 Outer                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UObject*                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UObject* UGameplayStatics::STATIC_SpawnObject(class UClass* ObjectClass, class UObject* Outer)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SpawnObject");

        UGameplayStatics_SpawnObject_Params params;
        params.ObjectClass = ObjectClass;
        params.Outer = Outer;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.SpawnForceFeedbackAttached
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UForceFeedbackEffect*    ForceFeedbackEffect            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USceneComponent*         AttachToComponent              (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   AttachPointName                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_Parm, CPF_IsPlainOldData)
    // TEnumAsByte<EAttachLocation>   LocationType                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bStopWhenAttachedToDestroyed   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bLooping                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          IntensityMultiplier            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StartTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UForceFeedbackAttenuation* AttenuationSettings            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UForceFeedbackComponent* ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UForceFeedbackComponent* UGameplayStatics::STATIC_SpawnForceFeedbackAttached(class UForceFeedbackEffect* ForceFeedbackEffect, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SpawnForceFeedbackAttached");

        UGameplayStatics_SpawnForceFeedbackAttached_Params params;
        params.ForceFeedbackEffect = ForceFeedbackEffect;
        params.AttachToComponent = AttachToComponent;
        params.AttachPointName = AttachPointName;
        params.Location = Location;
        params.Rotation = Rotation;
        params.LocationType = LocationType;
        params.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
        params.bLooping = bLooping;
        params.IntensityMultiplier = IntensityMultiplier;
        params.StartTime = StartTime;
        params.AttenuationSettings = AttenuationSettings;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.SpawnForceFeedbackAtLocation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UForceFeedbackEffect*    ForceFeedbackEffect            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bLooping                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          IntensityMultiplier            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StartTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UForceFeedbackAttenuation* AttenuationSettings            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UForceFeedbackComponent* ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UForceFeedbackComponent* UGameplayStatics::STATIC_SpawnForceFeedbackAtLocation(class UObject* WorldContextObject, class UForceFeedbackEffect* ForceFeedbackEffect, const struct FVector& Location, const struct FRotator& Rotation, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SpawnForceFeedbackAtLocation");

        UGameplayStatics_SpawnForceFeedbackAtLocation_Params params;
        params.WorldContextObject = WorldContextObject;
        params.ForceFeedbackEffect = ForceFeedbackEffect;
        params.Location = Location;
        params.Rotation = Rotation;
        params.bLooping = bLooping;
        params.IntensityMultiplier = IntensityMultiplier;
        params.StartTime = StartTime;
        params.AttenuationSettings = AttenuationSettings;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.SpawnEmitterAttached
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UParticleSystem*         EmitterTemplate                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USceneComponent*         AttachToComponent              (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   AttachPointName                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_Parm, CPF_IsPlainOldData)
    // TEnumAsByte<EAttachLocation>   LocationType                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAutoDestroy                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UParticleSystemComponent* ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UParticleSystemComponent* UGameplayStatics::STATIC_SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SpawnEmitterAttached");

        UGameplayStatics_SpawnEmitterAttached_Params params;
        params.EmitterTemplate = EmitterTemplate;
        params.AttachToComponent = AttachToComponent;
        params.AttachPointName = AttachPointName;
        params.Location = Location;
        params.Rotation = Rotation;
        params.LocationType = LocationType;
        params.bAutoDestroy = bAutoDestroy;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.SpawnEmitterAtLocation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UParticleSystem*         EmitterTemplate                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bAutoDestroy                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UParticleSystemComponent* ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UParticleSystemComponent* UGameplayStatics::STATIC_SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, bool bAutoDestroy)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SpawnEmitterAtLocation");

        UGameplayStatics_SpawnEmitterAtLocation_Params params;
        params.WorldContextObject = WorldContextObject;
        params.EmitterTemplate = EmitterTemplate;
        params.Location = Location;
        params.Rotation = Rotation;
        params.bAutoDestroy = bAutoDestroy;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.SpawnDialogueAttached
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UDialogueWave*           Dialogue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FDialogueContext        Context                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // class USceneComponent*         AttachToComponent              (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   AttachPointName                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_Parm, CPF_IsPlainOldData)
    // TEnumAsByte<EAttachLocation>   LocationType                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bStopWhenAttachedToDestroyed   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          VolumeMultiplier               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          PitchMultiplier                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StartTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundAttenuation*       AttenuationSettings            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UAudioComponent*         ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UAudioComponent* UGameplayStatics::STATIC_SpawnDialogueAttached(class UDialogueWave* Dialogue, const struct FDialogueContext& Context, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SpawnDialogueAttached");

        UGameplayStatics_SpawnDialogueAttached_Params params;
        params.Dialogue = Dialogue;
        params.Context = Context;
        params.AttachToComponent = AttachToComponent;
        params.AttachPointName = AttachPointName;
        params.Location = Location;
        params.Rotation = Rotation;
        params.LocationType = LocationType;
        params.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
        params.VolumeMultiplier = VolumeMultiplier;
        params.PitchMultiplier = PitchMultiplier;
        params.StartTime = StartTime;
        params.AttenuationSettings = AttenuationSettings;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.SpawnDialogueAtLocation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UDialogueWave*           Dialogue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FDialogueContext        Context                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_Parm, CPF_IsPlainOldData)
    // float                          VolumeMultiplier               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          PitchMultiplier                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StartTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundAttenuation*       AttenuationSettings            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UAudioComponent*         ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UAudioComponent* UGameplayStatics::STATIC_SpawnDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SpawnDialogueAtLocation");

        UGameplayStatics_SpawnDialogueAtLocation_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Dialogue = Dialogue;
        params.Context = Context;
        params.Location = Location;
        params.Rotation = Rotation;
        params.VolumeMultiplier = VolumeMultiplier;
        params.PitchMultiplier = PitchMultiplier;
        params.StartTime = StartTime;
        params.AttenuationSettings = AttenuationSettings;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.SpawnDialogue2D
    // (FUNC_Final, FUNC_BlueprintCosmetic, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UDialogueWave*           Dialogue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FDialogueContext        Context                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // float                          VolumeMultiplier               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          PitchMultiplier                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StartTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UAudioComponent*         ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UAudioComponent* UGameplayStatics::STATIC_SpawnDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SpawnDialogue2D");

        UGameplayStatics_SpawnDialogue2D_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Dialogue = Dialogue;
        params.Context = Context;
        params.VolumeMultiplier = VolumeMultiplier;
        params.PitchMultiplier = PitchMultiplier;
        params.StartTime = StartTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.SpawnDecalAttached
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterialInterface*      DecalMaterial                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 DecalSize                      (CPF_Parm, CPF_IsPlainOldData)
    // class USceneComponent*         AttachToComponent              (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   AttachPointName                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_Parm, CPF_IsPlainOldData)
    // TEnumAsByte<EAttachLocation>   LocationType                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          LifeSpan                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UDecalComponent*         ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UDecalComponent* UGameplayStatics::STATIC_SpawnDecalAttached(class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, float LifeSpan)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SpawnDecalAttached");

        UGameplayStatics_SpawnDecalAttached_Params params;
        params.DecalMaterial = DecalMaterial;
        params.DecalSize = DecalSize;
        params.AttachToComponent = AttachToComponent;
        params.AttachPointName = AttachPointName;
        params.Location = Location;
        params.Rotation = Rotation;
        params.LocationType = LocationType;
        params.LifeSpan = LifeSpan;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.SpawnDecalAtLocation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInterface*      DecalMaterial                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 DecalSize                      (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_Parm, CPF_IsPlainOldData)
    // float                          LifeSpan                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UDecalComponent*         ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UDecalComponent* UGameplayStatics::STATIC_SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SpawnDecalAtLocation");

        UGameplayStatics_SpawnDecalAtLocation_Params params;
        params.WorldContextObject = WorldContextObject;
        params.DecalMaterial = DecalMaterial;
        params.DecalSize = DecalSize;
        params.Location = Location;
        params.Rotation = Rotation;
        params.LifeSpan = LifeSpan;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.SetWorldOriginLocation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FIntVector              NewLocation                    (CPF_Parm)

    void UGameplayStatics::STATIC_SetWorldOriginLocation(class UObject* WorldContextObject, const struct FIntVector& NewLocation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SetWorldOriginLocation");

        UGameplayStatics_SetWorldOriginLocation_Params params;
        params.WorldContextObject = WorldContextObject;
        params.NewLocation = NewLocation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.SetSubtitlesEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnabled                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_SetSubtitlesEnabled(bool bEnabled)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SetSubtitlesEnabled");

        UGameplayStatics_SetSubtitlesEnabled_Params params;
        params.bEnabled = bEnabled;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.SetSoundMixClassOverride
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundMix*               InSoundMixModifier             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundClass*             InSoundClass                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Volume                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Pitch                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          FadeInTime                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bApplyToChildren               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_SetSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SetSoundMixClassOverride");

        UGameplayStatics_SetSoundMixClassOverride_Params params;
        params.WorldContextObject = WorldContextObject;
        params.InSoundMixModifier = InSoundMixModifier;
        params.InSoundClass = InSoundClass;
        params.Volume = Volume;
        params.Pitch = Pitch;
        params.FadeInTime = FadeInTime;
        params.bApplyToChildren = bApplyToChildren;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.SetPlayerControllerID
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class APlayerController*       Player                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ControllerId                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_SetPlayerControllerID(class APlayerController* Player, int ControllerId)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SetPlayerControllerID");

        UGameplayStatics_SetPlayerControllerID_Params params;
        params.Player = Player;
        params.ControllerId = ControllerId;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.SetGlobalTimeDilation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          TimeDilation                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SetGlobalTimeDilation");

        UGameplayStatics_SetGlobalTimeDilation_Params params;
        params.WorldContextObject = WorldContextObject;
        params.TimeDilation = TimeDilation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.SetGlobalPitchModulation
    // (FUNC_Final, FUNC_BlueprintCosmetic, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          PitchModulation                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          TimeSec                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_SetGlobalPitchModulation(class UObject* WorldContextObject, float PitchModulation, float TimeSec)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SetGlobalPitchModulation");

        UGameplayStatics_SetGlobalPitchModulation_Params params;
        params.WorldContextObject = WorldContextObject;
        params.PitchModulation = PitchModulation;
        params.TimeSec = TimeSec;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.SetGlobalListenerFocusParameters
    // (FUNC_Final, FUNC_BlueprintCosmetic, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          FocusAzimuthScale              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          NonFocusAzimuthScale           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          FocusDistanceScale             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          NonFocusDistanceScale          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          FocusVolumeScale               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          NonFocusVolumeScale            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          FocusPriorityScale             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          NonFocusPriorityScale          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_SetGlobalListenerFocusParameters(class UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SetGlobalListenerFocusParameters");

        UGameplayStatics_SetGlobalListenerFocusParameters_Params params;
        params.WorldContextObject = WorldContextObject;
        params.FocusAzimuthScale = FocusAzimuthScale;
        params.NonFocusAzimuthScale = NonFocusAzimuthScale;
        params.FocusDistanceScale = FocusDistanceScale;
        params.NonFocusDistanceScale = NonFocusDistanceScale;
        params.FocusVolumeScale = FocusVolumeScale;
        params.NonFocusVolumeScale = NonFocusVolumeScale;
        params.FocusPriorityScale = FocusPriorityScale;
        params.NonFocusPriorityScale = NonFocusPriorityScale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.SetGamePaused
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bPaused                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_SetGamePaused(class UObject* WorldContextObject, bool bPaused)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SetGamePaused");

        UGameplayStatics_SetGamePaused_Params params;
        params.WorldContextObject = WorldContextObject;
        params.bPaused = bPaused;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.SetBaseSoundMix
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundMix*               InSoundMix                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_SetBaseSoundMix(class UObject* WorldContextObject, class USoundMix* InSoundMix)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SetBaseSoundMix");

        UGameplayStatics_SetBaseSoundMix_Params params;
        params.WorldContextObject = WorldContextObject;
        params.InSoundMix = InSoundMix;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.SaveGameToSlot
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class USaveGame*               SaveGameObject                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 SlotName                       (CPF_Parm, CPF_ZeroConstructor)
    // int                            UserIndex                      (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_SaveGameToSlot(class USaveGame* SaveGameObject, const struct FString& SlotName, int UserIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SaveGameToSlot");

        UGameplayStatics_SaveGameToSlot_Params params;
        params.SaveGameObject = SaveGameObject;
        params.SlotName = SlotName;
        params.UserIndex = UserIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.RemovePlayer
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class APlayerController*       Player                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bDestroyPawn                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_RemovePlayer(class APlayerController* Player, bool bDestroyPawn)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.RemovePlayer");

        UGameplayStatics_RemovePlayer_Params params;
        params.Player = Player;
        params.bDestroyPawn = bDestroyPawn;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.RebaseZeroOriginOntoLocal
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 WorldLocation                  (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UGameplayStatics::STATIC_RebaseZeroOriginOntoLocal(class UObject* WorldContextObject, const struct FVector& WorldLocation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.RebaseZeroOriginOntoLocal");

        UGameplayStatics_RebaseZeroOriginOntoLocal_Params params;
        params.WorldContextObject = WorldContextObject;
        params.WorldLocation = WorldLocation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.RebaseLocalOriginOntoZero
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 WorldLocation                  (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UGameplayStatics::STATIC_RebaseLocalOriginOntoZero(class UObject* WorldContextObject, const struct FVector& WorldLocation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.RebaseLocalOriginOntoZero");

        UGameplayStatics_RebaseLocalOriginOntoZero_Params params;
        params.WorldContextObject = WorldContextObject;
        params.WorldLocation = WorldLocation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.PushSoundMixModifier
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundMix*               InSoundMixModifier             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_PushSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.PushSoundMixModifier");

        UGameplayStatics_PushSoundMixModifier_Params params;
        params.WorldContextObject = WorldContextObject;
        params.InSoundMixModifier = InSoundMixModifier;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.ProjectWorldToScreen
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class APlayerController*       Player                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 WorldPosition                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector2D               ScreenPosition                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           bPlayerViewportRelative        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_ProjectWorldToScreen(class APlayerController* Player, const struct FVector& WorldPosition, bool bPlayerViewportRelative, struct FVector2D* ScreenPosition)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.ProjectWorldToScreen");

        UGameplayStatics_ProjectWorldToScreen_Params params;
        params.Player = Player;
        params.WorldPosition = WorldPosition;
        params.bPlayerViewportRelative = bPlayerViewportRelative;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (ScreenPosition != nullptr)
            *ScreenPosition = params.ScreenPosition;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.PopSoundMixModifier
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundMix*               InSoundMixModifier             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_PopSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.PopSoundMixModifier");

        UGameplayStatics_PopSoundMixModifier_Params params;
        params.WorldContextObject = WorldContextObject;
        params.InSoundMixModifier = InSoundMixModifier;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.PlayWorldCameraShake
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  Shake                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Epicenter                      (CPF_Parm, CPF_IsPlainOldData)
    // float                          InnerRadius                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OuterRadius                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Falloff                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bOrientShakeTowardsEpicenter   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_PlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.PlayWorldCameraShake");

        UGameplayStatics_PlayWorldCameraShake_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Shake = Shake;
        params.Epicenter = Epicenter;
        params.InnerRadius = InnerRadius;
        params.OuterRadius = OuterRadius;
        params.Falloff = Falloff;
        params.bOrientShakeTowardsEpicenter = bOrientShakeTowardsEpicenter;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.PlaySoundAtLocation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundBase*              Sound                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_Parm, CPF_IsPlainOldData)
    // float                          VolumeMultiplier               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          PitchMultiplier                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StartTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundAttenuation*       AttenuationSettings            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundConcurrency*       ConcurrencySettings            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  OwningActor                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.PlaySoundAtLocation");

        UGameplayStatics_PlaySoundAtLocation_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Sound = Sound;
        params.Location = Location;
        params.Rotation = Rotation;
        params.VolumeMultiplier = VolumeMultiplier;
        params.PitchMultiplier = PitchMultiplier;
        params.StartTime = StartTime;
        params.AttenuationSettings = AttenuationSettings;
        params.ConcurrencySettings = ConcurrencySettings;
        params.OwningActor = OwningActor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.PlaySound2D
    // (FUNC_Final, FUNC_BlueprintCosmetic, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundBase*              Sound                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          VolumeMultiplier               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          PitchMultiplier                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StartTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundConcurrency*       ConcurrencySettings            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  OwningActor                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_PlaySound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.PlaySound2D");

        UGameplayStatics_PlaySound2D_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Sound = Sound;
        params.VolumeMultiplier = VolumeMultiplier;
        params.PitchMultiplier = PitchMultiplier;
        params.StartTime = StartTime;
        params.ConcurrencySettings = ConcurrencySettings;
        params.OwningActor = OwningActor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.PlayDialogueAtLocation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UDialogueWave*           Dialogue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FDialogueContext        Context                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_Parm, CPF_IsPlainOldData)
    // float                          VolumeMultiplier               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          PitchMultiplier                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StartTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundAttenuation*       AttenuationSettings            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.PlayDialogueAtLocation");

        UGameplayStatics_PlayDialogueAtLocation_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Dialogue = Dialogue;
        params.Context = Context;
        params.Location = Location;
        params.Rotation = Rotation;
        params.VolumeMultiplier = VolumeMultiplier;
        params.PitchMultiplier = PitchMultiplier;
        params.StartTime = StartTime;
        params.AttenuationSettings = AttenuationSettings;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.PlayDialogue2D
    // (FUNC_Final, FUNC_BlueprintCosmetic, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UDialogueWave*           Dialogue                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FDialogueContext        Context                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // float                          VolumeMultiplier               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          PitchMultiplier                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StartTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_PlayDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.PlayDialogue2D");

        UGameplayStatics_PlayDialogue2D_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Dialogue = Dialogue;
        params.Context = Context;
        params.VolumeMultiplier = VolumeMultiplier;
        params.PitchMultiplier = PitchMultiplier;
        params.StartTime = StartTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.ParseOption
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 Options                        (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Key                            (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UGameplayStatics::STATIC_ParseOption(const struct FString& Options, const struct FString& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.ParseOption");

        UGameplayStatics_ParseOption_Params params;
        params.Options = Options;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.OpenLevel
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   LevelName                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bAbsolute                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 Options                        (CPF_Parm, CPF_ZeroConstructor)

    void UGameplayStatics::STATIC_OpenLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bAbsolute, const struct FString& Options)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.OpenLevel");

        UGameplayStatics_OpenLevel_Params params;
        params.WorldContextObject = WorldContextObject;
        params.LevelName = LevelName;
        params.bAbsolute = bAbsolute;
        params.Options = Options;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.MakeHitResult
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           bBlockingHit                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bInitialOverlap                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Time                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ImpactPoint                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Normal                         (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ImpactNormal                   (CPF_Parm, CPF_IsPlainOldData)
    // class UPhysicalMaterial*       PhysMat                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  HitActor                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UPrimitiveComponent*     HitComponent                   (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   HitBoneName                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            HitItem                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            FaceIndex                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 TraceStart                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 TraceEnd                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FHitResult              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FHitResult UGameplayStatics::STATIC_MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, const struct FVector& Location, const struct FVector& ImpactPoint, const struct FVector& Normal, const struct FVector& ImpactNormal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, const struct FName& HitBoneName, int HitItem, int FaceIndex, const struct FVector& TraceStart, const struct FVector& TraceEnd)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.MakeHitResult");

        UGameplayStatics_MakeHitResult_Params params;
        params.bBlockingHit = bBlockingHit;
        params.bInitialOverlap = bInitialOverlap;
        params.Time = Time;
        params.Location = Location;
        params.ImpactPoint = ImpactPoint;
        params.Normal = Normal;
        params.ImpactNormal = ImpactNormal;
        params.PhysMat = PhysMat;
        params.HitActor = HitActor;
        params.HitComponent = HitComponent;
        params.HitBoneName = HitBoneName;
        params.HitItem = HitItem;
        params.FaceIndex = FaceIndex;
        params.TraceStart = TraceStart;
        params.TraceEnd = TraceEnd;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.LoadStreamLevel
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   LevelName                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bMakeVisibleAfterLoad          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bShouldBlockOnLoad             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLatentActionInfo       LatentInfo                     (CPF_Parm)

    void UGameplayStatics::STATIC_LoadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.LoadStreamLevel");

        UGameplayStatics_LoadStreamLevel_Params params;
        params.WorldContextObject = WorldContextObject;
        params.LevelName = LevelName;
        params.bMakeVisibleAfterLoad = bMakeVisibleAfterLoad;
        params.bShouldBlockOnLoad = bShouldBlockOnLoad;
        params.LatentInfo = LatentInfo;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.LoadGameFromSlot
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FString                 SlotName                       (CPF_Parm, CPF_ZeroConstructor)
    // int                            UserIndex                      (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USaveGame*               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class USaveGame* UGameplayStatics::STATIC_LoadGameFromSlot(const struct FString& SlotName, int UserIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.LoadGameFromSlot");

        UGameplayStatics_LoadGameFromSlot_Params params;
        params.SlotName = SlotName;
        params.UserIndex = UserIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.IsGamePaused
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_IsGamePaused(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.IsGamePaused");

        UGameplayStatics_IsGamePaused_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.HasOption
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 Options                        (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 InKey                          (CPF_Parm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_HasOption(const struct FString& Options, const struct FString& InKey)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.HasOption");

        UGameplayStatics_HasOption_Params params;
        params.Options = Options;
        params.InKey = InKey;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.HasLaunchOption
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 OptionToCheck                  (CPF_Parm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_HasLaunchOption(const struct FString& OptionToCheck)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.HasLaunchOption");

        UGameplayStatics_HasLaunchOption_Params params;
        params.OptionToCheck = OptionToCheck;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GrassOverlappingSphereCount
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UStaticMesh*             StaticMesh                     (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 CenterPosition                 (CPF_Parm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UGameplayStatics::STATIC_GrassOverlappingSphereCount(class UObject* WorldContextObject, class UStaticMesh* StaticMesh, const struct FVector& CenterPosition, float Radius)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GrassOverlappingSphereCount");

        UGameplayStatics_GrassOverlappingSphereCount_Params params;
        params.WorldContextObject = WorldContextObject;
        params.StaticMesh = StaticMesh;
        params.CenterPosition = CenterPosition;
        params.Radius = Radius;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetWorldOriginLocation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FIntVector              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FIntVector UGameplayStatics::STATIC_GetWorldOriginLocation(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetWorldOriginLocation");

        UGameplayStatics_GetWorldOriginLocation_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetWorldDeltaSeconds
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UGameplayStatics::STATIC_GetWorldDeltaSeconds(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetWorldDeltaSeconds");

        UGameplayStatics_GetWorldDeltaSeconds_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetUnpausedTimeSeconds
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UGameplayStatics::STATIC_GetUnpausedTimeSeconds(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetUnpausedTimeSeconds");

        UGameplayStatics_GetUnpausedTimeSeconds_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetTimeSeconds
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UGameplayStatics::STATIC_GetTimeSeconds(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetTimeSeconds");

        UGameplayStatics_GetTimeSeconds_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetSurfaceType
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FHitResult              Hit                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // TEnumAsByte<EPhysicalSurface>  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    TEnumAsByte<EPhysicalSurface> UGameplayStatics::STATIC_GetSurfaceType(const struct FHitResult& Hit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetSurfaceType");

        UGameplayStatics_GetSurfaceType_Params params;
        params.Hit = Hit;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetStreamingLevel
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PackageName                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class ULevelStreaming*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class ULevelStreaming* UGameplayStatics::STATIC_GetStreamingLevel(class UObject* WorldContextObject, const struct FName& PackageName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetStreamingLevel");

        UGameplayStatics_GetStreamingLevel_Params params;
        params.WorldContextObject = WorldContextObject;
        params.PackageName = PackageName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetRealTimeSeconds
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UGameplayStatics::STATIC_GetRealTimeSeconds(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetRealTimeSeconds");

        UGameplayStatics_GetRealTimeSeconds_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetPlayerPawn
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            PlayerIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class APawn*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class APawn* UGameplayStatics::STATIC_GetPlayerPawn(class UObject* WorldContextObject, int PlayerIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetPlayerPawn");

        UGameplayStatics_GetPlayerPawn_Params params;
        params.WorldContextObject = WorldContextObject;
        params.PlayerIndex = PlayerIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetPlayerControllerID
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class APlayerController*       Player                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UGameplayStatics::STATIC_GetPlayerControllerID(class APlayerController* Player)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetPlayerControllerID");

        UGameplayStatics_GetPlayerControllerID_Params params;
        params.Player = Player;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetPlayerController
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            PlayerIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class APlayerController*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class APlayerController* UGameplayStatics::STATIC_GetPlayerController(class UObject* WorldContextObject, int PlayerIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetPlayerController");

        UGameplayStatics_GetPlayerController_Params params;
        params.WorldContextObject = WorldContextObject;
        params.PlayerIndex = PlayerIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetPlayerCharacter
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            PlayerIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class ACharacter*              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class ACharacter* UGameplayStatics::STATIC_GetPlayerCharacter(class UObject* WorldContextObject, int PlayerIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetPlayerCharacter");

        UGameplayStatics_GetPlayerCharacter_Params params;
        params.WorldContextObject = WorldContextObject;
        params.PlayerIndex = PlayerIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetPlayerCameraManager
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            PlayerIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class APlayerCameraManager*    ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class APlayerCameraManager* UGameplayStatics::STATIC_GetPlayerCameraManager(class UObject* WorldContextObject, int PlayerIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetPlayerCameraManager");

        UGameplayStatics_GetPlayerCameraManager_Params params;
        params.WorldContextObject = WorldContextObject;
        params.PlayerIndex = PlayerIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetPlatformName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UGameplayStatics::STATIC_GetPlatformName()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetPlatformName");

        UGameplayStatics_GetPlatformName_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetObjectClass
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 Object                         (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UClass* UGameplayStatics::STATIC_GetObjectClass(class UObject* Object)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetObjectClass");

        UGameplayStatics_GetObjectClass_Params params;
        params.Object = Object;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetKeyValue
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 Pair                           (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Key                            (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // struct FString                 Value                          (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)

    void UGameplayStatics::STATIC_GetKeyValue(const struct FString& Pair, struct FString* Key, struct FString* Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetKeyValue");

        UGameplayStatics_GetKeyValue_Params params;
        params.Pair = Pair;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Key != nullptr)
            *Key = params.Key;
        if (Value != nullptr)
            *Value = params.Value;
    }


    // Function Engine.GameplayStatics.GetIntOption
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 Options                        (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Key                            (CPF_Parm, CPF_ZeroConstructor)
    // int                            DefaultValue                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UGameplayStatics::STATIC_GetIntOption(const struct FString& Options, const struct FString& Key, int DefaultValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetIntOption");

        UGameplayStatics_GetIntOption_Params params;
        params.Options = Options;
        params.Key = Key;
        params.DefaultValue = DefaultValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetGlobalTimeDilation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UGameplayStatics::STATIC_GetGlobalTimeDilation(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetGlobalTimeDilation");

        UGameplayStatics_GetGlobalTimeDilation_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetGameState
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AGameStateBase*          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AGameStateBase* UGameplayStatics::STATIC_GetGameState(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetGameState");

        UGameplayStatics_GetGameState_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetGameMode
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AGameModeBase*           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AGameModeBase* UGameplayStatics::STATIC_GetGameMode(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetGameMode");

        UGameplayStatics_GetGameMode_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetGameInstance
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UGameInstance*           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UGameInstance* UGameplayStatics::STATIC_GetGameInstance(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetGameInstance");

        UGameplayStatics_GetGameInstance_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetCurrentReverbEffect
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UReverbEffect*           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UReverbEffect* UGameplayStatics::STATIC_GetCurrentReverbEffect(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetCurrentReverbEffect");

        UGameplayStatics_GetCurrentReverbEffect_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetCurrentLevelName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bRemovePrefixString            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UGameplayStatics::STATIC_GetCurrentLevelName(class UObject* WorldContextObject, bool bRemovePrefixString)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetCurrentLevelName");

        UGameplayStatics_GetCurrentLevelName_Params params;
        params.WorldContextObject = WorldContextObject;
        params.bRemovePrefixString = bRemovePrefixString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetAudioTimeSeconds
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UGameplayStatics::STATIC_GetAudioTimeSeconds(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetAudioTimeSeconds");

        UGameplayStatics_GetAudioTimeSeconds_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetAllActorsWithTag
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   Tag                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          OutActors                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)

    void UGameplayStatics::STATIC_GetAllActorsWithTag(class UObject* WorldContextObject, const struct FName& Tag, TArray<class AActor*>* OutActors)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetAllActorsWithTag");

        UGameplayStatics_GetAllActorsWithTag_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Tag = Tag;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutActors != nullptr)
            *OutActors = params.OutActors;
    }


    // Function Engine.GameplayStatics.GetAllActorsWithInterface
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  Interface                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          OutActors                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)

    void UGameplayStatics::STATIC_GetAllActorsWithInterface(class UObject* WorldContextObject, class UClass* Interface, TArray<class AActor*>* OutActors)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetAllActorsWithInterface");

        UGameplayStatics_GetAllActorsWithInterface_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Interface = Interface;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutActors != nullptr)
            *OutActors = params.OutActors;
    }


    // Function Engine.GameplayStatics.GetAllActorsOfClass
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  ActorClass                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          OutActors                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)

    void UGameplayStatics::STATIC_GetAllActorsOfClass(class UObject* WorldContextObject, class UClass* ActorClass, TArray<class AActor*>* OutActors)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetAllActorsOfClass");

        UGameplayStatics_GetAllActorsOfClass_Params params;
        params.WorldContextObject = WorldContextObject;
        params.ActorClass = ActorClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutActors != nullptr)
            *OutActors = params.OutActors;
    }


    // Function Engine.GameplayStatics.GetActorArrayBounds
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<class AActor*>          Actors                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // bool                           bOnlyCollidingComponents       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Center                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 BoxExtent                      (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_GetActorArrayBounds(TArray<class AActor*> Actors, bool bOnlyCollidingComponents, struct FVector* Center, struct FVector* BoxExtent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetActorArrayBounds");

        UGameplayStatics_GetActorArrayBounds_Params params;
        params.Actors = Actors;
        params.bOnlyCollidingComponents = bOnlyCollidingComponents;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Center != nullptr)
            *Center = params.Center;
        if (BoxExtent != nullptr)
            *BoxExtent = params.BoxExtent;
    }


    // Function Engine.GameplayStatics.GetActorArrayAverageLocation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<class AActor*>          Actors                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UGameplayStatics::STATIC_GetActorArrayAverageLocation(TArray<class AActor*> Actors)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetActorArrayAverageLocation");

        UGameplayStatics_GetActorArrayAverageLocation_Params params;
        params.Actors = Actors;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.GetAccurateRealTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Seconds                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          PartialSeconds                 (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_GetAccurateRealTime(class UObject* WorldContextObject, int* Seconds, float* PartialSeconds)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetAccurateRealTime");

        UGameplayStatics_GetAccurateRealTime_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Seconds != nullptr)
            *Seconds = params.Seconds;
        if (PartialSeconds != nullptr)
            *PartialSeconds = params.PartialSeconds;
    }


    // Function Engine.GameplayStatics.FlushLevelStreaming
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_FlushLevelStreaming(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.FlushLevelStreaming");

        UGameplayStatics_FlushLevelStreaming_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.FinishSpawningActor
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  Actor                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              SpawnTransform                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AActor* UGameplayStatics::STATIC_FinishSpawningActor(class AActor* Actor, const struct FTransform& SpawnTransform)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.FinishSpawningActor");

        UGameplayStatics_FinishSpawningActor_Params params;
        params.Actor = Actor;
        params.SpawnTransform = SpawnTransform;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.FindCollisionUV
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FHitResult              Hit                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // int                            UVChannel                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               UV                             (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_FindCollisionUV(const struct FHitResult& Hit, int UVChannel, struct FVector2D* UV)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.FindCollisionUV");

        UGameplayStatics_FindCollisionUV_Params params;
        params.Hit = Hit;
        params.UVChannel = UVChannel;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (UV != nullptr)
            *UV = params.UV;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.EnableLiveStreaming
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           Enable                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_EnableLiveStreaming(bool Enable)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.EnableLiveStreaming");

        UGameplayStatics_EnableLiveStreaming_Params params;
        params.Enable = Enable;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.DoesSaveGameExist
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FString                 SlotName                       (CPF_Parm, CPF_ZeroConstructor)
    // int                            UserIndex                      (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_DoesSaveGameExist(const struct FString& SlotName, int UserIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.DoesSaveGameExist");

        UGameplayStatics_DoesSaveGameExist_Params params;
        params.SlotName = SlotName;
        params.UserIndex = UserIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.DeprojectScreenToWorld
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class APlayerController*       Player                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               ScreenPosition                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 WorldPosition                  (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 WorldDirection                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_DeprojectScreenToWorld(class APlayerController* Player, const struct FVector2D& ScreenPosition, struct FVector* WorldPosition, struct FVector* WorldDirection)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.DeprojectScreenToWorld");

        UGameplayStatics_DeprojectScreenToWorld_Params params;
        params.Player = Player;
        params.ScreenPosition = ScreenPosition;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (WorldPosition != nullptr)
            *WorldPosition = params.WorldPosition;
        if (WorldDirection != nullptr)
            *WorldDirection = params.WorldDirection;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.DeleteGameInSlot
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FString                 SlotName                       (CPF_Parm, CPF_ZeroConstructor)
    // int                            UserIndex                      (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_DeleteGameInSlot(const struct FString& SlotName, int UserIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.DeleteGameInSlot");

        UGameplayStatics_DeleteGameInSlot_Params params;
        params.SlotName = SlotName;
        params.UserIndex = UserIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.DeactivateReverbEffect
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   TagName                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_DeactivateReverbEffect(class UObject* WorldContextObject, const struct FName& TagName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.DeactivateReverbEffect");

        UGameplayStatics_DeactivateReverbEffect_Params params;
        params.WorldContextObject = WorldContextObject;
        params.TagName = TagName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.CreateSound2D
    // (FUNC_Final, FUNC_BlueprintCosmetic, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundBase*              Sound                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          VolumeMultiplier               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          PitchMultiplier                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          StartTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundConcurrency*       ConcurrencySettings            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bPersistAcrossLevelTransition  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UAudioComponent*         ReturnValue                    (CPF_ExportObject, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_InstancedReference, CPF_IsPlainOldData)

    class UAudioComponent* UGameplayStatics::STATIC_CreateSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.CreateSound2D");

        UGameplayStatics_CreateSound2D_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Sound = Sound;
        params.VolumeMultiplier = VolumeMultiplier;
        params.PitchMultiplier = PitchMultiplier;
        params.StartTime = StartTime;
        params.ConcurrencySettings = ConcurrencySettings;
        params.bPersistAcrossLevelTransition = bPersistAcrossLevelTransition;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.CreateSaveGameObjectFromBlueprint
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UBlueprint*              SaveGameBlueprint              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USaveGame*               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class USaveGame* UGameplayStatics::STATIC_CreateSaveGameObjectFromBlueprint(class UBlueprint* SaveGameBlueprint)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.CreateSaveGameObjectFromBlueprint");

        UGameplayStatics_CreateSaveGameObjectFromBlueprint_Params params;
        params.SaveGameBlueprint = SaveGameBlueprint;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.CreateSaveGameObject
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UClass*                  SaveGameClass                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USaveGame*               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class USaveGame* UGameplayStatics::STATIC_CreateSaveGameObject(class UClass* SaveGameClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.CreateSaveGameObject");

        UGameplayStatics_CreateSaveGameObject_Params params;
        params.SaveGameClass = SaveGameClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.CreatePlayer
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ControllerId                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bSpawnPawn                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class APlayerController*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class APlayerController* UGameplayStatics::STATIC_CreatePlayer(class UObject* WorldContextObject, int ControllerId, bool bSpawnPawn)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.CreatePlayer");

        UGameplayStatics_CreatePlayer_Params params;
        params.WorldContextObject = WorldContextObject;
        params.ControllerId = ControllerId;
        params.bSpawnPawn = bSpawnPawn;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.ClearSoundMixModifiers
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_ClearSoundMixModifiers(class UObject* WorldContextObject)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.ClearSoundMixModifiers");

        UGameplayStatics_ClearSoundMixModifiers_Params params;
        params.WorldContextObject = WorldContextObject;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.ClearSoundMixClassOverride
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundMix*               InSoundMixModifier             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class USoundClass*             InSoundClass                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          FadeOutTime                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_ClearSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float FadeOutTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.ClearSoundMixClassOverride");

        UGameplayStatics_ClearSoundMixClassOverride_Params params;
        params.WorldContextObject = WorldContextObject;
        params.InSoundMixModifier = InSoundMixModifier;
        params.InSoundClass = InSoundClass;
        params.FadeOutTime = FadeOutTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.CancelAsyncLoading
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)

    void UGameplayStatics::STATIC_CancelAsyncLoading()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.CancelAsyncLoading");

        UGameplayStatics_CancelAsyncLoading_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.GameplayStatics.BreakHitResult
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FHitResult              Hit                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bBlockingHit                   (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bInitialOverlap                (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Time                           (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 ImpactPoint                    (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 Normal                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 ImpactNormal                   (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // class UPhysicalMaterial*       PhysMat                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  HitActor                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UPrimitiveComponent*     HitComponent                   (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FName                   HitBoneName                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            HitItem                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            FaceIndex                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 TraceStart                     (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 TraceEnd                       (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_BreakHitResult(const struct FHitResult& Hit, bool* bBlockingHit, bool* bInitialOverlap, float* Time, struct FVector* Location, struct FVector* ImpactPoint, struct FVector* Normal, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, struct FName* HitBoneName, int* HitItem, int* FaceIndex, struct FVector* TraceStart, struct FVector* TraceEnd)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.BreakHitResult");

        UGameplayStatics_BreakHitResult_Params params;
        params.Hit = Hit;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (bBlockingHit != nullptr)
            *bBlockingHit = params.bBlockingHit;
        if (bInitialOverlap != nullptr)
            *bInitialOverlap = params.bInitialOverlap;
        if (Time != nullptr)
            *Time = params.Time;
        if (Location != nullptr)
            *Location = params.Location;
        if (ImpactPoint != nullptr)
            *ImpactPoint = params.ImpactPoint;
        if (Normal != nullptr)
            *Normal = params.Normal;
        if (ImpactNormal != nullptr)
            *ImpactNormal = params.ImpactNormal;
        if (PhysMat != nullptr)
            *PhysMat = params.PhysMat;
        if (HitActor != nullptr)
            *HitActor = params.HitActor;
        if (HitComponent != nullptr)
            *HitComponent = params.HitComponent;
        if (HitBoneName != nullptr)
            *HitBoneName = params.HitBoneName;
        if (HitItem != nullptr)
            *HitItem = params.HitItem;
        if (FaceIndex != nullptr)
            *FaceIndex = params.FaceIndex;
        if (TraceStart != nullptr)
            *TraceStart = params.TraceStart;
        if (TraceEnd != nullptr)
            *TraceEnd = params.TraceEnd;
    }


    // Function Engine.GameplayStatics.BlueprintSuggestProjectileVelocity
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 TossVelocity                   (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 StartLocation                  (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 EndLocation                    (CPF_Parm, CPF_IsPlainOldData)
    // float                          LaunchSpeed                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OverrideGravityZ               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          CollisionRadius                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bFavorHighArc                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bDrawDebug                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, const struct FVector& StartLocation, const struct FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug, struct FVector* TossVelocity)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.BlueprintSuggestProjectileVelocity");

        UGameplayStatics_BlueprintSuggestProjectileVelocity_Params params;
        params.WorldContextObject = WorldContextObject;
        params.StartLocation = StartLocation;
        params.EndLocation = EndLocation;
        params.LaunchSpeed = LaunchSpeed;
        params.OverrideGravityZ = OverrideGravityZ;
        params.TraceOption = TraceOption;
        params.CollisionRadius = CollisionRadius;
        params.bFavorHighArc = bFavorHighArc;
        params.bDrawDebug = bDrawDebug;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (TossVelocity != nullptr)
            *TossVelocity = params.TossVelocity;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              OutHit                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // TArray<struct FVector>         OutPathPositions               (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // struct FVector                 OutLastTraceDestination        (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 StartPos                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 LaunchVelocity                 (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bTracePath                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ProjectileRadius               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ECollisionChannel> TraceChannel                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          DrawDebugTime                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          SimFrequency                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MaxSimTime                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OverrideGravityZ               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_Blueprint_PredictProjectilePath_ByTraceChannel(class UObject* WorldContextObject, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel");

        UGameplayStatics_Blueprint_PredictProjectilePath_ByTraceChannel_Params params;
        params.WorldContextObject = WorldContextObject;
        params.StartPos = StartPos;
        params.LaunchVelocity = LaunchVelocity;
        params.bTracePath = bTracePath;
        params.ProjectileRadius = ProjectileRadius;
        params.TraceChannel = TraceChannel;
        params.bTraceComplex = bTraceComplex;
        params.ActorsToIgnore = ActorsToIgnore;
        params.DrawDebugType = DrawDebugType;
        params.DrawDebugTime = DrawDebugTime;
        params.SimFrequency = SimFrequency;
        params.MaxSimTime = MaxSimTime;
        params.OverrideGravityZ = OverrideGravityZ;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHit != nullptr)
            *OutHit = params.OutHit;
        if (OutPathPositions != nullptr)
            *OutPathPositions = params.OutPathPositions;
        if (OutLastTraceDestination != nullptr)
            *OutLastTraceDestination = params.OutLastTraceDestination;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FHitResult              OutHit                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // TArray<struct FVector>         OutPathPositions               (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // struct FVector                 OutLastTraceDestination        (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 StartPos                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 LaunchVelocity                 (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bTracePath                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ProjectileRadius               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // bool                           bTraceComplex                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          ActorsToIgnore                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          DrawDebugTime                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          SimFrequency                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MaxSimTime                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OverrideGravityZ               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_Blueprint_PredictProjectilePath_ByObjectType(class UObject* WorldContextObject, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType");

        UGameplayStatics_Blueprint_PredictProjectilePath_ByObjectType_Params params;
        params.WorldContextObject = WorldContextObject;
        params.StartPos = StartPos;
        params.LaunchVelocity = LaunchVelocity;
        params.bTracePath = bTracePath;
        params.ProjectileRadius = ProjectileRadius;
        params.ObjectTypes = ObjectTypes;
        params.bTraceComplex = bTraceComplex;
        params.ActorsToIgnore = ActorsToIgnore;
        params.DrawDebugType = DrawDebugType;
        params.DrawDebugTime = DrawDebugTime;
        params.SimFrequency = SimFrequency;
        params.MaxSimTime = MaxSimTime;
        params.OverrideGravityZ = OverrideGravityZ;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutHit != nullptr)
            *OutHit = params.OutHit;
        if (OutPathPositions != nullptr)
            *OutPathPositions = params.OutPathPositions;
        if (OutLastTraceDestination != nullptr)
            *OutLastTraceDestination = params.OutLastTraceDestination;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_Advanced
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FPredictProjectilePathParams PredictParams                  (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FPredictProjectilePathResult PredictResult                  (CPF_Parm, CPF_OutParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_Blueprint_PredictProjectilePath_Advanced(class UObject* WorldContextObject, const struct FPredictProjectilePathParams& PredictParams, struct FPredictProjectilePathResult* PredictResult)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_Advanced");

        UGameplayStatics_Blueprint_PredictProjectilePath_Advanced_Params params;
        params.WorldContextObject = WorldContextObject;
        params.PredictParams = PredictParams;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (PredictResult != nullptr)
            *PredictResult = params.PredictResult;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.BeginSpawningActorFromClass
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  ActorClass                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              SpawnTransform                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bNoCollisionFail               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  Owner                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AActor* UGameplayStatics::STATIC_BeginSpawningActorFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, bool bNoCollisionFail, class AActor* Owner)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.BeginSpawningActorFromClass");

        UGameplayStatics_BeginSpawningActorFromClass_Params params;
        params.WorldContextObject = WorldContextObject;
        params.ActorClass = ActorClass;
        params.SpawnTransform = SpawnTransform;
        params.bNoCollisionFail = bNoCollisionFail;
        params.Owner = Owner;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.BeginSpawningActorFromBlueprint
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UBlueprint*              Blueprint                      (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              SpawnTransform                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bNoCollisionFail               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AActor* UGameplayStatics::STATIC_BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, const struct FTransform& SpawnTransform, bool bNoCollisionFail)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.BeginSpawningActorFromBlueprint");

        UGameplayStatics_BeginSpawningActorFromBlueprint_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Blueprint = Blueprint;
        params.SpawnTransform = SpawnTransform;
        params.bNoCollisionFail = bNoCollisionFail;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.BeginDeferredActorSpawnFromClass
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  ActorClass                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              SpawnTransform                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // ESpawnActorCollisionHandlingMethod CollisionHandlingOverride      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  Owner                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AActor* UGameplayStatics::STATIC_BeginDeferredActorSpawnFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.BeginDeferredActorSpawnFromClass");

        UGameplayStatics_BeginDeferredActorSpawnFromClass_Params params;
        params.WorldContextObject = WorldContextObject;
        params.ActorClass = ActorClass;
        params.SpawnTransform = SpawnTransform;
        params.CollisionHandlingOverride = CollisionHandlingOverride;
        params.Owner = Owner;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.AreSubtitlesEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_AreSubtitlesEnabled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.AreSubtitlesEnabled");

        UGameplayStatics_AreSubtitlesEnabled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.AreAnyListenersWithinRange
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // float                          MaximumRange                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_AreAnyListenersWithinRange(class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.AreAnyListenersWithinRange");

        UGameplayStatics_AreAnyListenersWithinRange_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Location = Location;
        params.MaximumRange = MaximumRange;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.ApplyRadialDamageWithFalloff
    // (FUNC_Final, FUNC_BlueprintAuthorityOnly, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BaseDamage                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MinimumDamage                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Origin                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          DamageInnerRadius              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          DamageOuterRadius              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          DamageFalloff                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  DamageTypeClass                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          IgnoreActors                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // class AActor*                  DamageCauser                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AController*             InstigatedByController         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ECollisionChannel> DamagePreventionChannel        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_ApplyRadialDamageWithFalloff(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, TEnumAsByte<ECollisionChannel> DamagePreventionChannel)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.ApplyRadialDamageWithFalloff");

        UGameplayStatics_ApplyRadialDamageWithFalloff_Params params;
        params.WorldContextObject = WorldContextObject;
        params.BaseDamage = BaseDamage;
        params.MinimumDamage = MinimumDamage;
        params.Origin = Origin;
        params.DamageInnerRadius = DamageInnerRadius;
        params.DamageOuterRadius = DamageOuterRadius;
        params.DamageFalloff = DamageFalloff;
        params.DamageTypeClass = DamageTypeClass;
        params.IgnoreActors = IgnoreActors;
        params.DamageCauser = DamageCauser;
        params.InstigatedByController = InstigatedByController;
        params.DamagePreventionChannel = DamagePreventionChannel;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.ApplyRadialDamage
    // (FUNC_Final, FUNC_BlueprintAuthorityOnly, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BaseDamage                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Origin                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          DamageRadius                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  DamageTypeClass                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          IgnoreActors                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // class AActor*                  DamageCauser                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AController*             InstigatedByController         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bDoFullDamage                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ECollisionChannel> DamagePreventionChannel        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UGameplayStatics::STATIC_ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<ECollisionChannel> DamagePreventionChannel)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.ApplyRadialDamage");

        UGameplayStatics_ApplyRadialDamage_Params params;
        params.WorldContextObject = WorldContextObject;
        params.BaseDamage = BaseDamage;
        params.Origin = Origin;
        params.DamageRadius = DamageRadius;
        params.DamageTypeClass = DamageTypeClass;
        params.IgnoreActors = IgnoreActors;
        params.DamageCauser = DamageCauser;
        params.InstigatedByController = InstigatedByController;
        params.bDoFullDamage = bDoFullDamage;
        params.DamagePreventionChannel = DamagePreventionChannel;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.ApplyPointDamage
    // (FUNC_Final, FUNC_BlueprintAuthorityOnly, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  DamagedActor                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BaseDamage                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 HitFromDirection               (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FHitResult              HitInfo                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // class AController*             EventInstigator                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  DamageCauser                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  DamageTypeClass                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UGameplayStatics::STATIC_ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.ApplyPointDamage");

        UGameplayStatics_ApplyPointDamage_Params params;
        params.DamagedActor = DamagedActor;
        params.BaseDamage = BaseDamage;
        params.HitFromDirection = HitFromDirection;
        params.HitInfo = HitInfo;
        params.EventInstigator = EventInstigator;
        params.DamageCauser = DamageCauser;
        params.DamageTypeClass = DamageTypeClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.ApplyDamage
    // (FUNC_Final, FUNC_BlueprintAuthorityOnly, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class AActor*                  DamagedActor                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BaseDamage                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AController*             EventInstigator                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class AActor*                  DamageCauser                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  DamageTypeClass                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UGameplayStatics::STATIC_ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.ApplyDamage");

        UGameplayStatics_ApplyDamage_Params params;
        params.DamagedActor = DamagedActor;
        params.BaseDamage = BaseDamage;
        params.EventInstigator = EventInstigator;
        params.DamageCauser = DamageCauser;
        params.DamageTypeClass = DamageTypeClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.GameplayStatics.ActivateReverbEffect
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UReverbEffect*           ReverbEffect                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   TagName                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Priority                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Volume                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          FadeTime                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UGameplayStatics::STATIC_ActivateReverbEffect(class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, const struct FName& TagName, float Priority, float Volume, float FadeTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.ActivateReverbEffect");

        UGameplayStatics_ActivateReverbEffect_Params params;
        params.WorldContextObject = WorldContextObject;
        params.ReverbEffect = ReverbEffect;
        params.TagName = TagName;
        params.Priority = Priority;
        params.Volume = Volume;
        params.FadeTime = FadeTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.SetWorldToMetersScale
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContext                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          NewScale                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UHeadMountedDisplayFunctionLibrary::STATIC_SetWorldToMetersScale(class UObject* WorldContext, float NewScale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.SetWorldToMetersScale");

        UHeadMountedDisplayFunctionLibrary_SetWorldToMetersScale_Params params;
        params.WorldContext = WorldContext;
        params.NewScale = NewScale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.SetTrackingOrigin
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<EHMDTrackingOrigin> Origin                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UHeadMountedDisplayFunctionLibrary::STATIC_SetTrackingOrigin(TEnumAsByte<EHMDTrackingOrigin> Origin)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.SetTrackingOrigin");

        UHeadMountedDisplayFunctionLibrary_SetTrackingOrigin_Params params;
        params.Origin = Origin;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.SetClippingPlanes
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Near                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Far                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UHeadMountedDisplayFunctionLibrary::STATIC_SetClippingPlanes(float Near, float Far)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.SetClippingPlanes");

        UHeadMountedDisplayFunctionLibrary_SetClippingPlanes_Params params;
        params.Near = Near;
        params.Far = Far;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.ResetOrientationAndPosition
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Yaw                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EOrientPositionSelector> Options                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UHeadMountedDisplayFunctionLibrary::STATIC_ResetOrientationAndPosition(float Yaw, TEnumAsByte<EOrientPositionSelector> Options)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.ResetOrientationAndPosition");

        UHeadMountedDisplayFunctionLibrary_ResetOrientationAndPosition_Params params;
        params.Yaw = Yaw;
        params.Options = Options;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.IsInLowPersistenceMode
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UHeadMountedDisplayFunctionLibrary::STATIC_IsInLowPersistenceMode()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.IsInLowPersistenceMode");

        UHeadMountedDisplayFunctionLibrary_IsInLowPersistenceMode_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.IsHeadMountedDisplayEnabled
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UHeadMountedDisplayFunctionLibrary::STATIC_IsHeadMountedDisplayEnabled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.IsHeadMountedDisplayEnabled");

        UHeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayEnabled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.IsHeadMountedDisplayConnected
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UHeadMountedDisplayFunctionLibrary::STATIC_IsHeadMountedDisplayConnected()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.IsHeadMountedDisplayConnected");

        UHeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayConnected_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.HasValidTrackingPosition
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UHeadMountedDisplayFunctionLibrary::STATIC_HasValidTrackingPosition()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.HasValidTrackingPosition");

        UHeadMountedDisplayFunctionLibrary_HasValidTrackingPosition_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.GetWorldToMetersScale
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 WorldContext                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UHeadMountedDisplayFunctionLibrary::STATIC_GetWorldToMetersScale(class UObject* WorldContext)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.GetWorldToMetersScale");

        UHeadMountedDisplayFunctionLibrary_GetWorldToMetersScale_Params params;
        params.WorldContext = WorldContext;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.GetVRFocusState
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           bUseFocus                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bHasFocus                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UHeadMountedDisplayFunctionLibrary::STATIC_GetVRFocusState(bool* bUseFocus, bool* bHasFocus)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.GetVRFocusState");

        UHeadMountedDisplayFunctionLibrary_GetVRFocusState_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (bUseFocus != nullptr)
            *bUseFocus = params.bUseFocus;
        if (bHasFocus != nullptr)
            *bHasFocus = params.bHasFocus;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.GetTrackingSensorParameters
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Origin                         (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // float                          LeftFOV                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          RightFOV                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          TopFOV                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BottomFOV                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Distance                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          NearPlane                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          FarPlane                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           IsActive                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Index                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UHeadMountedDisplayFunctionLibrary::STATIC_GetTrackingSensorParameters(int Index, struct FVector* Origin, struct FRotator* Rotation, float* LeftFOV, float* RightFOV, float* TopFOV, float* BottomFOV, float* Distance, float* NearPlane, float* FarPlane, bool* IsActive)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.GetTrackingSensorParameters");

        UHeadMountedDisplayFunctionLibrary_GetTrackingSensorParameters_Params params;
        params.Index = Index;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Origin != nullptr)
            *Origin = params.Origin;
        if (Rotation != nullptr)
            *Rotation = params.Rotation;
        if (LeftFOV != nullptr)
            *LeftFOV = params.LeftFOV;
        if (RightFOV != nullptr)
            *RightFOV = params.RightFOV;
        if (TopFOV != nullptr)
            *TopFOV = params.TopFOV;
        if (BottomFOV != nullptr)
            *BottomFOV = params.BottomFOV;
        if (Distance != nullptr)
            *Distance = params.Distance;
        if (NearPlane != nullptr)
            *NearPlane = params.NearPlane;
        if (FarPlane != nullptr)
            *FarPlane = params.FarPlane;
        if (IsActive != nullptr)
            *IsActive = params.IsActive;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.GetTrackingOrigin
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TEnumAsByte<EHMDTrackingOrigin> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    TEnumAsByte<EHMDTrackingOrigin> UHeadMountedDisplayFunctionLibrary::STATIC_GetTrackingOrigin()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.GetTrackingOrigin");

        UHeadMountedDisplayFunctionLibrary_GetTrackingOrigin_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.GetScreenPercentage
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UHeadMountedDisplayFunctionLibrary::STATIC_GetScreenPercentage()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.GetScreenPercentage");

        UHeadMountedDisplayFunctionLibrary_GetScreenPercentage_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.GetPositionalTrackingCameraParameters
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 CameraOrigin                   (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FRotator                CameraRotation                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // float                          HFOV                           (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          VFOV                           (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          CameraDistance                 (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          NearPlane                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          FarPlane                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UHeadMountedDisplayFunctionLibrary::STATIC_GetPositionalTrackingCameraParameters(struct FVector* CameraOrigin, struct FRotator* CameraRotation, float* HFOV, float* VFOV, float* CameraDistance, float* NearPlane, float* FarPlane)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.GetPositionalTrackingCameraParameters");

        UHeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (CameraOrigin != nullptr)
            *CameraOrigin = params.CameraOrigin;
        if (CameraRotation != nullptr)
            *CameraRotation = params.CameraRotation;
        if (HFOV != nullptr)
            *HFOV = params.HFOV;
        if (VFOV != nullptr)
            *VFOV = params.VFOV;
        if (CameraDistance != nullptr)
            *CameraDistance = params.CameraDistance;
        if (NearPlane != nullptr)
            *NearPlane = params.NearPlane;
        if (FarPlane != nullptr)
            *FarPlane = params.FarPlane;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.GetOrientationAndPosition
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                DeviceRotation                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 DevicePosition                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void UHeadMountedDisplayFunctionLibrary::STATIC_GetOrientationAndPosition(struct FRotator* DeviceRotation, struct FVector* DevicePosition)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.GetOrientationAndPosition");

        UHeadMountedDisplayFunctionLibrary_GetOrientationAndPosition_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (DeviceRotation != nullptr)
            *DeviceRotation = params.DeviceRotation;
        if (DevicePosition != nullptr)
            *DevicePosition = params.DevicePosition;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.GetNumOfTrackingSensors
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UHeadMountedDisplayFunctionLibrary::STATIC_GetNumOfTrackingSensors()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.GetNumOfTrackingSensors");

        UHeadMountedDisplayFunctionLibrary_GetNumOfTrackingSensors_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.GetHMDDeviceName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FName UHeadMountedDisplayFunctionLibrary::STATIC_GetHMDDeviceName()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.GetHMDDeviceName");

        UHeadMountedDisplayFunctionLibrary_GetHMDDeviceName_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.EnableLowPersistenceMode
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnable                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UHeadMountedDisplayFunctionLibrary::STATIC_EnableLowPersistenceMode(bool bEnable)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.EnableLowPersistenceMode");

        UHeadMountedDisplayFunctionLibrary_EnableLowPersistenceMode_Params params;
        params.bEnable = bEnable;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.HeadMountedDisplayFunctionLibrary.EnableHMD
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bEnable                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UHeadMountedDisplayFunctionLibrary::STATIC_EnableHMD(bool bEnable)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.EnableHMD");

        UHeadMountedDisplayFunctionLibrary_EnableHMD_Params params;
        params.bEnable = bEnable;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetArrayLibrary.SetArrayPropertyByName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 Object                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   PropertyName                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<int>                    Value                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)

    void UKismetArrayLibrary::STATIC_SetArrayPropertyByName(class UObject* Object, const struct FName& PropertyName, TArray<int> Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.SetArrayPropertyByName");

        UKismetArrayLibrary_SetArrayPropertyByName_Params params;
        params.Object = Object;
        params.PropertyName = PropertyName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetArrayLibrary.FilterArray
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<class AActor*>          TargetArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // class UClass*                  FilterClass                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<class AActor*>          FilteredArray                  (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)

    void UKismetArrayLibrary::STATIC_FilterArray(TArray<class AActor*> TargetArray, class UClass* FilterClass, TArray<class AActor*>* FilteredArray)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.FilterArray");

        UKismetArrayLibrary_FilterArray_Params params;
        params.TargetArray = TargetArray;
        params.FilterClass = FilterClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (FilteredArray != nullptr)
            *FilteredArray = params.FilteredArray;
    }


    // Function Engine.KismetArrayLibrary.Array_Shuffle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<int>                    TargetArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)

    void UKismetArrayLibrary::STATIC_Array_Shuffle(TArray<int> TargetArray)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Shuffle");

        UKismetArrayLibrary_Array_Shuffle_Params params;
        params.TargetArray = TargetArray;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetArrayLibrary.Array_Set
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<int>                    TargetArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            Index                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Item                           (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bSizeToFit                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetArrayLibrary::STATIC_Array_Set(TArray<int> TargetArray, int Index, int Item, bool bSizeToFit)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Set");

        UKismetArrayLibrary_Array_Set_Params params;
        params.TargetArray = TargetArray;
        params.Index = Index;
        params.Item = Item;
        params.bSizeToFit = bSizeToFit;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetArrayLibrary.Array_Resize
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<int>                    TargetArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            Size                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetArrayLibrary::STATIC_Array_Resize(TArray<int> TargetArray, int Size)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Resize");

        UKismetArrayLibrary_Array_Resize_Params params;
        params.TargetArray = TargetArray;
        params.Size = Size;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetArrayLibrary.Array_RemoveItem
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<int>                    TargetArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            Item                           (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetArrayLibrary::STATIC_Array_RemoveItem(TArray<int> TargetArray, int Item)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_RemoveItem");

        UKismetArrayLibrary_Array_RemoveItem_Params params;
        params.TargetArray = TargetArray;
        params.Item = Item;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetArrayLibrary.Array_Remove
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<int>                    TargetArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            IndexToRemove                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetArrayLibrary::STATIC_Array_Remove(TArray<int> TargetArray, int IndexToRemove)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Remove");

        UKismetArrayLibrary_Array_Remove_Params params;
        params.TargetArray = TargetArray;
        params.IndexToRemove = IndexToRemove;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetArrayLibrary.Array_Length
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TArray<int>                    TargetArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetArrayLibrary::STATIC_Array_Length(TArray<int> TargetArray)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Length");

        UKismetArrayLibrary_Array_Length_Params params;
        params.TargetArray = TargetArray;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetArrayLibrary.Array_LastIndex
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TArray<int>                    TargetArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetArrayLibrary::STATIC_Array_LastIndex(TArray<int> TargetArray)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_LastIndex");

        UKismetArrayLibrary_Array_LastIndex_Params params;
        params.TargetArray = TargetArray;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetArrayLibrary.Array_IsValidIndex
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TArray<int>                    TargetArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            IndexToTest                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetArrayLibrary::STATIC_Array_IsValidIndex(TArray<int> TargetArray, int IndexToTest)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_IsValidIndex");

        UKismetArrayLibrary_Array_IsValidIndex_Params params;
        params.TargetArray = TargetArray;
        params.IndexToTest = IndexToTest;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetArrayLibrary.Array_Insert
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<int>                    TargetArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            NewItem                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // int                            Index                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetArrayLibrary::STATIC_Array_Insert(TArray<int> TargetArray, int NewItem, int Index)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Insert");

        UKismetArrayLibrary_Array_Insert_Params params;
        params.TargetArray = TargetArray;
        params.NewItem = NewItem;
        params.Index = Index;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetArrayLibrary.Array_Get
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TArray<int>                    TargetArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            Index                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Item                           (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetArrayLibrary::STATIC_Array_Get(TArray<int> TargetArray, int Index, int* Item)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Get");

        UKismetArrayLibrary_Array_Get_Params params;
        params.TargetArray = TargetArray;
        params.Index = Index;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Item != nullptr)
            *Item = params.Item;
    }


    // Function Engine.KismetArrayLibrary.Array_Find
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TArray<int>                    TargetArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            ItemToFind                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetArrayLibrary::STATIC_Array_Find(TArray<int> TargetArray, int ItemToFind)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Find");

        UKismetArrayLibrary_Array_Find_Params params;
        params.TargetArray = TargetArray;
        params.ItemToFind = ItemToFind;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetArrayLibrary.Array_Contains
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TArray<int>                    TargetArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            ItemToFind                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetArrayLibrary::STATIC_Array_Contains(TArray<int> TargetArray, int ItemToFind)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Contains");

        UKismetArrayLibrary_Array_Contains_Params params;
        params.TargetArray = TargetArray;
        params.ItemToFind = ItemToFind;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetArrayLibrary.Array_Clear
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<int>                    TargetArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)

    void UKismetArrayLibrary::STATIC_Array_Clear(TArray<int> TargetArray)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Clear");

        UKismetArrayLibrary_Array_Clear_Params params;
        params.TargetArray = TargetArray;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetArrayLibrary.Array_Append
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<int>                    TargetArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TArray<int>                    SourceArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)

    void UKismetArrayLibrary::STATIC_Array_Append(TArray<int> TargetArray, TArray<int> SourceArray)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Append");

        UKismetArrayLibrary_Array_Append_Params params;
        params.TargetArray = TargetArray;
        params.SourceArray = SourceArray;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetArrayLibrary.Array_AddUnique
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<int>                    TargetArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            NewItem                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetArrayLibrary::STATIC_Array_AddUnique(TArray<int> TargetArray, int NewItem)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_AddUnique");

        UKismetArrayLibrary_Array_AddUnique_Params params;
        params.TargetArray = TargetArray;
        params.NewItem = NewItem;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetArrayLibrary.Array_Add
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // TArray<int>                    TargetArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            NewItem                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetArrayLibrary::STATIC_Array_Add(TArray<int> TargetArray, int NewItem)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Add");

        UKismetArrayLibrary_Array_Add_Params params;
        params.TargetArray = TargetArray;
        params.NewItem = NewItem;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetGuidLibrary.Parse_StringToGuid
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 GuidString                     (CPF_Parm, CPF_ZeroConstructor)
    // struct FGuid                   OutGuid                        (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           Success                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetGuidLibrary::STATIC_Parse_StringToGuid(const struct FString& GuidString, struct FGuid* OutGuid, bool* Success)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetGuidLibrary.Parse_StringToGuid");

        UKismetGuidLibrary_Parse_StringToGuid_Params params;
        params.GuidString = GuidString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutGuid != nullptr)
            *OutGuid = params.OutGuid;
        if (Success != nullptr)
            *Success = params.Success;
    }


    // Function Engine.KismetGuidLibrary.NotEqual_GuidGuid
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FGuid                   A                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FGuid                   B                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetGuidLibrary::STATIC_NotEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetGuidLibrary.NotEqual_GuidGuid");

        UKismetGuidLibrary_NotEqual_GuidGuid_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetGuidLibrary.NewGuid
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FGuid                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FGuid UKismetGuidLibrary::STATIC_NewGuid()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetGuidLibrary.NewGuid");

        UKismetGuidLibrary_NewGuid_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetGuidLibrary.IsValid_Guid
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FGuid                   InGuid                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetGuidLibrary::STATIC_IsValid_Guid(const struct FGuid& InGuid)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetGuidLibrary.IsValid_Guid");

        UKismetGuidLibrary_IsValid_Guid_Params params;
        params.InGuid = InGuid;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetGuidLibrary.Invalidate_Guid
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FGuid                   InGuid                         (CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UKismetGuidLibrary::STATIC_Invalidate_Guid(struct FGuid* InGuid)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetGuidLibrary.Invalidate_Guid");

        UKismetGuidLibrary_Invalidate_Guid_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (InGuid != nullptr)
            *InGuid = params.InGuid;
    }


    // Function Engine.KismetGuidLibrary.EqualEqual_GuidGuid
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FGuid                   A                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FGuid                   B                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetGuidLibrary::STATIC_EqualEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetGuidLibrary.EqualEqual_GuidGuid");

        UKismetGuidLibrary_EqualEqual_GuidGuid_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetGuidLibrary.Conv_GuidToString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FGuid                   InGuid                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetGuidLibrary::STATIC_Conv_GuidToString(const struct FGuid& InGuid)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetGuidLibrary.Conv_GuidToString");

        UKismetGuidLibrary_Conv_GuidToString_Params params;
        params.InGuid = InGuid;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.PointerEvent_IsTouchEvent
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FPointerEvent           Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_PointerEvent_IsTouchEvent(const struct FPointerEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_IsTouchEvent");

        UKismetInputLibrary_PointerEvent_IsTouchEvent_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FPointerEvent           Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FKey                    MouseButton                    (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_PointerEvent_IsMouseButtonDown(const struct FPointerEvent& Input, const struct FKey& MouseButton)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown");

        UKismetInputLibrary_PointerEvent_IsMouseButtonDown_Params params;
        params.Input = Input;
        params.MouseButton = MouseButton;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.PointerEvent_GetWheelDelta
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FPointerEvent           Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetInputLibrary::STATIC_PointerEvent_GetWheelDelta(const struct FPointerEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_GetWheelDelta");

        UKismetInputLibrary_PointerEvent_GetWheelDelta_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.PointerEvent_GetUserIndex
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FPointerEvent           Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetInputLibrary::STATIC_PointerEvent_GetUserIndex(const struct FPointerEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_GetUserIndex");

        UKismetInputLibrary_PointerEvent_GetUserIndex_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FPointerEvent           Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetInputLibrary::STATIC_PointerEvent_GetTouchpadIndex(const struct FPointerEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex");

        UKismetInputLibrary_PointerEvent_GetTouchpadIndex_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FPointerEvent           Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UKismetInputLibrary::STATIC_PointerEvent_GetScreenSpacePosition(const struct FPointerEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition");

        UKismetInputLibrary_PointerEvent_GetScreenSpacePosition_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.PointerEvent_GetPointerIndex
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FPointerEvent           Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetInputLibrary::STATIC_PointerEvent_GetPointerIndex(const struct FPointerEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_GetPointerIndex");

        UKismetInputLibrary_PointerEvent_GetPointerIndex_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FPointerEvent           Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UKismetInputLibrary::STATIC_PointerEvent_GetLastScreenSpacePosition(const struct FPointerEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition");

        UKismetInputLibrary_PointerEvent_GetLastScreenSpacePosition_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.PointerEvent_GetGestureDelta
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FPointerEvent           Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UKismetInputLibrary::STATIC_PointerEvent_GetGestureDelta(const struct FPointerEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_GetGestureDelta");

        UKismetInputLibrary_PointerEvent_GetGestureDelta_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.PointerEvent_GetEffectingButton
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FPointerEvent           Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FKey                    ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FKey UKismetInputLibrary::STATIC_PointerEvent_GetEffectingButton(const struct FPointerEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_GetEffectingButton");

        UKismetInputLibrary_PointerEvent_GetEffectingButton_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.PointerEvent_GetCursorDelta
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FPointerEvent           Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UKismetInputLibrary::STATIC_PointerEvent_GetCursorDelta(const struct FPointerEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_GetCursorDelta");

        UKismetInputLibrary_PointerEvent_GetCursorDelta_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.Key_IsVectorAxis
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FKey                    Key                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_Key_IsVectorAxis(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.Key_IsVectorAxis");

        UKismetInputLibrary_Key_IsVectorAxis_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.Key_IsMouseButton
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FKey                    Key                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_Key_IsMouseButton(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.Key_IsMouseButton");

        UKismetInputLibrary_Key_IsMouseButton_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.Key_IsModifierKey
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FKey                    Key                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_Key_IsModifierKey(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.Key_IsModifierKey");

        UKismetInputLibrary_Key_IsModifierKey_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.Key_IsKeyboardKey
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FKey                    Key                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_Key_IsKeyboardKey(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.Key_IsKeyboardKey");

        UKismetInputLibrary_Key_IsKeyboardKey_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.Key_IsGamepadKey
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FKey                    Key                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_Key_IsGamepadKey(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.Key_IsGamepadKey");

        UKismetInputLibrary_Key_IsGamepadKey_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.Key_IsFloatAxis
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FKey                    Key                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_Key_IsFloatAxis(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.Key_IsFloatAxis");

        UKismetInputLibrary_Key_IsFloatAxis_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.Key_GetDisplayName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FKey                    Key                            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetInputLibrary::STATIC_Key_GetDisplayName(const struct FKey& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.Key_GetDisplayName");

        UKismetInputLibrary_Key_GetDisplayName_Params params;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.InputEvent_IsShiftDown
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FInputEvent             Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_InputEvent_IsShiftDown(const struct FInputEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsShiftDown");

        UKismetInputLibrary_InputEvent_IsShiftDown_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.InputEvent_IsRightShiftDown
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FInputEvent             Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_InputEvent_IsRightShiftDown(const struct FInputEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsRightShiftDown");

        UKismetInputLibrary_InputEvent_IsRightShiftDown_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.InputEvent_IsRightControlDown
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FInputEvent             Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_InputEvent_IsRightControlDown(const struct FInputEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsRightControlDown");

        UKismetInputLibrary_InputEvent_IsRightControlDown_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.InputEvent_IsRightCommandDown
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FInputEvent             Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_InputEvent_IsRightCommandDown(const struct FInputEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsRightCommandDown");

        UKismetInputLibrary_InputEvent_IsRightCommandDown_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.InputEvent_IsRightAltDown
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FInputEvent             Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_InputEvent_IsRightAltDown(const struct FInputEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsRightAltDown");

        UKismetInputLibrary_InputEvent_IsRightAltDown_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.InputEvent_IsRepeat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FInputEvent             Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_InputEvent_IsRepeat(const struct FInputEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsRepeat");

        UKismetInputLibrary_InputEvent_IsRepeat_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FInputEvent             Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_InputEvent_IsLeftShiftDown(const struct FInputEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown");

        UKismetInputLibrary_InputEvent_IsLeftShiftDown_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.InputEvent_IsLeftControlDown
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FInputEvent             Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_InputEvent_IsLeftControlDown(const struct FInputEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsLeftControlDown");

        UKismetInputLibrary_InputEvent_IsLeftControlDown_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FInputEvent             Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_InputEvent_IsLeftCommandDown(const struct FInputEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown");

        UKismetInputLibrary_InputEvent_IsLeftCommandDown_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.InputEvent_IsLeftAltDown
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FInputEvent             Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_InputEvent_IsLeftAltDown(const struct FInputEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsLeftAltDown");

        UKismetInputLibrary_InputEvent_IsLeftAltDown_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.InputEvent_IsControlDown
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FInputEvent             Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_InputEvent_IsControlDown(const struct FInputEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsControlDown");

        UKismetInputLibrary_InputEvent_IsControlDown_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.InputEvent_IsCommandDown
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FInputEvent             Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_InputEvent_IsCommandDown(const struct FInputEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsCommandDown");

        UKismetInputLibrary_InputEvent_IsCommandDown_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.InputEvent_IsAltDown
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FInputEvent             Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_InputEvent_IsAltDown(const struct FInputEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsAltDown");

        UKismetInputLibrary_InputEvent_IsAltDown_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.GetUserIndex
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FKeyEvent               Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetInputLibrary::STATIC_GetUserIndex(const struct FKeyEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.GetUserIndex");

        UKismetInputLibrary_GetUserIndex_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.GetKey
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FKeyEvent               Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FKey                    ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FKey UKismetInputLibrary::STATIC_GetKey(const struct FKeyEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.GetKey");

        UKismetInputLibrary_GetKey_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.GetAnalogValue
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FAnalogInputEvent       Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetInputLibrary::STATIC_GetAnalogValue(const struct FAnalogInputEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.GetAnalogValue");

        UKismetInputLibrary_GetAnalogValue_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.EqualEqual_KeyKey
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FKey                    A                              (CPF_Parm)
    // struct FKey                    B                              (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_EqualEqual_KeyKey(const struct FKey& A, const struct FKey& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.EqualEqual_KeyKey");

        UKismetInputLibrary_EqualEqual_KeyKey_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.EqualEqual_InputChordInputChord
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FInputChord             A                              (CPF_Parm)
    // struct FInputChord             B                              (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetInputLibrary::STATIC_EqualEqual_InputChordInputChord(const struct FInputChord& A, const struct FInputChord& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.EqualEqual_InputChordInputChord");

        UKismetInputLibrary_EqualEqual_InputChordInputChord_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.ControllerEvent_GetUserIndex
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FControllerEvent        Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetInputLibrary::STATIC_ControllerEvent_GetUserIndex(const struct FControllerEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.ControllerEvent_GetUserIndex");

        UKismetInputLibrary_ControllerEvent_GetUserIndex_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.ControllerEvent_GetEffectingButton
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FControllerEvent        Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FKey                    ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FKey UKismetInputLibrary::STATIC_ControllerEvent_GetEffectingButton(const struct FControllerEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.ControllerEvent_GetEffectingButton");

        UKismetInputLibrary_ControllerEvent_GetEffectingButton_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.ControllerEvent_GetAnalogValue
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FControllerEvent        Input                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetInputLibrary::STATIC_ControllerEvent_GetAnalogValue(const struct FControllerEvent& Input)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.ControllerEvent_GetAnalogValue");

        UKismetInputLibrary_ControllerEvent_GetAnalogValue_Params params;
        params.Input = Input;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetInputLibrary.CalibrateTilt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)

    void UKismetInputLibrary::STATIC_CalibrateTilt()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.CalibrateTilt");

        UKismetInputLibrary_CalibrateTilt_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetMaterialLibrary.SetVectorParameterValue
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialParameterCollection* Collection                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            ParameterValue                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)

    void UKismetMaterialLibrary::STATIC_SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, const struct FLinearColor& ParameterValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMaterialLibrary.SetVectorParameterValue");

        UKismetMaterialLibrary_SetVectorParameterValue_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Collection = Collection;
        params.ParameterName = ParameterName;
        params.ParameterValue = ParameterValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetMaterialLibrary.SetScalarParameterValue
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialParameterCollection* Collection                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ParameterValue                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetMaterialLibrary::STATIC_SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, float ParameterValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMaterialLibrary.SetScalarParameterValue");

        UKismetMaterialLibrary_SetScalarParameterValue_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Collection = Collection;
        params.ParameterName = ParameterName;
        params.ParameterValue = ParameterValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetMaterialLibrary.GetVectorParameterValue
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialParameterCollection* Collection                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FLinearColor UKismetMaterialLibrary::STATIC_GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMaterialLibrary.GetVectorParameterValue");

        UKismetMaterialLibrary_GetVectorParameterValue_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Collection = Collection;
        params.ParameterName = ParameterName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMaterialLibrary.GetScalarParameterValue
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialParameterCollection* Collection                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMaterialLibrary::STATIC_GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMaterialLibrary.GetScalarParameterValue");

        UKismetMaterialLibrary_GetScalarParameterValue_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Collection = Collection;
        params.ParameterName = ParameterName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInterface*      Parent                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInstanceDynamic* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UMaterialInstanceDynamic* UKismetMaterialLibrary::STATIC_CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance");

        UKismetMaterialLibrary_CreateDynamicMaterialInstance_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Parent = Parent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Xor_IntInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_Xor_IntInt(int A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Xor_IntInt");

        UKismetMathLibrary_Xor_IntInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.VSizeSquared
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_VSizeSquared(const struct FVector& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VSizeSquared");

        UKismetMathLibrary_VSizeSquared_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.VSize2DSquared
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               A                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_VSize2DSquared(const struct FVector2D& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VSize2DSquared");

        UKismetMathLibrary_VSize2DSquared_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.VSize2D
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               A                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_VSize2D(const struct FVector2D& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VSize2D");

        UKismetMathLibrary_VSize2D_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.VSize
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_VSize(const struct FVector& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VSize");

        UKismetMathLibrary_VSize_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.VLerp
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 B                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          Alpha                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_VLerp(const struct FVector& A, const struct FVector& B, float Alpha)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VLerp");

        UKismetMathLibrary_VLerp_Params params;
        params.A = A;
        params.B = B;
        params.Alpha = Alpha;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.VInterpTo_Constant
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Current                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Target                         (CPF_Parm, CPF_IsPlainOldData)
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InterpSpeed                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_VInterpTo_Constant(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VInterpTo_Constant");

        UKismetMathLibrary_VInterpTo_Constant_Params params;
        params.Current = Current;
        params.Target = Target;
        params.DeltaTime = DeltaTime;
        params.InterpSpeed = InterpSpeed;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.VInterpTo
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Current                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Target                         (CPF_Parm, CPF_IsPlainOldData)
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InterpSpeed                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_VInterpTo(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VInterpTo");

        UKismetMathLibrary_VInterpTo_Params params;
        params.Current = Current;
        params.Target = Target;
        params.DeltaTime = DeltaTime;
        params.InterpSpeed = InterpSpeed;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.VectorSpringInterp
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 Current                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Target                         (CPF_Parm, CPF_IsPlainOldData)
    // struct FVectorSpringState      SpringState                    (CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // float                          Stiffness                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          CriticalDampingFactor          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Mass                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_VectorSpringInterp(const struct FVector& Current, const struct FVector& Target, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, struct FVectorSpringState* SpringState)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VectorSpringInterp");

        UKismetMathLibrary_VectorSpringInterp_Params params;
        params.Current = Current;
        params.Target = Target;
        params.Stiffness = Stiffness;
        params.CriticalDampingFactor = CriticalDampingFactor;
        params.DeltaTime = DeltaTime;
        params.Mass = Mass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SpringState != nullptr)
            *SpringState = params.SpringState;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Vector2DInterpTo_Constant
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               Current                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               Target                         (CPF_Parm, CPF_IsPlainOldData)
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InterpSpeed                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UKismetMathLibrary::STATIC_Vector2DInterpTo_Constant(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector2DInterpTo_Constant");

        UKismetMathLibrary_Vector2DInterpTo_Constant_Params params;
        params.Current = Current;
        params.Target = Target;
        params.DeltaTime = DeltaTime;
        params.InterpSpeed = InterpSpeed;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Vector2DInterpTo
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               Current                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               Target                         (CPF_Parm, CPF_IsPlainOldData)
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InterpSpeed                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UKismetMathLibrary::STATIC_Vector2DInterpTo(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Vector2DInterpTo");

        UKismetMathLibrary_Vector2DInterpTo_Params params;
        params.Current = Current;
        params.Target = Target;
        params.DeltaTime = DeltaTime;
        params.InterpSpeed = InterpSpeed;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.VEase
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 B                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          Alpha                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EEasingFunc>       EasingFunc                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BlendExp                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Steps                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_VEase(const struct FVector& A, const struct FVector& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VEase");

        UKismetMathLibrary_VEase_Params params;
        params.A = A;
        params.B = B;
        params.Alpha = Alpha;
        params.EasingFunc = EasingFunc;
        params.BlendExp = BlendExp;
        params.Steps = Steps;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.UtcNow
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FDateTime UKismetMathLibrary::STATIC_UtcNow()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.UtcNow");

        UKismetMathLibrary_UtcNow_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.TransformLocation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTransform              T                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_TransformLocation(const struct FTransform& T, const struct FVector& Location)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TransformLocation");

        UKismetMathLibrary_TransformLocation_Params params;
        params.T = T;
        params.Location = Location;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.TransformDirection
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTransform              T                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 Direction                      (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_TransformDirection(const struct FTransform& T, const struct FVector& Direction)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TransformDirection");

        UKismetMathLibrary_TransformDirection_Params params;
        params.T = T;
        params.Direction = Direction;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Today
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FDateTime UKismetMathLibrary::STATIC_Today()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Today");

        UKismetMathLibrary_Today_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.TLerp
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTransform              A                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FTransform              B                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          Alpha                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ELerpInterpolationMode> InterpMode                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FTransform UKismetMathLibrary::STATIC_TLerp(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<ELerpInterpolationMode> InterpMode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TLerp");

        UKismetMathLibrary_TLerp_Params params;
        params.A = A;
        params.B = B;
        params.Alpha = Alpha;
        params.InterpMode = InterpMode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.TInterpTo
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTransform              Current                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FTransform              Target                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InterpSpeed                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FTransform UKismetMathLibrary::STATIC_TInterpTo(const struct FTransform& Current, const struct FTransform& Target, float DeltaTime, float InterpSpeed)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TInterpTo");

        UKismetMathLibrary_TInterpTo_Params params;
        params.Current = Current;
        params.Target = Target;
        params.DeltaTime = DeltaTime;
        params.InterpSpeed = InterpSpeed;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.TimespanZeroValue
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FTimespan UKismetMathLibrary::STATIC_TimespanZeroValue()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TimespanZeroValue");

        UKismetMathLibrary_TimespanZeroValue_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.TimespanRatio
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // struct FTimespan               B                              (CPF_Parm)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_TimespanRatio(const struct FTimespan& A, const struct FTimespan& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TimespanRatio");

        UKismetMathLibrary_TimespanRatio_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.TimespanMinValue
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FTimespan UKismetMathLibrary::STATIC_TimespanMinValue()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TimespanMinValue");

        UKismetMathLibrary_TimespanMinValue_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.TimespanMaxValue
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FTimespan UKismetMathLibrary::STATIC_TimespanMaxValue()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TimespanMaxValue");

        UKismetMathLibrary_TimespanMaxValue_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.TimespanFromString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 TimespanString                 (CPF_Parm, CPF_ZeroConstructor)
    // struct FTimespan               Result                         (CPF_Parm, CPF_OutParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_TimespanFromString(const struct FString& TimespanString, struct FTimespan* Result)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TimespanFromString");

        UKismetMathLibrary_TimespanFromString_Params params;
        params.TimespanString = TimespanString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Result != nullptr)
            *Result = params.Result;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.TEase
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTransform              A                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FTransform              B                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          Alpha                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EEasingFunc>       EasingFunc                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BlendExp                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Steps                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FTransform UKismetMathLibrary::STATIC_TEase(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TEase");

        UKismetMathLibrary_TEase_Params params;
        params.A = A;
        params.B = B;
        params.Alpha = Alpha;
        params.EasingFunc = EasingFunc;
        params.BlendExp = BlendExp;
        params.Steps = Steps;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Tan
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Tan(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Tan");

        UKismetMathLibrary_Tan_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Subtract_VectorVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 B                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Subtract_VectorVector(const struct FVector& A, const struct FVector& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_VectorVector");

        UKismetMathLibrary_Subtract_VectorVector_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Subtract_VectorInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Subtract_VectorInt(const struct FVector& A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_VectorInt");

        UKismetMathLibrary_Subtract_VectorInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Subtract_VectorFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Subtract_VectorFloat(const struct FVector& A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_VectorFloat");

        UKismetMathLibrary_Subtract_VectorFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               B                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UKismetMathLibrary::STATIC_Subtract_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D");

        UKismetMathLibrary_Subtract_Vector2DVector2D_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Subtract_Vector2DFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               A                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UKismetMathLibrary::STATIC_Subtract_Vector2DFloat(const struct FVector2D& A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_Vector2DFloat");

        UKismetMathLibrary_Subtract_Vector2DFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Subtract_TimespanTimespan
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // struct FTimespan               B                              (CPF_Parm)
    // struct FTimespan               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FTimespan UKismetMathLibrary::STATIC_Subtract_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_TimespanTimespan");

        UKismetMathLibrary_Subtract_TimespanTimespan_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Subtract_IntInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_Subtract_IntInt(int A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_IntInt");

        UKismetMathLibrary_Subtract_IntInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Subtract_FloatFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Subtract_FloatFloat(float A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_FloatFloat");

        UKismetMathLibrary_Subtract_FloatFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // struct FTimespan               B                              (CPF_Parm)
    // struct FDateTime               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FDateTime UKismetMathLibrary::STATIC_Subtract_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan");

        UKismetMathLibrary_Subtract_DateTimeTimespan_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Subtract_DateTimeDateTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // struct FDateTime               B                              (CPF_Parm)
    // struct FTimespan               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FTimespan UKismetMathLibrary::STATIC_Subtract_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_DateTimeDateTime");

        UKismetMathLibrary_Subtract_DateTimeDateTime_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Subtract_ByteByte
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // unsigned char                  A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    unsigned char UKismetMathLibrary::STATIC_Subtract_ByteByte(unsigned char A, unsigned char B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_ByteByte");

        UKismetMathLibrary_Subtract_ByteByte_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Square
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Square(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Square");

        UKismetMathLibrary_Square_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Sqrt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Sqrt(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Sqrt");

        UKismetMathLibrary_Sqrt_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Sin
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Sin(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Sin");

        UKismetMathLibrary_Sin_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.SignOfInteger
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_SignOfInteger(int A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SignOfInteger");

        UKismetMathLibrary_SignOfInteger_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.SignOfFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_SignOfFloat(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SignOfFloat");

        UKismetMathLibrary_SignOfFloat_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.SetRandomStreamSeed
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FRandomStream           Stream                         (CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // int                            NewSeed                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_SetRandomStreamSeed(int NewSeed, struct FRandomStream* Stream)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SetRandomStreamSeed");

        UKismetMathLibrary_SetRandomStreamSeed_Params params;
        params.NewSeed = NewSeed;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Stream != nullptr)
            *Stream = params.Stream;
    }


    // Function Engine.KismetMathLibrary.SelectVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 B                              (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bPickA                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_SelectVector(const struct FVector& A, const struct FVector& B, bool bPickA)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectVector");

        UKismetMathLibrary_SelectVector_Params params;
        params.A = A;
        params.B = B;
        params.bPickA = bPickA;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.SelectTransform
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTransform              A                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FTransform              B                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bPickA                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTransform              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FTransform UKismetMathLibrary::STATIC_SelectTransform(const struct FTransform& A, const struct FTransform& B, bool bPickA)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectTransform");

        UKismetMathLibrary_SelectTransform_Params params;
        params.A = A;
        params.B = B;
        params.bPickA = bPickA;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.SelectString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 A                              (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 B                              (CPF_Parm, CPF_ZeroConstructor)
    // bool                           bPickA                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetMathLibrary::STATIC_SelectString(const struct FString& A, const struct FString& B, bool bPickA)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectString");

        UKismetMathLibrary_SelectString_Params params;
        params.A = A;
        params.B = B;
        params.bPickA = bPickA;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.SelectRotator
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                B                              (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bPickA                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_SelectRotator(const struct FRotator& A, const struct FRotator& B, bool bPickA)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectRotator");

        UKismetMathLibrary_SelectRotator_Params params;
        params.A = A;
        params.B = B;
        params.bPickA = bPickA;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.SelectObject
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UObject*                 B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bSelectA                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UObject*                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UObject* UKismetMathLibrary::STATIC_SelectObject(class UObject* A, class UObject* B, bool bSelectA)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectObject");

        UKismetMathLibrary_SelectObject_Params params;
        params.A = A;
        params.B = B;
        params.bSelectA = bSelectA;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.SelectInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bPickA                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_SelectInt(int A, int B, bool bPickA)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectInt");

        UKismetMathLibrary_SelectInt_Params params;
        params.A = A;
        params.B = B;
        params.bPickA = bPickA;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.SelectFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bPickA                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_SelectFloat(float A, float B, bool bPickA)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectFloat");

        UKismetMathLibrary_SelectFloat_Params params;
        params.A = A;
        params.B = B;
        params.bPickA = bPickA;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.SelectColor
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FLinearColor            A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            B                              (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bPickA                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FLinearColor UKismetMathLibrary::STATIC_SelectColor(const struct FLinearColor& A, const struct FLinearColor& B, bool bPickA)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectColor");

        UKismetMathLibrary_SelectColor_Params params;
        params.A = A;
        params.B = B;
        params.bPickA = bPickA;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.SelectClass
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UClass*                  A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bSelectA                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UClass* UKismetMathLibrary::STATIC_SelectClass(class UClass* A, class UClass* B, bool bSelectA)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectClass");

        UKismetMathLibrary_SelectClass_Params params;
        params.A = A;
        params.B = B;
        params.bSelectA = bSelectA;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.SeedRandomStream
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FRandomStream           Stream                         (CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void UKismetMathLibrary::STATIC_SeedRandomStream(struct FRandomStream* Stream)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SeedRandomStream");

        UKismetMathLibrary_SeedRandomStream_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Stream != nullptr)
            *Stream = params.Stream;
    }


    // Function Engine.KismetMathLibrary.Round
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_Round(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Round");

        UKismetMathLibrary_Round_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Axis                           (CPF_Parm, CPF_IsPlainOldData)
    // float                          Angle                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_RotatorFromAxisAndAngle(const struct FVector& Axis, float Angle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle");

        UKismetMathLibrary_RotatorFromAxisAndAngle_Params params;
        params.Axis = Axis;
        params.Angle = Angle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RotateAngleAxis
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 InVect                         (CPF_Parm, CPF_IsPlainOldData)
    // float                          AngleDeg                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Axis                           (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_RotateAngleAxis(const struct FVector& InVect, float AngleDeg, const struct FVector& Axis)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RotateAngleAxis");

        UKismetMathLibrary_RotateAngleAxis_Params params;
        params.InVect = InVect;
        params.AngleDeg = AngleDeg;
        params.Axis = Axis;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RLerp
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                B                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          Alpha                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bShortestPath                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_RLerp(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RLerp");

        UKismetMathLibrary_RLerp_Params params;
        params.A = A;
        params.B = B;
        params.Alpha = Alpha;
        params.bShortestPath = bShortestPath;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RInterpTo_Constant
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                Current                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Target                         (CPF_Parm, CPF_IsPlainOldData)
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InterpSpeed                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_RInterpTo_Constant(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RInterpTo_Constant");

        UKismetMathLibrary_RInterpTo_Constant_Params params;
        params.Current = Current;
        params.Target = Target;
        params.DeltaTime = DeltaTime;
        params.InterpSpeed = InterpSpeed;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RInterpTo
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                Current                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Target                         (CPF_Parm, CPF_IsPlainOldData)
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InterpSpeed                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_RInterpTo(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RInterpTo");

        UKismetMathLibrary_RInterpTo_Params params;
        params.Current = Current;
        params.Target = Target;
        params.DeltaTime = DeltaTime;
        params.InterpSpeed = InterpSpeed;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RGBToHSV_Vector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FLinearColor            RGB                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            HSV                            (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_RGBToHSV_Vector(const struct FLinearColor& RGB, struct FLinearColor* HSV)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RGBToHSV_Vector");

        UKismetMathLibrary_RGBToHSV_Vector_Params params;
        params.RGB = RGB;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (HSV != nullptr)
            *HSV = params.HSV;
    }


    // Function Engine.KismetMathLibrary.RGBToHSV
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FLinearColor            InColor                        (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          H                              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          S                              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          V                              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          A                              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_RGBToHSV(const struct FLinearColor& InColor, float* H, float* S, float* V, float* A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RGBToHSV");

        UKismetMathLibrary_RGBToHSV_Params params;
        params.InColor = InColor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (H != nullptr)
            *H = params.H;
        if (S != nullptr)
            *S = params.S;
        if (V != nullptr)
            *V = params.V;
        if (A != nullptr)
            *A = params.A;
    }


    // Function Engine.KismetMathLibrary.ResetVectorSpringState
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVectorSpringState      SpringState                    (CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void UKismetMathLibrary::STATIC_ResetVectorSpringState(struct FVectorSpringState* SpringState)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ResetVectorSpringState");

        UKismetMathLibrary_ResetVectorSpringState_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SpringState != nullptr)
            *SpringState = params.SpringState;
    }


    // Function Engine.KismetMathLibrary.ResetRandomStream
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FRandomStream           Stream                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void UKismetMathLibrary::STATIC_ResetRandomStream(const struct FRandomStream& Stream)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ResetRandomStream");

        UKismetMathLibrary_ResetRandomStream_Params params;
        params.Stream = Stream;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetMathLibrary.ResetFloatSpringState
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FFloatSpringState       SpringState                    (CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void UKismetMathLibrary::STATIC_ResetFloatSpringState(struct FFloatSpringState* SpringState)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ResetFloatSpringState");

        UKismetMathLibrary_ResetFloatSpringState_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SpringState != nullptr)
            *SpringState = params.SpringState;
    }


    // Function Engine.KismetMathLibrary.REase
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                B                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          Alpha                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bShortestPath                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EEasingFunc>       EasingFunc                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BlendExp                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Steps                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_REase(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.REase");

        UKismetMathLibrary_REase_Params params;
        params.A = A;
        params.B = B;
        params.Alpha = Alpha;
        params.bShortestPath = bShortestPath;
        params.EasingFunc = EasingFunc;
        params.BlendExp = BlendExp;
        params.Steps = Steps;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomUnitVectorInConeWithYawAndPitch
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 ConeDir                        (CPF_Parm, CPF_IsPlainOldData)
    // float                          MaxYawInDegrees                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MaxPitchInDegrees              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_RandomUnitVectorInConeWithYawAndPitch(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomUnitVectorInConeWithYawAndPitch");

        UKismetMathLibrary_RandomUnitVectorInConeWithYawAndPitch_Params params;
        params.ConeDir = ConeDir;
        params.MaxYawInDegrees = MaxYawInDegrees;
        params.MaxPitchInDegrees = MaxPitchInDegrees;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomUnitVectorInCone
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 ConeDir                        (CPF_Parm, CPF_IsPlainOldData)
    // float                          ConeHalfAngle                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_RandomUnitVectorInCone(const struct FVector& ConeDir, float ConeHalfAngle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomUnitVectorInCone");

        UKismetMathLibrary_RandomUnitVectorInCone_Params params;
        params.ConeDir = ConeDir;
        params.ConeHalfAngle = ConeHalfAngle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomUnitVectorFromStream
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRandomStream           Stream                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_RandomUnitVectorFromStream(const struct FRandomStream& Stream)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomUnitVectorFromStream");

        UKismetMathLibrary_RandomUnitVectorFromStream_Params params;
        params.Stream = Stream;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomUnitVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_RandomUnitVector()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomUnitVector");

        UKismetMathLibrary_RandomUnitVector_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomRotatorFromStream
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           bRoll                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRandomStream           Stream                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_RandomRotatorFromStream(bool bRoll, const struct FRandomStream& Stream)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomRotatorFromStream");

        UKismetMathLibrary_RandomRotatorFromStream_Params params;
        params.bRoll = bRoll;
        params.Stream = Stream;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomRotator
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           bRoll                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_RandomRotator(bool bRoll)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomRotator");

        UKismetMathLibrary_RandomRotator_Params params;
        params.bRoll = bRoll;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomPointInBoundingBox
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Origin                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 BoxExtent                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_RandomPointInBoundingBox(const struct FVector& Origin, const struct FVector& BoxExtent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomPointInBoundingBox");

        UKismetMathLibrary_RandomPointInBoundingBox_Params params;
        params.Origin = Origin;
        params.BoxExtent = BoxExtent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            Min                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Max                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRandomStream           Stream                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_RandomIntegerInRangeFromStream(int Min, int Max, const struct FRandomStream& Stream)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream");

        UKismetMathLibrary_RandomIntegerInRangeFromStream_Params params;
        params.Min = Min;
        params.Max = Max;
        params.Stream = Stream;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomIntegerInRange
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            Min                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Max                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_RandomIntegerInRange(int Min, int Max)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomIntegerInRange");

        UKismetMathLibrary_RandomIntegerInRange_Params params;
        params.Min = Min;
        params.Max = Max;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomIntegerFromStream
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            Max                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRandomStream           Stream                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_RandomIntegerFromStream(int Max, const struct FRandomStream& Stream)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomIntegerFromStream");

        UKismetMathLibrary_RandomIntegerFromStream_Params params;
        params.Max = Max;
        params.Stream = Stream;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomInteger
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            Max                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_RandomInteger(int Max)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomInteger");

        UKismetMathLibrary_RandomInteger_Params params;
        params.Max = Max;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Min                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Max                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRandomStream           Stream                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_RandomFloatInRangeFromStream(float Min, float Max, const struct FRandomStream& Stream)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream");

        UKismetMathLibrary_RandomFloatInRangeFromStream_Params params;
        params.Min = Min;
        params.Max = Max;
        params.Stream = Stream;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomFloatInRange
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Min                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Max                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_RandomFloatInRange(float Min, float Max)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomFloatInRange");

        UKismetMathLibrary_RandomFloatInRange_Params params;
        params.Min = Min;
        params.Max = Max;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomFloatFromStream
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRandomStream           Stream                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_RandomFloatFromStream(const struct FRandomStream& Stream)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomFloatFromStream");

        UKismetMathLibrary_RandomFloatFromStream_Params params;
        params.Stream = Stream;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_RandomFloat()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomFloat");

        UKismetMathLibrary_RandomFloat_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomBoolWithWeightFromStream
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Weight                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRandomStream           RandomStream                   (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_RandomBoolWithWeightFromStream(float Weight, const struct FRandomStream& RandomStream)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomBoolWithWeightFromStream");

        UKismetMathLibrary_RandomBoolWithWeightFromStream_Params params;
        params.Weight = Weight;
        params.RandomStream = RandomStream;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomBoolWithWeight
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Weight                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_RandomBoolWithWeight(float Weight)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomBoolWithWeight");

        UKismetMathLibrary_RandomBoolWithWeight_Params params;
        params.Weight = Weight;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomBoolFromStream
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRandomStream           Stream                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_RandomBoolFromStream(const struct FRandomStream& Stream)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomBoolFromStream");

        UKismetMathLibrary_RandomBoolFromStream_Params params;
        params.Stream = Stream;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RandomBool
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_RandomBool()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomBool");

        UKismetMathLibrary_RandomBool_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.RadiansToDegrees
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_RadiansToDegrees(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RadiansToDegrees");

        UKismetMathLibrary_RadiansToDegrees_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.ProjectVectorOnToVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 V                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Target                         (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_ProjectVectorOnToVector(const struct FVector& V, const struct FVector& Target)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ProjectVectorOnToVector");

        UKismetMathLibrary_ProjectVectorOnToVector_Params params;
        params.V = V;
        params.Target = Target;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.ProjectVectorOnToPlane
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 V                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 PlaneNormal                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_ProjectVectorOnToPlane(const struct FVector& V, const struct FVector& PlaneNormal)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ProjectVectorOnToPlane");

        UKismetMathLibrary_ProjectVectorOnToPlane_Params params;
        params.V = V;
        params.PlaneNormal = PlaneNormal;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.ProjectPointOnToPlane
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Point                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 PlaneBase                      (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 PlaneNormal                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_ProjectPointOnToPlane(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNormal)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ProjectPointOnToPlane");

        UKismetMathLibrary_ProjectPointOnToPlane_Params params;
        params.Point = Point;
        params.PlaneBase = PlaneBase;
        params.PlaneNormal = PlaneNormal;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.PointsAreCoplanar
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TArray<struct FVector>         Points                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // float                          Tolerance                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_PointsAreCoplanar(TArray<struct FVector> Points, float Tolerance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.PointsAreCoplanar");

        UKismetMathLibrary_PointsAreCoplanar_Params params;
        params.Points = Points;
        params.Tolerance = Tolerance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Percent_IntInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_Percent_IntInt(int A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Percent_IntInt");

        UKismetMathLibrary_Percent_IntInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Percent_FloatFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Percent_FloatFloat(float A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Percent_FloatFloat");

        UKismetMathLibrary_Percent_FloatFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Percent_ByteByte
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // unsigned char                  A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    unsigned char UKismetMathLibrary::STATIC_Percent_ByteByte(unsigned char A, unsigned char B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Percent_ByteByte");

        UKismetMathLibrary_Percent_ByteByte_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Or_IntInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_Or_IntInt(int A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Or_IntInt");

        UKismetMathLibrary_Or_IntInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Now
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FDateTime UKismetMathLibrary::STATIC_Now()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Now");

        UKismetMathLibrary_Now_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NotEqual_VectorVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 B                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          ErrorTolerance                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_NotEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_VectorVector");

        UKismetMathLibrary_NotEqual_VectorVector_Params params;
        params.A = A;
        params.B = B;
        params.ErrorTolerance = ErrorTolerance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NotEqual_Vector2DVector2D
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               B                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          ErrorTolerance                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_NotEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_Vector2DVector2D");

        UKismetMathLibrary_NotEqual_Vector2DVector2D_Params params;
        params.A = A;
        params.B = B;
        params.ErrorTolerance = ErrorTolerance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // struct FTimespan               B                              (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_NotEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan");

        UKismetMathLibrary_NotEqual_TimespanTimespan_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NotEqual_RotatorRotator
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                B                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          ErrorTolerance                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_NotEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_RotatorRotator");

        UKismetMathLibrary_NotEqual_RotatorRotator_Params params;
        params.A = A;
        params.B = B;
        params.ErrorTolerance = ErrorTolerance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NotEqual_ObjectObject
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UObject*                 B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_NotEqual_ObjectObject(class UObject* A, class UObject* B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_ObjectObject");

        UKismetMathLibrary_NotEqual_ObjectObject_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NotEqual_NameName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FName                   A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_NotEqual_NameName(const struct FName& A, const struct FName& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_NameName");

        UKismetMathLibrary_NotEqual_NameName_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NotEqual_IntInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_NotEqual_IntInt(int A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_IntInt");

        UKismetMathLibrary_NotEqual_IntInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NotEqual_FloatFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_NotEqual_FloatFloat(float A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_FloatFloat");

        UKismetMathLibrary_NotEqual_FloatFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // struct FDateTime               B                              (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_NotEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime");

        UKismetMathLibrary_NotEqual_DateTimeDateTime_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NotEqual_ClassClass
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UClass*                  A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_NotEqual_ClassClass(class UClass* A, class UClass* B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_ClassClass");

        UKismetMathLibrary_NotEqual_ClassClass_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NotEqual_ByteByte
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // unsigned char                  A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_NotEqual_ByteByte(unsigned char A, unsigned char B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_ByteByte");

        UKismetMathLibrary_NotEqual_ByteByte_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NotEqual_BoolBool
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_NotEqual_BoolBool(bool A, bool B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_BoolBool");

        UKismetMathLibrary_NotEqual_BoolBool_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Not_PreBool
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_Not_PreBool(bool A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Not_PreBool");

        UKismetMathLibrary_Not_PreBool_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Not_Int
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_Not_Int(int A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Not_Int");

        UKismetMathLibrary_Not_Int_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NormalizeToRange
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          RangeMin                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          RangeMax                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_NormalizeToRange(float Value, float RangeMin, float RangeMax)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NormalizeToRange");

        UKismetMathLibrary_NormalizeToRange_Params params;
        params.Value = Value;
        params.RangeMin = RangeMin;
        params.RangeMax = RangeMax;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NormalizedDeltaRotator
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                B                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_NormalizedDeltaRotator(const struct FRotator& A, const struct FRotator& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NormalizedDeltaRotator");

        UKismetMathLibrary_NormalizedDeltaRotator_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NormalizeAxis
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Angle                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_NormalizeAxis(float Angle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NormalizeAxis");

        UKismetMathLibrary_NormalizeAxis_Params params;
        params.Angle = Angle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Normal2D
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UKismetMathLibrary::STATIC_Normal2D(const struct FVector2D& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Normal2D");

        UKismetMathLibrary_Normal2D_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Normal
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Normal(const struct FVector& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Normal");

        UKismetMathLibrary_Normal_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NegateVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_NegateVector(const struct FVector& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NegateVector");

        UKismetMathLibrary_NegateVector_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NegateRotator
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_NegateRotator(const struct FRotator& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NegateRotator");

        UKismetMathLibrary_NegateRotator_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NearlyEqual_TransformTransform
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTransform              A                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FTransform              B                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          LocationTolerance              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          RotationTolerance              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Scale3DTolerance               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_NearlyEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NearlyEqual_TransformTransform");

        UKismetMathLibrary_NearlyEqual_TransformTransform_Params params;
        params.A = A;
        params.B = B;
        params.LocationTolerance = LocationTolerance;
        params.RotationTolerance = RotationTolerance;
        params.Scale3DTolerance = Scale3DTolerance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ErrorTolerance                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat");

        UKismetMathLibrary_NearlyEqual_FloatFloat_Params params;
        params.A = A;
        params.B = B;
        params.ErrorTolerance = ErrorTolerance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Base                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Exp                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_MultiplyMultiply_FloatFloat(float Base, float Exp)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat");

        UKismetMathLibrary_MultiplyMultiply_FloatFloat_Params params;
        params.Base = Base;
        params.Exp = Exp;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MultiplyByPi
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_MultiplyByPi(float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MultiplyByPi");

        UKismetMathLibrary_MultiplyByPi_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Multiply_VectorVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 B                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Multiply_VectorVector(const struct FVector& A, const struct FVector& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_VectorVector");

        UKismetMathLibrary_Multiply_VectorVector_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Multiply_VectorInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Multiply_VectorInt(const struct FVector& A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_VectorInt");

        UKismetMathLibrary_Multiply_VectorInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Multiply_VectorFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Multiply_VectorFloat(const struct FVector& A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_VectorFloat");

        UKismetMathLibrary_Multiply_VectorFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Multiply_Vector2DVector2D
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               B                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UKismetMathLibrary::STATIC_Multiply_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_Vector2DVector2D");

        UKismetMathLibrary_Multiply_Vector2DVector2D_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Multiply_Vector2DFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               A                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UKismetMathLibrary::STATIC_Multiply_Vector2DFloat(const struct FVector2D& A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_Vector2DFloat");

        UKismetMathLibrary_Multiply_Vector2DFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Multiply_TimespanFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // float                          Scalar                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTimespan               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FTimespan UKismetMathLibrary::STATIC_Multiply_TimespanFloat(const struct FTimespan& A, float Scalar)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_TimespanFloat");

        UKismetMathLibrary_Multiply_TimespanFloat_Params params;
        params.A = A;
        params.Scalar = Scalar;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Multiply_RotatorInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                A                              (CPF_Parm, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_Multiply_RotatorInt(const struct FRotator& A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_RotatorInt");

        UKismetMathLibrary_Multiply_RotatorInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Multiply_RotatorFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                A                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_Multiply_RotatorFloat(const struct FRotator& A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_RotatorFloat");

        UKismetMathLibrary_Multiply_RotatorFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FLinearColor            A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            B                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FLinearColor UKismetMathLibrary::STATIC_Multiply_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor");

        UKismetMathLibrary_Multiply_LinearColorLinearColor_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Multiply_LinearColorFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FLinearColor            A                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FLinearColor UKismetMathLibrary::STATIC_Multiply_LinearColorFloat(const struct FLinearColor& A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_LinearColorFloat");

        UKismetMathLibrary_Multiply_LinearColorFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Multiply_IntInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_Multiply_IntInt(int A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_IntInt");

        UKismetMathLibrary_Multiply_IntInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Multiply_IntFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Multiply_IntFloat(int A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_IntFloat");

        UKismetMathLibrary_Multiply_IntFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Multiply_FloatFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Multiply_FloatFloat(float A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_FloatFloat");

        UKismetMathLibrary_Multiply_FloatFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Multiply_ByteByte
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // unsigned char                  A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    unsigned char UKismetMathLibrary::STATIC_Multiply_ByteByte(unsigned char A, unsigned char B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_ByteByte");

        UKismetMathLibrary_Multiply_ByteByte_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MirrorVectorByNormal
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 InVect                         (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 InNormal                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_MirrorVectorByNormal(const struct FVector& InVect, const struct FVector& InNormal)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MirrorVectorByNormal");

        UKismetMathLibrary_MirrorVectorByNormal_Params params;
        params.InVect = InVect;
        params.InNormal = InNormal;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MinOfIntArray
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TArray<int>                    IntArray                       (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            IndexOfMinValue                (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MinValue                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_MinOfIntArray(TArray<int> IntArray, int* IndexOfMinValue, int* MinValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MinOfIntArray");

        UKismetMathLibrary_MinOfIntArray_Params params;
        params.IntArray = IntArray;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (IndexOfMinValue != nullptr)
            *IndexOfMinValue = params.IndexOfMinValue;
        if (MinValue != nullptr)
            *MinValue = params.MinValue;
    }


    // Function Engine.KismetMathLibrary.MinOfFloatArray
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TArray<float>                  FloatArray                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            IndexOfMinValue                (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MinValue                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_MinOfFloatArray(TArray<float> FloatArray, int* IndexOfMinValue, float* MinValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MinOfFloatArray");

        UKismetMathLibrary_MinOfFloatArray_Params params;
        params.FloatArray = FloatArray;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (IndexOfMinValue != nullptr)
            *IndexOfMinValue = params.IndexOfMinValue;
        if (MinValue != nullptr)
            *MinValue = params.MinValue;
    }


    // Function Engine.KismetMathLibrary.MinOfByteArray
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TArray<unsigned char>          ByteArray                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            IndexOfMinValue                (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  MinValue                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_MinOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMinValue, unsigned char* MinValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MinOfByteArray");

        UKismetMathLibrary_MinOfByteArray_Params params;
        params.ByteArray = ByteArray;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (IndexOfMinValue != nullptr)
            *IndexOfMinValue = params.IndexOfMinValue;
        if (MinValue != nullptr)
            *MinValue = params.MinValue;
    }


    // Function Engine.KismetMathLibrary.MinimumAreaRectangle
    // (FUNC_Final, FUNC_BlueprintAuthorityOnly, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<struct FVector>         InVerts                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // struct FVector                 SampleSurfaceNormal            (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 OutRectCenter                  (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FRotator                OutRectRotation                (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // float                          OutSideLengthX                 (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OutSideLengthY                 (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bDebugDraw                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_MinimumAreaRectangle(class UObject* WorldContextObject, TArray<struct FVector> InVerts, const struct FVector& SampleSurfaceNormal, bool bDebugDraw, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MinimumAreaRectangle");

        UKismetMathLibrary_MinimumAreaRectangle_Params params;
        params.WorldContextObject = WorldContextObject;
        params.InVerts = InVerts;
        params.SampleSurfaceNormal = SampleSurfaceNormal;
        params.bDebugDraw = bDebugDraw;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutRectCenter != nullptr)
            *OutRectCenter = params.OutRectCenter;
        if (OutRectRotation != nullptr)
            *OutRectRotation = params.OutRectRotation;
        if (OutSideLengthX != nullptr)
            *OutSideLengthX = params.OutSideLengthX;
        if (OutSideLengthY != nullptr)
            *OutSideLengthY = params.OutSideLengthY;
    }


    // Function Engine.KismetMathLibrary.Min
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_Min(int A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Min");

        UKismetMathLibrary_Min_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MaxOfIntArray
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TArray<int>                    IntArray                       (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            IndexOfMaxValue                (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MaxValue                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_MaxOfIntArray(TArray<int> IntArray, int* IndexOfMaxValue, int* MaxValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MaxOfIntArray");

        UKismetMathLibrary_MaxOfIntArray_Params params;
        params.IntArray = IntArray;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (IndexOfMaxValue != nullptr)
            *IndexOfMaxValue = params.IndexOfMaxValue;
        if (MaxValue != nullptr)
            *MaxValue = params.MaxValue;
    }


    // Function Engine.KismetMathLibrary.MaxOfFloatArray
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TArray<float>                  FloatArray                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            IndexOfMaxValue                (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MaxValue                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_MaxOfFloatArray(TArray<float> FloatArray, int* IndexOfMaxValue, float* MaxValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MaxOfFloatArray");

        UKismetMathLibrary_MaxOfFloatArray_Params params;
        params.FloatArray = FloatArray;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (IndexOfMaxValue != nullptr)
            *IndexOfMaxValue = params.IndexOfMaxValue;
        if (MaxValue != nullptr)
            *MaxValue = params.MaxValue;
    }


    // Function Engine.KismetMathLibrary.MaxOfByteArray
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TArray<unsigned char>          ByteArray                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // int                            IndexOfMaxValue                (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  MaxValue                       (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_MaxOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMaxValue, unsigned char* MaxValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MaxOfByteArray");

        UKismetMathLibrary_MaxOfByteArray_Params params;
        params.ByteArray = ByteArray;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (IndexOfMaxValue != nullptr)
            *IndexOfMaxValue = params.IndexOfMaxValue;
        if (MaxValue != nullptr)
            *MaxValue = params.MaxValue;
    }


    // Function Engine.KismetMathLibrary.Max
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_Max(int A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Max");

        UKismetMathLibrary_Max_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MapRangeUnclamped
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InRangeA                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InRangeB                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OutRangeA                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OutRangeB                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MapRangeUnclamped");

        UKismetMathLibrary_MapRangeUnclamped_Params params;
        params.Value = Value;
        params.InRangeA = InRangeA;
        params.InRangeB = InRangeB;
        params.OutRangeA = OutRangeA;
        params.OutRangeB = OutRangeB;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MapRangeClamped
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InRangeA                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InRangeB                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OutRangeA                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          OutRangeB                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MapRangeClamped");

        UKismetMathLibrary_MapRangeClamped_Params params;
        params.Value = Value;
        params.InRangeA = InRangeA;
        params.InRangeB = InRangeB;
        params.OutRangeA = OutRangeA;
        params.OutRangeB = OutRangeB;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeVector2D
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          X                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Y                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UKismetMathLibrary::STATIC_MakeVector2D(float X, float Y)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeVector2D");

        UKismetMathLibrary_MakeVector2D_Params params;
        params.X = X;
        params.Y = Y;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          X                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Y                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Z                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_MakeVector(float X, float Y, float Z)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeVector");

        UKismetMathLibrary_MakeVector_Params params;
        params.X = X;
        params.Y = Y;
        params.Z = Z;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeTransform
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Scale                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FTransform              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FTransform UKismetMathLibrary::STATIC_MakeTransform(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeTransform");

        UKismetMathLibrary_MakeTransform_Params params;
        params.Location = Location;
        params.Rotation = Rotation;
        params.Scale = Scale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeTimespan
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            days                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Hours                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Minutes                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Seconds                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Milliseconds                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTimespan               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FTimespan UKismetMathLibrary::STATIC_MakeTimespan(int days, int Hours, int Minutes, int Seconds, int Milliseconds)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeTimespan");

        UKismetMathLibrary_MakeTimespan_Params params;
        params.days = days;
        params.Hours = Hours;
        params.Minutes = Minutes;
        params.Seconds = Seconds;
        params.Milliseconds = Milliseconds;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeRotFromZY
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Z                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 Y                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_MakeRotFromZY(const struct FVector& Z, const struct FVector& Y)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromZY");

        UKismetMathLibrary_MakeRotFromZY_Params params;
        params.Z = Z;
        params.Y = Y;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeRotFromZX
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Z                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 X                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_MakeRotFromZX(const struct FVector& Z, const struct FVector& X)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromZX");

        UKismetMathLibrary_MakeRotFromZX_Params params;
        params.Z = Z;
        params.X = X;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeRotFromZ
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Z                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_MakeRotFromZ(const struct FVector& Z)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromZ");

        UKismetMathLibrary_MakeRotFromZ_Params params;
        params.Z = Z;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeRotFromYZ
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Y                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 Z                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_MakeRotFromYZ(const struct FVector& Y, const struct FVector& Z)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromYZ");

        UKismetMathLibrary_MakeRotFromYZ_Params params;
        params.Y = Y;
        params.Z = Z;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeRotFromYX
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Y                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 X                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_MakeRotFromYX(const struct FVector& Y, const struct FVector& X)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromYX");

        UKismetMathLibrary_MakeRotFromYX_Params params;
        params.Y = Y;
        params.X = X;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeRotFromY
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Y                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_MakeRotFromY(const struct FVector& Y)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromY");

        UKismetMathLibrary_MakeRotFromY_Params params;
        params.Y = Y;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeRotFromXZ
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 X                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 Z                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_MakeRotFromXZ(const struct FVector& X, const struct FVector& Z)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromXZ");

        UKismetMathLibrary_MakeRotFromXZ_Params params;
        params.X = X;
        params.Z = Z;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeRotFromXY
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 X                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 Y                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_MakeRotFromXY(const struct FVector& X, const struct FVector& Y)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromXY");

        UKismetMathLibrary_MakeRotFromXY_Params params;
        params.X = X;
        params.Y = Y;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeRotFromX
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 X                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_MakeRotFromX(const struct FVector& X)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromX");

        UKismetMathLibrary_MakeRotFromX_Params params;
        params.X = X;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeRotator
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Roll                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Pitch                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Yaw                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_MakeRotator(float Roll, float Pitch, float Yaw)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotator");

        UKismetMathLibrary_MakeRotator_Params params;
        params.Roll = Roll;
        params.Pitch = Pitch;
        params.Yaw = Yaw;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeRotationFromAxes
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Forward                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Right                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Up                             (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_MakeRotationFromAxes(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotationFromAxes");

        UKismetMathLibrary_MakeRotationFromAxes_Params params;
        params.Forward = Forward;
        params.Right = Right;
        params.Up = Up;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeRandomStream
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            InitialSeed                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FRandomStream           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FRandomStream UKismetMathLibrary::STATIC_MakeRandomStream(int InitialSeed)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRandomStream");

        UKismetMathLibrary_MakeRandomStream_Params params;
        params.InitialSeed = InitialSeed;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakePulsatingValue
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          InCurrentTime                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InPulsesPerSecond              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InPhase                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakePulsatingValue");

        UKismetMathLibrary_MakePulsatingValue_Params params;
        params.InCurrentTime = InCurrentTime;
        params.InPulsesPerSecond = InPulsesPerSecond;
        params.InPhase = InPhase;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakePlaneFromPointAndNormal
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Point                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Normal                         (CPF_Parm, CPF_IsPlainOldData)
    // struct FPlane                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FPlane UKismetMathLibrary::STATIC_MakePlaneFromPointAndNormal(const struct FVector& Point, const struct FVector& Normal)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakePlaneFromPointAndNormal");

        UKismetMathLibrary_MakePlaneFromPointAndNormal_Params params;
        params.Point = Point;
        params.Normal = Normal;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeDateTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            Year                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Month                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Day                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Hour                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Minute                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Second                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Millisecond                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FDateTime               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FDateTime UKismetMathLibrary::STATIC_MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeDateTime");

        UKismetMathLibrary_MakeDateTime_Params params;
        params.Year = Year;
        params.Month = Month;
        params.Day = Day;
        params.Hour = Hour;
        params.Minute = Minute;
        params.Second = Second;
        params.Millisecond = Millisecond;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeColor
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          R                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          G                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FLinearColor UKismetMathLibrary::STATIC_MakeColor(float R, float G, float B, float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeColor");

        UKismetMathLibrary_MakeColor_Params params;
        params.R = R;
        params.G = G;
        params.B = B;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeBox2D
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               Min                            (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               Max                            (CPF_Parm, CPF_IsPlainOldData)
    // struct FBox2D                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FBox2D UKismetMathLibrary::STATIC_MakeBox2D(const struct FVector2D& Min, const struct FVector2D& Max)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeBox2D");

        UKismetMathLibrary_MakeBox2D_Params params;
        params.Min = Min;
        params.Max = Max;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.MakeBox
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Min                            (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Max                            (CPF_Parm, CPF_IsPlainOldData)
    // struct FBox                    ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FBox UKismetMathLibrary::STATIC_MakeBox(const struct FVector& Min, const struct FVector& Max)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeBox");

        UKismetMathLibrary_MakeBox_Params params;
        params.Min = Min;
        params.Max = Max;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Loge
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Loge(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Loge");

        UKismetMathLibrary_Loge_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Log
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Base                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Log(float A, float Base)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Log");

        UKismetMathLibrary_Log_Params params;
        params.A = A;
        params.Base = Base;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 LineStart                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 LineEnd                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 PlaneOrigin                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 PlaneNormal                    (CPF_Parm, CPF_IsPlainOldData)
    // float                          T                              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Intersection                   (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_LinePlaneIntersection_OriginNormal(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& PlaneOrigin, const struct FVector& PlaneNormal, float* T, struct FVector* Intersection)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal");

        UKismetMathLibrary_LinePlaneIntersection_OriginNormal_Params params;
        params.LineStart = LineStart;
        params.LineEnd = LineEnd;
        params.PlaneOrigin = PlaneOrigin;
        params.PlaneNormal = PlaneNormal;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (T != nullptr)
            *T = params.T;
        if (Intersection != nullptr)
            *Intersection = params.Intersection;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.LinePlaneIntersection
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 LineStart                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 LineEnd                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FPlane                  APlane                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // float                          T                              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Intersection                   (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_LinePlaneIntersection(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FPlane& APlane, float* T, struct FVector* Intersection)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinePlaneIntersection");

        UKismetMathLibrary_LinePlaneIntersection_Params params;
        params.LineStart = LineStart;
        params.LineEnd = LineEnd;
        params.APlane = APlane;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (T != nullptr)
            *T = params.T;
        if (Intersection != nullptr)
            *Intersection = params.Intersection;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.LinearColorLerpUsingHSV
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FLinearColor            A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            B                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          Alpha                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FLinearColor UKismetMathLibrary::STATIC_LinearColorLerpUsingHSV(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColorLerpUsingHSV");

        UKismetMathLibrary_LinearColorLerpUsingHSV_Params params;
        params.A = A;
        params.B = B;
        params.Alpha = Alpha;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.LinearColorLerp
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FLinearColor            A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            B                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          Alpha                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FLinearColor UKismetMathLibrary::STATIC_LinearColorLerp(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColorLerp");

        UKismetMathLibrary_LinearColorLerp_Params params;
        params.A = A;
        params.B = B;
        params.Alpha = Alpha;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.LessLess_VectorRotator
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                B                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_LessLess_VectorRotator(const struct FVector& A, const struct FRotator& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessLess_VectorRotator");

        UKismetMathLibrary_LessLess_VectorRotator_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // struct FTimespan               B                              (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_LessEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan");

        UKismetMathLibrary_LessEqual_TimespanTimespan_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.LessEqual_IntInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_LessEqual_IntInt(int A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessEqual_IntInt");

        UKismetMathLibrary_LessEqual_IntInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.LessEqual_FloatFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_LessEqual_FloatFloat(float A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessEqual_FloatFloat");

        UKismetMathLibrary_LessEqual_FloatFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // struct FDateTime               B                              (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_LessEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime");

        UKismetMathLibrary_LessEqual_DateTimeDateTime_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.LessEqual_ByteByte
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // unsigned char                  A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_LessEqual_ByteByte(unsigned char A, unsigned char B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessEqual_ByteByte");

        UKismetMathLibrary_LessEqual_ByteByte_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Less_TimespanTimespan
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // struct FTimespan               B                              (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_Less_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Less_TimespanTimespan");

        UKismetMathLibrary_Less_TimespanTimespan_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Less_IntInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_Less_IntInt(int A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Less_IntInt");

        UKismetMathLibrary_Less_IntInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Less_FloatFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_Less_FloatFloat(float A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Less_FloatFloat");

        UKismetMathLibrary_Less_FloatFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Less_DateTimeDateTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // struct FDateTime               B                              (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_Less_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Less_DateTimeDateTime");

        UKismetMathLibrary_Less_DateTimeDateTime_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Less_ByteByte
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // unsigned char                  A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_Less_ByteByte(unsigned char A, unsigned char B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Less_ByteByte");

        UKismetMathLibrary_Less_ByteByte_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Lerp
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Alpha                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Lerp(float A, float B, float Alpha)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Lerp");

        UKismetMathLibrary_Lerp_Params params;
        params.A = A;
        params.B = B;
        params.Alpha = Alpha;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.IsPointInBoxWithTransform
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Point                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FTransform              BoxWorldTransform              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 BoxExtent                      (CPF_Parm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_IsPointInBoxWithTransform(const struct FVector& Point, const struct FTransform& BoxWorldTransform, const struct FVector& BoxExtent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IsPointInBoxWithTransform");

        UKismetMathLibrary_IsPointInBoxWithTransform_Params params;
        params.Point = Point;
        params.BoxWorldTransform = BoxWorldTransform;
        params.BoxExtent = BoxExtent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.IsPointInBox
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Point                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 BoxOrigin                      (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 BoxExtent                      (CPF_Parm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_IsPointInBox(const struct FVector& Point, const struct FVector& BoxOrigin, const struct FVector& BoxExtent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IsPointInBox");

        UKismetMathLibrary_IsPointInBox_Params params;
        params.Point = Point;
        params.BoxOrigin = BoxOrigin;
        params.BoxExtent = BoxExtent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.IsMorning
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_IsMorning(const struct FDateTime& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IsMorning");

        UKismetMathLibrary_IsMorning_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.IsLeapYear
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            Year                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_IsLeapYear(int Year)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IsLeapYear");

        UKismetMathLibrary_IsLeapYear_Params params;
        params.Year = Year;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.IsAfternoon
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_IsAfternoon(const struct FDateTime& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IsAfternoon");

        UKismetMathLibrary_IsAfternoon_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.InvertTransform
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTransform              T                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FTransform              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FTransform UKismetMathLibrary::STATIC_InvertTransform(const struct FTransform& T)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.InvertTransform");

        UKismetMathLibrary_InvertTransform_Params params;
        params.T = T;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.InverseTransformLocation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTransform              T                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_InverseTransformLocation(const struct FTransform& T, const struct FVector& Location)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.InverseTransformLocation");

        UKismetMathLibrary_InverseTransformLocation_Params params;
        params.T = T;
        params.Location = Location;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.InverseTransformDirection
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTransform              T                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 Direction                      (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_InverseTransformDirection(const struct FTransform& T, const struct FVector& Direction)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.InverseTransformDirection");

        UKismetMathLibrary_InverseTransformDirection_Params params;
        params.T = T;
        params.Direction = Direction;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.InverseLerp
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_InverseLerp(float A, float B, float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.InverseLerp");

        UKismetMathLibrary_InverseLerp_Params params;
        params.A = A;
        params.B = B;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.InRange_FloatFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Min                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Max                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           InclusiveMin                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           InclusiveMax                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.InRange_FloatFloat");

        UKismetMathLibrary_InRange_FloatFloat_Params params;
        params.Value = Value;
        params.Min = Min;
        params.Max = Max;
        params.InclusiveMin = InclusiveMin;
        params.InclusiveMax = InclusiveMax;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Hypotenuse
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Width                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Height                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Hypotenuse(float Width, float Height)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Hypotenuse");

        UKismetMathLibrary_Hypotenuse_Params params;
        params.Width = Width;
        params.Height = Height;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.HSVToRGB_Vector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FLinearColor            HSV                            (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            RGB                            (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_HSVToRGB_Vector(const struct FLinearColor& HSV, struct FLinearColor* RGB)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.HSVToRGB_Vector");

        UKismetMathLibrary_HSVToRGB_Vector_Params params;
        params.HSV = HSV;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (RGB != nullptr)
            *RGB = params.RGB;
    }


    // Function Engine.KismetMathLibrary.HSVToRGB
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          H                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          S                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          V                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FLinearColor UKismetMathLibrary::STATIC_HSVToRGB(float H, float S, float V, float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.HSVToRGB");

        UKismetMathLibrary_HSVToRGB_Params params;
        params.H = H;
        params.S = S;
        params.V = V;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GridSnap_Float
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Location                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          GridSize                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_GridSnap_Float(float Location, float GridSize)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GridSnap_Float");

        UKismetMathLibrary_GridSnap_Float_Params params;
        params.Location = Location;
        params.GridSize = GridSize;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                B                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_GreaterGreater_VectorRotator(const struct FVector& A, const struct FRotator& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator");

        UKismetMathLibrary_GreaterGreater_VectorRotator_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // struct FTimespan               B                              (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_GreaterEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan");

        UKismetMathLibrary_GreaterEqual_TimespanTimespan_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GreaterEqual_IntInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_GreaterEqual_IntInt(int A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterEqual_IntInt");

        UKismetMathLibrary_GreaterEqual_IntInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GreaterEqual_FloatFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_GreaterEqual_FloatFloat(float A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterEqual_FloatFloat");

        UKismetMathLibrary_GreaterEqual_FloatFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // struct FDateTime               B                              (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_GreaterEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime");

        UKismetMathLibrary_GreaterEqual_DateTimeDateTime_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GreaterEqual_ByteByte
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // unsigned char                  A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_GreaterEqual_ByteByte(unsigned char A, unsigned char B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterEqual_ByteByte");

        UKismetMathLibrary_GreaterEqual_ByteByte_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Greater_TimespanTimespan
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // struct FTimespan               B                              (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_Greater_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Greater_TimespanTimespan");

        UKismetMathLibrary_Greater_TimespanTimespan_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Greater_IntInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_Greater_IntInt(int A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Greater_IntInt");

        UKismetMathLibrary_Greater_IntInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Greater_FloatFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_Greater_FloatFloat(float A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Greater_FloatFloat");

        UKismetMathLibrary_Greater_FloatFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Greater_DateTimeDateTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // struct FDateTime               B                              (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_Greater_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Greater_DateTimeDateTime");

        UKismetMathLibrary_Greater_DateTimeDateTime_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Greater_ByteByte
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // unsigned char                  A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_Greater_ByteByte(unsigned char A, unsigned char B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Greater_ByteByte");

        UKismetMathLibrary_Greater_ByteByte_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetYear
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_GetYear(const struct FDateTime& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetYear");

        UKismetMathLibrary_GetYear_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetYawPitchFromVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 InVec                          (CPF_Parm, CPF_IsPlainOldData)
    // float                          Yaw                            (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Pitch                          (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_GetYawPitchFromVector(const struct FVector& InVec, float* Yaw, float* Pitch)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetYawPitchFromVector");

        UKismetMathLibrary_GetYawPitchFromVector_Params params;
        params.InVec = InVec;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Yaw != nullptr)
            *Yaw = params.Yaw;
        if (Pitch != nullptr)
            *Pitch = params.Pitch;
    }


    // Function Engine.KismetMathLibrary.GetVectorArrayAverage
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TArray<struct FVector>         Vectors                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_GetVectorArrayAverage(TArray<struct FVector> Vectors)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetVectorArrayAverage");

        UKismetMathLibrary_GetVectorArrayAverage_Params params;
        params.Vectors = Vectors;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetUpVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                InRot                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_GetUpVector(const struct FRotator& InRot)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetUpVector");

        UKismetMathLibrary_GetUpVector_Params params;
        params.InRot = InRot;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetTotalSeconds
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_GetTotalSeconds(const struct FTimespan& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTotalSeconds");

        UKismetMathLibrary_GetTotalSeconds_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetTotalMinutes
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_GetTotalMinutes(const struct FTimespan& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTotalMinutes");

        UKismetMathLibrary_GetTotalMinutes_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetTotalMilliseconds
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_GetTotalMilliseconds(const struct FTimespan& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTotalMilliseconds");

        UKismetMathLibrary_GetTotalMilliseconds_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetTotalHours
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_GetTotalHours(const struct FTimespan& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTotalHours");

        UKismetMathLibrary_GetTotalHours_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetTotalDays
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_GetTotalDays(const struct FTimespan& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTotalDays");

        UKismetMathLibrary_GetTotalDays_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetTimeOfDay
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // struct FTimespan               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FTimespan UKismetMathLibrary::STATIC_GetTimeOfDay(const struct FDateTime& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTimeOfDay");

        UKismetMathLibrary_GetTimeOfDay_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetTAU
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_GetTAU()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTAU");

        UKismetMathLibrary_GetTAU_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetSeconds
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_GetSeconds(const struct FTimespan& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetSeconds");

        UKismetMathLibrary_GetSeconds_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetSecond
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_GetSecond(const struct FDateTime& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetSecond");

        UKismetMathLibrary_GetSecond_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetRightVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                InRot                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_GetRightVector(const struct FRotator& InRot)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetRightVector");

        UKismetMathLibrary_GetRightVector_Params params;
        params.InRot = InRot;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetReflectionVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Direction                      (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 SurfaceNormal                  (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_GetReflectionVector(const struct FVector& Direction, const struct FVector& SurfaceNormal)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetReflectionVector");

        UKismetMathLibrary_GetReflectionVector_Params params;
        params.Direction = Direction;
        params.SurfaceNormal = SurfaceNormal;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetPointDistanceToSegment
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Point                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 SegmentStart                   (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 SegmentEnd                     (CPF_Parm, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_GetPointDistanceToSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetPointDistanceToSegment");

        UKismetMathLibrary_GetPointDistanceToSegment_Params params;
        params.Point = Point;
        params.SegmentStart = SegmentStart;
        params.SegmentEnd = SegmentEnd;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetPointDistanceToLine
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Point                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 LineOrigin                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 LineDirection                  (CPF_Parm, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_GetPointDistanceToLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetPointDistanceToLine");

        UKismetMathLibrary_GetPointDistanceToLine_Params params;
        params.Point = Point;
        params.LineOrigin = LineOrigin;
        params.LineDirection = LineDirection;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetPI
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_GetPI()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetPI");

        UKismetMathLibrary_GetPI_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetMonth
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_GetMonth(const struct FDateTime& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMonth");

        UKismetMathLibrary_GetMonth_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetMinutes
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_GetMinutes(const struct FTimespan& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMinutes");

        UKismetMathLibrary_GetMinutes_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetMinute
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_GetMinute(const struct FDateTime& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMinute");

        UKismetMathLibrary_GetMinute_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetMinElement
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_GetMinElement(const struct FVector& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMinElement");

        UKismetMathLibrary_GetMinElement_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetMilliseconds
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_GetMilliseconds(const struct FTimespan& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMilliseconds");

        UKismetMathLibrary_GetMilliseconds_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetMillisecond
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_GetMillisecond(const struct FDateTime& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMillisecond");

        UKismetMathLibrary_GetMillisecond_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetMaxElement
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_GetMaxElement(const struct FVector& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMaxElement");

        UKismetMathLibrary_GetMaxElement_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetHours
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_GetHours(const struct FTimespan& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetHours");

        UKismetMathLibrary_GetHours_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetHour12
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_GetHour12(const struct FDateTime& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetHour12");

        UKismetMathLibrary_GetHour12_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetHour
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_GetHour(const struct FDateTime& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetHour");

        UKismetMathLibrary_GetHour_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetForwardVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                InRot                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_GetForwardVector(const struct FRotator& InRot)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetForwardVector");

        UKismetMathLibrary_GetForwardVector_Params params;
        params.InRot = InRot;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetDuration
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // struct FTimespan               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FTimespan UKismetMathLibrary::STATIC_GetDuration(const struct FTimespan& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetDuration");

        UKismetMathLibrary_GetDuration_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetDirectionUnitVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 From                           (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 To                             (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_GetDirectionUnitVector(const struct FVector& From, const struct FVector& To)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetDirectionUnitVector");

        UKismetMathLibrary_GetDirectionUnitVector_Params params;
        params.From = From;
        params.To = To;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetDays
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_GetDays(const struct FTimespan& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetDays");

        UKismetMathLibrary_GetDays_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetDayOfYear
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_GetDayOfYear(const struct FDateTime& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetDayOfYear");

        UKismetMathLibrary_GetDayOfYear_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetDay
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_GetDay(const struct FDateTime& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetDay");

        UKismetMathLibrary_GetDay_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetDate
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // struct FDateTime               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FDateTime UKismetMathLibrary::STATIC_GetDate(const struct FDateTime& A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetDate");

        UKismetMathLibrary_GetDate_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.GetAxes
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 X                              (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 Y                              (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 Z                              (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_GetAxes(const struct FRotator& A, struct FVector* X, struct FVector* Y, struct FVector* Z)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetAxes");

        UKismetMathLibrary_GetAxes_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (X != nullptr)
            *X = params.X;
        if (Y != nullptr)
            *Y = params.Y;
        if (Z != nullptr)
            *Z = params.Z;
    }


    // Function Engine.KismetMathLibrary.FTruncVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 InVector                       (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FIntVector              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FIntVector UKismetMathLibrary::STATIC_FTruncVector(const struct FVector& InVector)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FTruncVector");

        UKismetMathLibrary_FTruncVector_Params params;
        params.InVector = InVector;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FTrunc
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_FTrunc(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FTrunc");

        UKismetMathLibrary_FTrunc_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FromSeconds
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Seconds                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTimespan               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FTimespan UKismetMathLibrary::STATIC_FromSeconds(float Seconds)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FromSeconds");

        UKismetMathLibrary_FromSeconds_Params params;
        params.Seconds = Seconds;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FromMinutes
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Minutes                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTimespan               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FTimespan UKismetMathLibrary::STATIC_FromMinutes(float Minutes)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FromMinutes");

        UKismetMathLibrary_FromMinutes_Params params;
        params.Minutes = Minutes;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FromMilliseconds
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Milliseconds                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTimespan               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FTimespan UKismetMathLibrary::STATIC_FromMilliseconds(float Milliseconds)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FromMilliseconds");

        UKismetMathLibrary_FromMilliseconds_Params params;
        params.Milliseconds = Milliseconds;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FromHours
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Hours                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTimespan               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FTimespan UKismetMathLibrary::STATIC_FromHours(float Hours)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FromHours");

        UKismetMathLibrary_FromHours_Params params;
        params.Hours = Hours;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FromDays
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          days                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FTimespan               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FTimespan UKismetMathLibrary::STATIC_FromDays(float days)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FromDays");

        UKismetMathLibrary_FromDays_Params params;
        params.days = days;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Fraction
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Fraction(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Fraction");

        UKismetMathLibrary_Fraction_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FMod
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Dividend                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Divisor                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Remainder                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_FMod(float Dividend, float Divisor, float* Remainder)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FMod");

        UKismetMathLibrary_FMod_Params params;
        params.Dividend = Dividend;
        params.Divisor = Divisor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Remainder != nullptr)
            *Remainder = params.Remainder;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FMin
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_FMin(float A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FMin");

        UKismetMathLibrary_FMin_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FMax
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_FMax(float A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FMax");

        UKismetMathLibrary_FMax_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FloatSpringInterp
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // float                          Current                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Target                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FFloatSpringState       SpringState                    (CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // float                          Stiffness                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          CriticalDampingFactor          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Mass                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_FloatSpringInterp(float Current, float Target, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, struct FFloatSpringState* SpringState)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FloatSpringInterp");

        UKismetMathLibrary_FloatSpringInterp_Params params;
        params.Current = Current;
        params.Target = Target;
        params.Stiffness = Stiffness;
        params.CriticalDampingFactor = CriticalDampingFactor;
        params.DeltaTime = DeltaTime;
        params.Mass = Mass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SpringState != nullptr)
            *SpringState = params.SpringState;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FixedTurn
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          InCurrent                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InDesired                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InDeltaRate                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_FixedTurn(float InCurrent, float InDesired, float InDeltaRate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FixedTurn");

        UKismetMathLibrary_FixedTurn_Params params;
        params.InCurrent = InCurrent;
        params.InDesired = InDesired;
        params.InDeltaRate = InDeltaRate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FInterpTo_Constant
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Current                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Target                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InterpSpeed                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FInterpTo_Constant");

        UKismetMathLibrary_FInterpTo_Constant_Params params;
        params.Current = Current;
        params.Target = Target;
        params.DeltaTime = DeltaTime;
        params.InterpSpeed = InterpSpeed;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FInterpTo
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Current                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Target                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InterpSpeed                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FInterpTo");

        UKismetMathLibrary_FInterpTo_Params params;
        params.Current = Current;
        params.Target = Target;
        params.DeltaTime = DeltaTime;
        params.InterpSpeed = InterpSpeed;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FInterpEaseInOut
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Alpha                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Exponent                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_FInterpEaseInOut(float A, float B, float Alpha, float Exponent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FInterpEaseInOut");

        UKismetMathLibrary_FInterpEaseInOut_Params params;
        params.A = A;
        params.B = B;
        params.Alpha = Alpha;
        params.Exponent = Exponent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FindNearestPointsOnLineSegments
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Segment1Start                  (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Segment1End                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Segment2Start                  (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Segment2End                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 Segment1Point                  (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 Segment2Point                  (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_FindNearestPointsOnLineSegments(const struct FVector& Segment1Start, const struct FVector& Segment1End, const struct FVector& Segment2Start, const struct FVector& Segment2End, struct FVector* Segment1Point, struct FVector* Segment2Point)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FindNearestPointsOnLineSegments");

        UKismetMathLibrary_FindNearestPointsOnLineSegments_Params params;
        params.Segment1Start = Segment1Start;
        params.Segment1End = Segment1End;
        params.Segment2Start = Segment2Start;
        params.Segment2End = Segment2End;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Segment1Point != nullptr)
            *Segment1Point = params.Segment1Point;
        if (Segment2Point != nullptr)
            *Segment2Point = params.Segment2Point;
    }


    // Function Engine.KismetMathLibrary.FindLookAtRotation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Start                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 Target                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_FindLookAtRotation(const struct FVector& Start, const struct FVector& Target)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FindLookAtRotation");

        UKismetMathLibrary_FindLookAtRotation_Params params;
        params.Start = Start;
        params.Target = Target;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FindClosestPointOnSegment
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Point                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 SegmentStart                   (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 SegmentEnd                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_FindClosestPointOnSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FindClosestPointOnSegment");

        UKismetMathLibrary_FindClosestPointOnSegment_Params params;
        params.Point = Point;
        params.SegmentStart = SegmentStart;
        params.SegmentEnd = SegmentEnd;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FindClosestPointOnLine
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 Point                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 LineOrigin                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 LineDirection                  (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_FindClosestPointOnLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FindClosestPointOnLine");

        UKismetMathLibrary_FindClosestPointOnLine_Params params;
        params.Point = Point;
        params.LineOrigin = LineOrigin;
        params.LineDirection = LineDirection;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FFloor
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_FFloor(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FFloor");

        UKismetMathLibrary_FFloor_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FClamp
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Min                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Max                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_FClamp(float Value, float Min, float Max)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FClamp");

        UKismetMathLibrary_FClamp_Params params;
        params.Value = Value;
        params.Min = Min;
        params.Max = Max;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.FCeil
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_FCeil(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FCeil");

        UKismetMathLibrary_FCeil_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Exp
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Exp(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Exp");

        UKismetMathLibrary_Exp_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.EqualEqual_VectorVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 B                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          ErrorTolerance                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_EqualEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_VectorVector");

        UKismetMathLibrary_EqualEqual_VectorVector_Params params;
        params.A = A;
        params.B = B;
        params.ErrorTolerance = ErrorTolerance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               B                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          ErrorTolerance                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_EqualEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D");

        UKismetMathLibrary_EqualEqual_Vector2DVector2D_Params params;
        params.A = A;
        params.B = B;
        params.ErrorTolerance = ErrorTolerance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.EqualEqual_TransformTransform
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTransform              A                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FTransform              B                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_EqualEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_TransformTransform");

        UKismetMathLibrary_EqualEqual_TransformTransform_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // struct FTimespan               B                              (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_EqualEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan");

        UKismetMathLibrary_EqualEqual_TimespanTimespan_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                B                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          ErrorTolerance                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_EqualEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator");

        UKismetMathLibrary_EqualEqual_RotatorRotator_Params params;
        params.A = A;
        params.B = B;
        params.ErrorTolerance = ErrorTolerance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.EqualEqual_ObjectObject
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UObject*                 B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_EqualEqual_ObjectObject(class UObject* A, class UObject* B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_ObjectObject");

        UKismetMathLibrary_EqualEqual_ObjectObject_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.EqualEqual_NameName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FName                   A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_EqualEqual_NameName(const struct FName& A, const struct FName& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_NameName");

        UKismetMathLibrary_EqualEqual_NameName_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.EqualEqual_IntInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_EqualEqual_IntInt(int A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_IntInt");

        UKismetMathLibrary_EqualEqual_IntInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.EqualEqual_FloatFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_EqualEqual_FloatFloat(float A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_FloatFloat");

        UKismetMathLibrary_EqualEqual_FloatFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // struct FDateTime               B                              (CPF_Parm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_EqualEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime");

        UKismetMathLibrary_EqualEqual_DateTimeDateTime_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.EqualEqual_ClassClass
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UClass*                  A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_EqualEqual_ClassClass(class UClass* A, class UClass* B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_ClassClass");

        UKismetMathLibrary_EqualEqual_ClassClass_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.EqualEqual_ByteByte
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // unsigned char                  A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_EqualEqual_ByteByte(unsigned char A, unsigned char B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_ByteByte");

        UKismetMathLibrary_EqualEqual_ByteByte_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.EqualEqual_BoolBool
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_EqualEqual_BoolBool(bool A, bool B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_BoolBool");

        UKismetMathLibrary_EqualEqual_BoolBool_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Ease
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Alpha                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<EEasingFunc>       EasingFunc                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          BlendExp                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Steps                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Ease(float A, float B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Ease");

        UKismetMathLibrary_Ease_Params params;
        params.A = A;
        params.B = B;
        params.Alpha = Alpha;
        params.EasingFunc = EasingFunc;
        params.BlendExp = BlendExp;
        params.Steps = Steps;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.DotProduct2D
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               B                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_DotProduct2D(const struct FVector2D& A, const struct FVector2D& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DotProduct2D");

        UKismetMathLibrary_DotProduct2D_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Dot_VectorVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 B                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Dot_VectorVector(const struct FVector& A, const struct FVector& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Dot_VectorVector");

        UKismetMathLibrary_Dot_VectorVector_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Divide_VectorVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 B                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Divide_VectorVector(const struct FVector& A, const struct FVector& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_VectorVector");

        UKismetMathLibrary_Divide_VectorVector_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Divide_VectorInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Divide_VectorInt(const struct FVector& A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_VectorInt");

        UKismetMathLibrary_Divide_VectorInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Divide_VectorFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Divide_VectorFloat(const struct FVector& A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_VectorFloat");

        UKismetMathLibrary_Divide_VectorFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Divide_Vector2DFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               A                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UKismetMathLibrary::STATIC_Divide_Vector2DFloat(const struct FVector2D& A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_Vector2DFloat");

        UKismetMathLibrary_Divide_Vector2DFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Divide_IntInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_Divide_IntInt(int A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_IntInt");

        UKismetMathLibrary_Divide_IntInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Divide_FloatFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Divide_FloatFloat(float A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_FloatFloat");

        UKismetMathLibrary_Divide_FloatFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Divide_ByteByte
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // unsigned char                  A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    unsigned char UKismetMathLibrary::STATIC_Divide_ByteByte(unsigned char A, unsigned char B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_ByteByte");

        UKismetMathLibrary_Divide_ByteByte_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.DegTan
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_DegTan(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegTan");

        UKismetMathLibrary_DegTan_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.DegSin
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_DegSin(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegSin");

        UKismetMathLibrary_DegSin_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.DegreesToRadians
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_DegreesToRadians(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegreesToRadians");

        UKismetMathLibrary_DegreesToRadians_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.DegCos
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_DegCos(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegCos");

        UKismetMathLibrary_DegCos_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.DegAtan2
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_DegAtan2(float A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegAtan2");

        UKismetMathLibrary_DegAtan2_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.DegAtan
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_DegAtan(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegAtan");

        UKismetMathLibrary_DegAtan_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.DegAsin
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_DegAsin(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegAsin");

        UKismetMathLibrary_DegAsin_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.DegAcos
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_DegAcos(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegAcos");

        UKismetMathLibrary_DegAcos_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.DaysInYear
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            Year                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_DaysInYear(int Year)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DaysInYear");

        UKismetMathLibrary_DaysInYear_Params params;
        params.Year = Year;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.DaysInMonth
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            Year                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Month                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_DaysInMonth(int Year, int Month)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DaysInMonth");

        UKismetMathLibrary_DaysInMonth_Params params;
        params.Year = Year;
        params.Month = Month;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.DateTimeMinValue
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FDateTime UKismetMathLibrary::STATIC_DateTimeMinValue()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DateTimeMinValue");

        UKismetMathLibrary_DateTimeMinValue_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.DateTimeMaxValue
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FDateTime UKismetMathLibrary::STATIC_DateTimeMaxValue()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DateTimeMaxValue");

        UKismetMathLibrary_DateTimeMaxValue_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.DateTimeFromString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 DateTimeString                 (CPF_Parm, CPF_ZeroConstructor)
    // struct FDateTime               Result                         (CPF_Parm, CPF_OutParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_DateTimeFromString(const struct FString& DateTimeString, struct FDateTime* Result)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DateTimeFromString");

        UKismetMathLibrary_DateTimeFromString_Params params;
        params.DateTimeString = DateTimeString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Result != nullptr)
            *Result = params.Result;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.DateTimeFromIsoString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 IsoString                      (CPF_Parm, CPF_ZeroConstructor)
    // struct FDateTime               Result                         (CPF_Parm, CPF_OutParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_DateTimeFromIsoString(const struct FString& IsoString, struct FDateTime* Result)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DateTimeFromIsoString");

        UKismetMathLibrary_DateTimeFromIsoString_Params params;
        params.IsoString = IsoString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Result != nullptr)
            *Result = params.Result;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.CrossProduct2D
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               B                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_CrossProduct2D(const struct FVector2D& A, const struct FVector2D& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.CrossProduct2D");

        UKismetMathLibrary_CrossProduct2D_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Cross_VectorVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 B                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Cross_VectorVector(const struct FVector& A, const struct FVector& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Cross_VectorVector");

        UKismetMathLibrary_Cross_VectorVector_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.CreateVectorFromYawPitch
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Yaw                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Pitch                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Length                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_CreateVectorFromYawPitch(float Yaw, float Pitch, float Length)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.CreateVectorFromYawPitch");

        UKismetMathLibrary_CreateVectorFromYawPitch_Params params;
        params.Yaw = Yaw;
        params.Pitch = Pitch;
        params.Length = Length;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Cos
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Cos(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Cos");

        UKismetMathLibrary_Cos_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.ConvertTransformToRelative
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTransform              Transform                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FTransform              ParentTransform                (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FTransform              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FTransform UKismetMathLibrary::STATIC_ConvertTransformToRelative(const struct FTransform& Transform, const struct FTransform& ParentTransform)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ConvertTransformToRelative");

        UKismetMathLibrary_ConvertTransformToRelative_Params params;
        params.Transform = Transform;
        params.ParentTransform = ParentTransform;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_VectorToVector2D
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 InVector                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UKismetMathLibrary::STATIC_Conv_VectorToVector2D(const struct FVector& InVector)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_VectorToVector2D");

        UKismetMathLibrary_Conv_VectorToVector2D_Params params;
        params.InVector = InVector;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_VectorToTransform
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 InLocation                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FTransform              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FTransform UKismetMathLibrary::STATIC_Conv_VectorToTransform(const struct FVector& InLocation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_VectorToTransform");

        UKismetMathLibrary_Conv_VectorToTransform_Params params;
        params.InLocation = InLocation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_VectorToRotator
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 InVec                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_Conv_VectorToRotator(const struct FVector& InVec)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_VectorToRotator");

        UKismetMathLibrary_Conv_VectorToRotator_Params params;
        params.InVec = InVec;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_VectorToLinearColor
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 InVec                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FLinearColor UKismetMathLibrary::STATIC_Conv_VectorToLinearColor(const struct FVector& InVec)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_VectorToLinearColor");

        UKismetMathLibrary_Conv_VectorToLinearColor_Params params;
        params.InVec = InVec;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_Vector2DToVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               InVector2D                     (CPF_Parm, CPF_IsPlainOldData)
    // float                          Z                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Conv_Vector2DToVector(const struct FVector2D& InVector2D, float Z)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_Vector2DToVector");

        UKismetMathLibrary_Conv_Vector2DToVector_Params params;
        params.InVector2D = InVector2D;
        params.Z = Z;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_RotatorToVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                InRot                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Conv_RotatorToVector(const struct FRotator& InRot)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_RotatorToVector");

        UKismetMathLibrary_Conv_RotatorToVector_Params params;
        params.InRot = InRot;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_LinearColorToVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FLinearColor            InLinearColor                  (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Conv_LinearColorToVector(const struct FLinearColor& InLinearColor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_LinearColorToVector");

        UKismetMathLibrary_Conv_LinearColorToVector_Params params;
        params.InLinearColor = InLinearColor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_LinearColorToColor
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FLinearColor            InLinearColor                  (CPF_Parm, CPF_IsPlainOldData)
    // struct FColor                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FColor UKismetMathLibrary::STATIC_Conv_LinearColorToColor(const struct FLinearColor& InLinearColor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_LinearColorToColor");

        UKismetMathLibrary_Conv_LinearColorToColor_Params params;
        params.InLinearColor = InLinearColor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_IntVectorToVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FIntVector              InIntVector                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Conv_IntVectorToVector(const struct FIntVector& InIntVector)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_IntVectorToVector");

        UKismetMathLibrary_Conv_IntVectorToVector_Params params;
        params.InIntVector = InIntVector;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_IntToIntVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            inInt                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FIntVector              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FIntVector UKismetMathLibrary::STATIC_Conv_IntToIntVector(int inInt)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_IntToIntVector");

        UKismetMathLibrary_Conv_IntToIntVector_Params params;
        params.inInt = inInt;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_IntToFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            inInt                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Conv_IntToFloat(int inInt)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_IntToFloat");

        UKismetMathLibrary_Conv_IntToFloat_Params params;
        params.inInt = inInt;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_IntToByte
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            inInt                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    unsigned char UKismetMathLibrary::STATIC_Conv_IntToByte(int inInt)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_IntToByte");

        UKismetMathLibrary_Conv_IntToByte_Params params;
        params.inInt = inInt;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_IntToBool
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            inInt                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_Conv_IntToBool(int inInt)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_IntToBool");

        UKismetMathLibrary_Conv_IntToBool_Params params;
        params.inInt = inInt;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_FloatToVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          InFloat                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Conv_FloatToVector(float InFloat)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_FloatToVector");

        UKismetMathLibrary_Conv_FloatToVector_Params params;
        params.InFloat = InFloat;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_FloatToLinearColor
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          InFloat                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FLinearColor UKismetMathLibrary::STATIC_Conv_FloatToLinearColor(float InFloat)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_FloatToLinearColor");

        UKismetMathLibrary_Conv_FloatToLinearColor_Params params;
        params.InFloat = InFloat;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_ColorToLinearColor
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FColor                  InColor                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FLinearColor UKismetMathLibrary::STATIC_Conv_ColorToLinearColor(const struct FColor& InColor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_ColorToLinearColor");

        UKismetMathLibrary_Conv_ColorToLinearColor_Params params;
        params.InColor = InColor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_ByteToInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // unsigned char                  InByte                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_Conv_ByteToInt(unsigned char InByte)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_ByteToInt");

        UKismetMathLibrary_Conv_ByteToInt_Params params;
        params.InByte = InByte;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_ByteToFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // unsigned char                  InByte                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Conv_ByteToFloat(unsigned char InByte)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_ByteToFloat");

        UKismetMathLibrary_Conv_ByteToFloat_Params params;
        params.InByte = InByte;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_BoolToInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           InBool                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_Conv_BoolToInt(bool InBool)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_BoolToInt");

        UKismetMathLibrary_Conv_BoolToInt_Params params;
        params.InBool = InBool;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_BoolToFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           InBool                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Conv_BoolToFloat(bool InBool)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_BoolToFloat");

        UKismetMathLibrary_Conv_BoolToFloat_Params params;
        params.InBool = InBool;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Conv_BoolToByte
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           InBool                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    unsigned char UKismetMathLibrary::STATIC_Conv_BoolToByte(bool InBool)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_BoolToByte");

        UKismetMathLibrary_Conv_BoolToByte_Params params;
        params.InBool = InBool;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.ComposeTransforms
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTransform              A                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FTransform              B                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FTransform              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FTransform UKismetMathLibrary::STATIC_ComposeTransforms(const struct FTransform& A, const struct FTransform& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ComposeTransforms");

        UKismetMathLibrary_ComposeTransforms_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.ComposeRotators
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                B                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FRotator UKismetMathLibrary::STATIC_ComposeRotators(const struct FRotator& A, const struct FRotator& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ComposeRotators");

        UKismetMathLibrary_ComposeRotators_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.ClassIsChildOf
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UClass*                  TestClass                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  ParentClass                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ClassIsChildOf");

        UKismetMathLibrary_ClassIsChildOf_Params params;
        params.TestClass = TestClass;
        params.ParentClass = ParentClass;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.ClampVectorSize
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          Min                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Max                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_ClampVectorSize(const struct FVector& A, float Min, float Max)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ClampVectorSize");

        UKismetMathLibrary_ClampVectorSize_Params params;
        params.A = A;
        params.Min = Min;
        params.Max = Max;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.ClampAxis
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Angle                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_ClampAxis(float Angle)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ClampAxis");

        UKismetMathLibrary_ClampAxis_Params params;
        params.Angle = Angle;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.ClampAngle
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          AngleDegrees                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MinAngleDegrees                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          MaxAngleDegrees                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ClampAngle");

        UKismetMathLibrary_ClampAngle_Params params;
        params.AngleDegrees = AngleDegrees;
        params.MinAngleDegrees = MinAngleDegrees;
        params.MaxAngleDegrees = MaxAngleDegrees;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Clamp
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Min                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Max                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_Clamp(int Value, int Min, int Max)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Clamp");

        UKismetMathLibrary_Clamp_Params params;
        params.Value = Value;
        params.Min = Min;
        params.Max = Max;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.CInterpTo
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FLinearColor            Current                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            Target                         (CPF_Parm, CPF_IsPlainOldData)
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          InterpSpeed                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FLinearColor UKismetMathLibrary::STATIC_CInterpTo(const struct FLinearColor& Current, const struct FLinearColor& Target, float DeltaTime, float InterpSpeed)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.CInterpTo");

        UKismetMathLibrary_CInterpTo_Params params;
        params.Current = Current;
        params.Target = Target;
        params.DeltaTime = DeltaTime;
        params.InterpSpeed = InterpSpeed;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.BreakVector2D
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               InVec                          (CPF_Parm, CPF_IsPlainOldData)
    // float                          X                              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Y                              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_BreakVector2D(const struct FVector2D& InVec, float* X, float* Y)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakVector2D");

        UKismetMathLibrary_BreakVector2D_Params params;
        params.InVec = InVec;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (X != nullptr)
            *X = params.X;
        if (Y != nullptr)
            *Y = params.Y;
    }


    // Function Engine.KismetMathLibrary.BreakVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 InVec                          (CPF_Parm, CPF_IsPlainOldData)
    // float                          X                              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Y                              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Z                              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_BreakVector(const struct FVector& InVec, float* X, float* Y, float* Z)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakVector");

        UKismetMathLibrary_BreakVector_Params params;
        params.InVec = InVec;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (X != nullptr)
            *X = params.X;
        if (Y != nullptr)
            *Y = params.Y;
        if (Z != nullptr)
            *Z = params.Z;
    }


    // Function Engine.KismetMathLibrary.BreakTransform
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTransform              InTransform                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 Scale                          (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_BreakTransform(const struct FTransform& InTransform, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakTransform");

        UKismetMathLibrary_BreakTransform_Params params;
        params.InTransform = InTransform;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Location != nullptr)
            *Location = params.Location;
        if (Rotation != nullptr)
            *Rotation = params.Rotation;
        if (Scale != nullptr)
            *Scale = params.Scale;
    }


    // Function Engine.KismetMathLibrary.BreakTimespan
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               InTimespan                     (CPF_Parm)
    // int                            days                           (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Hours                          (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Minutes                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Seconds                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Milliseconds                   (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_BreakTimespan(const struct FTimespan& InTimespan, int* days, int* Hours, int* Minutes, int* Seconds, int* Milliseconds)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakTimespan");

        UKismetMathLibrary_BreakTimespan_Params params;
        params.InTimespan = InTimespan;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (days != nullptr)
            *days = params.days;
        if (Hours != nullptr)
            *Hours = params.Hours;
        if (Minutes != nullptr)
            *Minutes = params.Minutes;
        if (Seconds != nullptr)
            *Seconds = params.Seconds;
        if (Milliseconds != nullptr)
            *Milliseconds = params.Milliseconds;
    }


    // Function Engine.KismetMathLibrary.BreakRotIntoAxes
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                InRot                          (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FVector                 X                              (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 Y                              (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 Z                              (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_BreakRotIntoAxes(const struct FRotator& InRot, struct FVector* X, struct FVector* Y, struct FVector* Z)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakRotIntoAxes");

        UKismetMathLibrary_BreakRotIntoAxes_Params params;
        params.InRot = InRot;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (X != nullptr)
            *X = params.X;
        if (Y != nullptr)
            *Y = params.Y;
        if (Z != nullptr)
            *Z = params.Z;
    }


    // Function Engine.KismetMathLibrary.BreakRotator
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                InRot                          (CPF_Parm, CPF_IsPlainOldData)
    // float                          Roll                           (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Pitch                          (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Yaw                            (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_BreakRotator(const struct FRotator& InRot, float* Roll, float* Pitch, float* Yaw)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakRotator");

        UKismetMathLibrary_BreakRotator_Params params;
        params.InRot = InRot;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Roll != nullptr)
            *Roll = params.Roll;
        if (Pitch != nullptr)
            *Pitch = params.Pitch;
        if (Yaw != nullptr)
            *Yaw = params.Yaw;
    }


    // Function Engine.KismetMathLibrary.BreakRandomStream
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRandomStream           InRandomStream                 (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // int                            InitialSeed                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_BreakRandomStream(const struct FRandomStream& InRandomStream, int* InitialSeed)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakRandomStream");

        UKismetMathLibrary_BreakRandomStream_Params params;
        params.InRandomStream = InRandomStream;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (InitialSeed != nullptr)
            *InitialSeed = params.InitialSeed;
    }


    // Function Engine.KismetMathLibrary.BreakDateTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               InDateTime                     (CPF_Parm)
    // int                            Year                           (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Month                          (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Day                            (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Hour                           (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Minute                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Second                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Millisecond                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_BreakDateTime(const struct FDateTime& InDateTime, int* Year, int* Month, int* Day, int* Hour, int* Minute, int* Second, int* Millisecond)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakDateTime");

        UKismetMathLibrary_BreakDateTime_Params params;
        params.InDateTime = InDateTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Year != nullptr)
            *Year = params.Year;
        if (Month != nullptr)
            *Month = params.Month;
        if (Day != nullptr)
            *Day = params.Day;
        if (Hour != nullptr)
            *Hour = params.Hour;
        if (Minute != nullptr)
            *Minute = params.Minute;
        if (Second != nullptr)
            *Second = params.Second;
        if (Millisecond != nullptr)
            *Millisecond = params.Millisecond;
    }


    // Function Engine.KismetMathLibrary.BreakColor
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FLinearColor            InColor                        (CPF_ConstParm, CPF_Parm, CPF_IsPlainOldData)
    // float                          R                              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          G                              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          A                              (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetMathLibrary::STATIC_BreakColor(const struct FLinearColor& InColor, float* R, float* G, float* B, float* A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakColor");

        UKismetMathLibrary_BreakColor_Params params;
        params.InColor = InColor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (R != nullptr)
            *R = params.R;
        if (G != nullptr)
            *G = params.G;
        if (B != nullptr)
            *B = params.B;
        if (A != nullptr)
            *A = params.A;
    }


    // Function Engine.KismetMathLibrary.BooleanXOR
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_BooleanXOR(bool A, bool B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BooleanXOR");

        UKismetMathLibrary_BooleanXOR_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.BooleanOR
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_BooleanOR(bool A, bool B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BooleanOR");

        UKismetMathLibrary_BooleanOR_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.BooleanNOR
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_BooleanNOR(bool A, bool B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BooleanNOR");

        UKismetMathLibrary_BooleanNOR_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.BooleanNAND
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_BooleanNAND(bool A, bool B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BooleanNAND");

        UKismetMathLibrary_BooleanNAND_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.BooleanAND
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetMathLibrary::STATIC_BooleanAND(bool A, bool B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BooleanAND");

        UKismetMathLibrary_BooleanAND_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.BMin
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // unsigned char                  A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    unsigned char UKismetMathLibrary::STATIC_BMin(unsigned char A, unsigned char B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BMin");

        UKismetMathLibrary_BMin_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.BMax
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // unsigned char                  A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    unsigned char UKismetMathLibrary::STATIC_BMax(unsigned char A, unsigned char B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BMax");

        UKismetMathLibrary_BMax_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Atan2
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Atan2(float A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Atan2");

        UKismetMathLibrary_Atan2_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Atan
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Atan(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Atan");

        UKismetMathLibrary_Atan_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Asin
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Asin(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Asin");

        UKismetMathLibrary_Asin_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.And_IntInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_And_IntInt(int A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.And_IntInt");

        UKismetMathLibrary_And_IntInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Add_VectorVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 B                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Add_VectorVector(const struct FVector& A, const struct FVector& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_VectorVector");

        UKismetMathLibrary_Add_VectorVector_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Add_VectorInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Add_VectorInt(const struct FVector& A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_VectorInt");

        UKismetMathLibrary_Add_VectorInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Add_VectorFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 A                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UKismetMathLibrary::STATIC_Add_VectorFloat(const struct FVector& A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_VectorFloat");

        UKismetMathLibrary_Add_VectorFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Add_Vector2DVector2D
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               A                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               B                              (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UKismetMathLibrary::STATIC_Add_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_Vector2DVector2D");

        UKismetMathLibrary_Add_Vector2DVector2D_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Add_Vector2DFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               A                              (CPF_Parm, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UKismetMathLibrary::STATIC_Add_Vector2DFloat(const struct FVector2D& A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_Vector2DFloat");

        UKismetMathLibrary_Add_Vector2DFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Add_TimespanTimespan
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               A                              (CPF_Parm)
    // struct FTimespan               B                              (CPF_Parm)
    // struct FTimespan               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FTimespan UKismetMathLibrary::STATIC_Add_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_TimespanTimespan");

        UKismetMathLibrary_Add_TimespanTimespan_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Add_IntInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_Add_IntInt(int A, int B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_IntInt");

        UKismetMathLibrary_Add_IntInt_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Add_FloatFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Add_FloatFloat(float A, float B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_FloatFloat");

        UKismetMathLibrary_Add_FloatFloat_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Add_DateTimeTimespan
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               A                              (CPF_Parm)
    // struct FTimespan               B                              (CPF_Parm)
    // struct FDateTime               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FDateTime UKismetMathLibrary::STATIC_Add_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_DateTimeTimespan");

        UKismetMathLibrary_Add_DateTimeTimespan_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Add_ByteByte
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // unsigned char                  A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  B                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    unsigned char UKismetMathLibrary::STATIC_Add_ByteByte(unsigned char A, unsigned char B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_ByteByte");

        UKismetMathLibrary_Add_ByteByte_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Acos
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Acos(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Acos");

        UKismetMathLibrary_Acos_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Abs_Int
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetMathLibrary::STATIC_Abs_Int(int A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Abs_Int");

        UKismetMathLibrary_Abs_Int_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetMathLibrary.Abs
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          A                              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetMathLibrary::STATIC_Abs(float A)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Abs");

        UKismetMathLibrary_Abs_Params params;
        params.A = A;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetNodeHelperLibrary.MarkBit
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Data                           (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Index                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetNodeHelperLibrary::STATIC_MarkBit(int Index, int* Data)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.MarkBit");

        UKismetNodeHelperLibrary_MarkBit_Params params;
        params.Index = Index;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Data != nullptr)
            *Data = params.Data;
    }


    // Function Engine.KismetNodeHelperLibrary.HasUnmarkedBit
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Data                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            NumBits                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetNodeHelperLibrary::STATIC_HasUnmarkedBit(int Data, int NumBits)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.HasUnmarkedBit");

        UKismetNodeHelperLibrary_HasUnmarkedBit_Params params;
        params.Data = Data;
        params.NumBits = NumBits;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetNodeHelperLibrary.HasMarkedBit
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Data                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            NumBits                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetNodeHelperLibrary::STATIC_HasMarkedBit(int Data, int NumBits)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.HasMarkedBit");

        UKismetNodeHelperLibrary_HasMarkedBit_Params params;
        params.Data = Data;
        params.NumBits = NumBits;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetNodeHelperLibrary.GetValidValue
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UEnum*                   Enum                           (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  EnumeratorValue                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    unsigned char UKismetNodeHelperLibrary::STATIC_GetValidValue(class UEnum* Enum, unsigned char EnumeratorValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.GetValidValue");

        UKismetNodeHelperLibrary_GetValidValue_Params params;
        params.Enum = Enum;
        params.EnumeratorValue = EnumeratorValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetNodeHelperLibrary.GetUnmarkedBit
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Data                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            StartIdx                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            NumBits                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bRandom                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetNodeHelperLibrary::STATIC_GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.GetUnmarkedBit");

        UKismetNodeHelperLibrary_GetUnmarkedBit_Params params;
        params.Data = Data;
        params.StartIdx = StartIdx;
        params.NumBits = NumBits;
        params.bRandom = bRandom;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Data                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            StartIdx                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            NumBits                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetNodeHelperLibrary::STATIC_GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit");

        UKismetNodeHelperLibrary_GetRandomUnmarkedBit_Params params;
        params.Data = Data;
        params.StartIdx = StartIdx;
        params.NumBits = NumBits;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Data                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            StartIdx                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            NumBits                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetNodeHelperLibrary::STATIC_GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit");

        UKismetNodeHelperLibrary_GetFirstUnmarkedBit_Params params;
        params.Data = Data;
        params.StartIdx = StartIdx;
        params.NumBits = NumBits;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetNodeHelperLibrary.GetEnumeratorValueFromIndex
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UEnum*                   Enum                           (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  EnumeratorIndex                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    unsigned char UKismetNodeHelperLibrary::STATIC_GetEnumeratorValueFromIndex(class UEnum* Enum, unsigned char EnumeratorIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.GetEnumeratorValueFromIndex");

        UKismetNodeHelperLibrary_GetEnumeratorValueFromIndex_Params params;
        params.Enum = Enum;
        params.EnumeratorIndex = EnumeratorIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UEnum*                   Enum                           (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  EnumeratorValue                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetNodeHelperLibrary::STATIC_GetEnumeratorUserFriendlyName(class UEnum* Enum, unsigned char EnumeratorValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName");

        UKismetNodeHelperLibrary_GetEnumeratorUserFriendlyName_Params params;
        params.Enum = Enum;
        params.EnumeratorValue = EnumeratorValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetNodeHelperLibrary.GetEnumeratorName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UEnum*                   Enum                           (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  EnumeratorValue                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FName UKismetNodeHelperLibrary::STATIC_GetEnumeratorName(class UEnum* Enum, unsigned char EnumeratorValue)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.GetEnumeratorName");

        UKismetNodeHelperLibrary_GetEnumeratorName_Params params;
        params.Enum = Enum;
        params.EnumeratorValue = EnumeratorValue;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetNodeHelperLibrary.ClearBit
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Data                           (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Index                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetNodeHelperLibrary::STATIC_ClearBit(int Index, int* Data)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.ClearBit");

        UKismetNodeHelperLibrary_ClearBit_Params params;
        params.Index = Index;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Data != nullptr)
            *Data = params.Data;
    }


    // Function Engine.KismetNodeHelperLibrary.ClearAllBits
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Data                           (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetNodeHelperLibrary::STATIC_ClearAllBits(int* Data)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.ClearAllBits");

        UKismetNodeHelperLibrary_ClearAllBits_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Data != nullptr)
            *Data = params.Data;
    }


    // Function Engine.KismetNodeHelperLibrary.BitIsMarked
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // int                            Data                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Index                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetNodeHelperLibrary::STATIC_BitIsMarked(int Data, int Index)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.BitIsMarked");

        UKismetNodeHelperLibrary_BitIsMarked_Params params;
        params.Data = Data;
        params.Index = Index;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetRenderingLibrary.MakeSkinWeightInfo
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            Bone0                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  Weight0                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Bone1                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  Weight1                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Bone2                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  Weight2                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Bone3                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  Weight3                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FSkelMeshSkinWeightInfo ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FSkelMeshSkinWeightInfo UKismetRenderingLibrary::STATIC_MakeSkinWeightInfo(int Bone0, unsigned char Weight0, int Bone1, unsigned char Weight1, int Bone2, unsigned char Weight2, int Bone3, unsigned char Weight3)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.MakeSkinWeightInfo");

        UKismetRenderingLibrary_MakeSkinWeightInfo_Params params;
        params.Bone0 = Bone0;
        params.Weight0 = Weight0;
        params.Bone1 = Bone1;
        params.Weight1 = Weight1;
        params.Bone2 = Bone2;
        params.Weight2 = Weight2;
        params.Bone3 = Bone3;
        params.Weight3 = Weight3;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetRenderingLibrary.ExportTexture2D
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UTexture2D*              Texture                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 FilePath                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Filename                       (CPF_Parm, CPF_ZeroConstructor)

    void UKismetRenderingLibrary::STATIC_ExportTexture2D(class UObject* WorldContextObject, class UTexture2D* Texture, const struct FString& FilePath, const struct FString& Filename)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.ExportTexture2D");

        UKismetRenderingLibrary_ExportTexture2D_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Texture = Texture;
        params.FilePath = FilePath;
        params.Filename = Filename;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetRenderingLibrary.ExportRenderTarget
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UTextureRenderTarget2D*  TextureRenderTarget            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 FilePath                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Filename                       (CPF_Parm, CPF_ZeroConstructor)

    void UKismetRenderingLibrary::STATIC_ExportRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FString& FilePath, const struct FString& Filename)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.ExportRenderTarget");

        UKismetRenderingLibrary_ExportRenderTarget_Params params;
        params.WorldContextObject = WorldContextObject;
        params.TextureRenderTarget = TextureRenderTarget;
        params.FilePath = FilePath;
        params.Filename = Filename;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FDrawToRenderTargetContext Context                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)

    void UKismetRenderingLibrary::STATIC_EndDrawCanvasToRenderTarget(class UObject* WorldContextObject, const struct FDrawToRenderTargetContext& Context)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget");

        UKismetRenderingLibrary_EndDrawCanvasToRenderTarget_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Context = Context;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UTextureRenderTarget2D*  TextureRenderTarget            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInterface*      Material                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetRenderingLibrary::STATIC_DrawMaterialToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget");

        UKismetRenderingLibrary_DrawMaterialToRenderTarget_Params params;
        params.WorldContextObject = WorldContextObject;
        params.TextureRenderTarget = TextureRenderTarget;
        params.Material = Material;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetRenderingLibrary.CreateRenderTarget2D
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Width                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Height                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UTextureRenderTarget2D*  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UTextureRenderTarget2D* UKismetRenderingLibrary::STATIC_CreateRenderTarget2D(class UObject* WorldContextObject, int Width, int Height)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.CreateRenderTarget2D");

        UKismetRenderingLibrary_CreateRenderTarget2D_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Width = Width;
        params.Height = Height;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetRenderingLibrary.ClearRenderTarget2D
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UTextureRenderTarget2D*  TextureRenderTarget            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            ClearColor                     (CPF_Parm, CPF_IsPlainOldData)

    void UKismetRenderingLibrary::STATIC_ClearRenderTarget2D(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FLinearColor& ClearColor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.ClearRenderTarget2D");

        UKismetRenderingLibrary_ClearRenderTarget2D_Params params;
        params.WorldContextObject = WorldContextObject;
        params.TextureRenderTarget = TextureRenderTarget;
        params.ClearColor = ClearColor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.KismetRenderingLibrary.BreakSkinWeightInfo
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FSkelMeshSkinWeightInfo InWeight                       (CPF_Parm, CPF_IsPlainOldData)
    // int                            Bone0                          (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  Weight0                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Bone1                          (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  Weight1                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Bone2                          (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  Weight2                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Bone3                          (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // unsigned char                  Weight3                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetRenderingLibrary::STATIC_BreakSkinWeightInfo(const struct FSkelMeshSkinWeightInfo& InWeight, int* Bone0, unsigned char* Weight0, int* Bone1, unsigned char* Weight1, int* Bone2, unsigned char* Weight2, int* Bone3, unsigned char* Weight3)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.BreakSkinWeightInfo");

        UKismetRenderingLibrary_BreakSkinWeightInfo_Params params;
        params.InWeight = InWeight;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Bone0 != nullptr)
            *Bone0 = params.Bone0;
        if (Weight0 != nullptr)
            *Weight0 = params.Weight0;
        if (Bone1 != nullptr)
            *Bone1 = params.Bone1;
        if (Weight1 != nullptr)
            *Weight1 = params.Weight1;
        if (Bone2 != nullptr)
            *Bone2 = params.Bone2;
        if (Weight2 != nullptr)
            *Weight2 = params.Weight2;
        if (Bone3 != nullptr)
            *Bone3 = params.Bone3;
        if (Weight3 != nullptr)
            *Weight3 = params.Weight3;
    }


    // Function Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UTextureRenderTarget2D*  TextureRenderTarget            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UCanvas*                 Canvas                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               Size                           (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FDrawToRenderTargetContext Context                        (CPF_Parm, CPF_OutParm)

    void UKismetRenderingLibrary::STATIC_BeginDrawCanvasToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UCanvas** Canvas, struct FVector2D* Size, struct FDrawToRenderTargetContext* Context)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget");

        UKismetRenderingLibrary_BeginDrawCanvasToRenderTarget_Params params;
        params.WorldContextObject = WorldContextObject;
        params.TextureRenderTarget = TextureRenderTarget;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Canvas != nullptr)
            *Canvas = params.Canvas;
        if (Size != nullptr)
            *Size = params.Size;
        if (Context != nullptr)
            *Context = params.Context;
    }


    // Function Engine.KismetStringLibrary.TrimTrailing
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_TrimTrailing(const struct FString& SourceString)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.TrimTrailing");

        UKismetStringLibrary_TrimTrailing_Params params;
        params.SourceString = SourceString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Trim
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Trim(const struct FString& SourceString)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Trim");

        UKismetStringLibrary_Trim_Params params;
        params.SourceString = SourceString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.ToUpper
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_ToUpper(const struct FString& SourceString)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.ToUpper");

        UKismetStringLibrary_ToUpper_Params params;
        params.SourceString = SourceString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.ToLower
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_ToLower(const struct FString& SourceString)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.ToLower");

        UKismetStringLibrary_ToLower_Params params;
        params.SourceString = SourceString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.TimeSecondsToString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          InSeconds                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_TimeSecondsToString(float InSeconds)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.TimeSecondsToString");

        UKismetStringLibrary_TimeSecondsToString_Params params;
        params.InSeconds = InSeconds;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.StartsWith
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 InPrefix                       (CPF_Parm, CPF_ZeroConstructor)
    // TEnumAsByte<ESearchCase>       SearchCase                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetStringLibrary::STATIC_StartsWith(const struct FString& SourceString, const struct FString& InPrefix, TEnumAsByte<ESearchCase> SearchCase)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.StartsWith");

        UKismetStringLibrary_StartsWith_Params params;
        params.SourceString = SourceString;
        params.InPrefix = InPrefix;
        params.SearchCase = SearchCase;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Split
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 InStr                          (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 LeftS                          (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // struct FString                 RightS                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // TEnumAsByte<ESearchCase>       SearchCase                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ESearchDir>        SearchDir                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetStringLibrary::STATIC_Split(const struct FString& SourceString, const struct FString& InStr, TEnumAsByte<ESearchCase> SearchCase, TEnumAsByte<ESearchDir> SearchDir, struct FString* LeftS, struct FString* RightS)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Split");

        UKismetStringLibrary_Split_Params params;
        params.SourceString = SourceString;
        params.InStr = InStr;
        params.SearchCase = SearchCase;
        params.SearchDir = SearchDir;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (LeftS != nullptr)
            *LeftS = params.LeftS;
        if (RightS != nullptr)
            *RightS = params.RightS;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.RightPad
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // int                            ChCount                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_RightPad(const struct FString& SourceString, int ChCount)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.RightPad");

        UKismetStringLibrary_RightPad_Params params;
        params.SourceString = SourceString;
        params.ChCount = ChCount;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.RightChop
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // int                            Count                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_RightChop(const struct FString& SourceString, int Count)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.RightChop");

        UKismetStringLibrary_RightChop_Params params;
        params.SourceString = SourceString;
        params.Count = Count;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Right
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // int                            Count                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Right(const struct FString& SourceString, int Count)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Right");

        UKismetStringLibrary_Right_Params params;
        params.SourceString = SourceString;
        params.Count = Count;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Reverse
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Reverse(const struct FString& SourceString)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Reverse");

        UKismetStringLibrary_Reverse_Params params;
        params.SourceString = SourceString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.ReplaceInline
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // struct FString                 SearchText                     (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReplacementText                (CPF_Parm, CPF_ZeroConstructor)
    // TEnumAsByte<ESearchCase>       SearchCase                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetStringLibrary::STATIC_ReplaceInline(const struct FString& SearchText, const struct FString& ReplacementText, TEnumAsByte<ESearchCase> SearchCase, struct FString* SourceString)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.ReplaceInline");

        UKismetStringLibrary_ReplaceInline_Params params;
        params.SearchText = SearchText;
        params.ReplacementText = ReplacementText;
        params.SearchCase = SearchCase;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (SourceString != nullptr)
            *SourceString = params.SourceString;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Replace
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 From                           (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 To                             (CPF_Parm, CPF_ZeroConstructor)
    // TEnumAsByte<ESearchCase>       SearchCase                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Replace(const struct FString& SourceString, const struct FString& From, const struct FString& To, TEnumAsByte<ESearchCase> SearchCase)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Replace");

        UKismetStringLibrary_Replace_Params params;
        params.SourceString = SourceString;
        params.From = From;
        params.To = To;
        params.SearchCase = SearchCase;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.ParseIntoArray
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Delimiter                      (CPF_Parm, CPF_ZeroConstructor)
    // bool                           CullEmptyStrings               (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<struct FString>         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    TArray<struct FString> UKismetStringLibrary::STATIC_ParseIntoArray(const struct FString& SourceString, const struct FString& Delimiter, bool CullEmptyStrings)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.ParseIntoArray");

        UKismetStringLibrary_ParseIntoArray_Params params;
        params.SourceString = SourceString;
        params.Delimiter = Delimiter;
        params.CullEmptyStrings = CullEmptyStrings;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.NotEqual_StrStr
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 A                              (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 B                              (CPF_Parm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetStringLibrary::STATIC_NotEqual_StrStr(const struct FString& A, const struct FString& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.NotEqual_StrStr");

        UKismetStringLibrary_NotEqual_StrStr_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.NotEqual_StriStri
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 A                              (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 B                              (CPF_Parm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetStringLibrary::STATIC_NotEqual_StriStri(const struct FString& A, const struct FString& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.NotEqual_StriStri");

        UKismetStringLibrary_NotEqual_StriStri_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Mid
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // int                            Start                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Count                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Mid(const struct FString& SourceString, int Start, int Count)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Mid");

        UKismetStringLibrary_Mid_Params params;
        params.SourceString = SourceString;
        params.Start = Start;
        params.Count = Count;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.MatchesWildcard
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Wildcard                       (CPF_Parm, CPF_ZeroConstructor)
    // TEnumAsByte<ESearchCase>       SearchCase                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetStringLibrary::STATIC_MatchesWildcard(const struct FString& SourceString, const struct FString& Wildcard, TEnumAsByte<ESearchCase> SearchCase)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.MatchesWildcard");

        UKismetStringLibrary_MatchesWildcard_Params params;
        params.SourceString = SourceString;
        params.Wildcard = Wildcard;
        params.SearchCase = SearchCase;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Len
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 S                              (CPF_Parm, CPF_ZeroConstructor)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetStringLibrary::STATIC_Len(const struct FString& S)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Len");

        UKismetStringLibrary_Len_Params params;
        params.S = S;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.LeftPad
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // int                            ChCount                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_LeftPad(const struct FString& SourceString, int ChCount)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.LeftPad");

        UKismetStringLibrary_LeftPad_Params params;
        params.SourceString = SourceString;
        params.ChCount = ChCount;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.LeftChop
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // int                            Count                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_LeftChop(const struct FString& SourceString, int Count)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.LeftChop");

        UKismetStringLibrary_LeftChop_Params params;
        params.SourceString = SourceString;
        params.Count = Count;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Left
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // int                            Count                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Left(const struct FString& SourceString, int Count)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Left");

        UKismetStringLibrary_Left_Params params;
        params.SourceString = SourceString;
        params.Count = Count;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.JoinStringArray
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TArray<struct FString>         SourceArray                    (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // struct FString                 Separator                      (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_JoinStringArray(TArray<struct FString> SourceArray, const struct FString& Separator)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.JoinStringArray");

        UKismetStringLibrary_JoinStringArray_Params params;
        params.SourceArray = SourceArray;
        params.Separator = Separator;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.IsNumeric
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetStringLibrary::STATIC_IsNumeric(const struct FString& SourceString)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.IsNumeric");

        UKismetStringLibrary_IsNumeric_Params params;
        params.SourceString = SourceString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.GetSubstring
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // int                            StartIndex                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Length                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_GetSubstring(const struct FString& SourceString, int StartIndex, int Length)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.GetSubstring");

        UKismetStringLibrary_GetSubstring_Params params;
        params.SourceString = SourceString;
        params.StartIndex = StartIndex;
        params.Length = Length;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.GetCharacterAsNumber
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // int                            Index                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetStringLibrary::STATIC_GetCharacterAsNumber(const struct FString& SourceString, int Index)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.GetCharacterAsNumber");

        UKismetStringLibrary_GetCharacterAsNumber_Params params;
        params.SourceString = SourceString;
        params.Index = Index;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.GetCharacterArrayFromString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // TArray<struct FString>         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    TArray<struct FString> UKismetStringLibrary::STATIC_GetCharacterArrayFromString(const struct FString& SourceString)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.GetCharacterArrayFromString");

        UKismetStringLibrary_GetCharacterArrayFromString_Params params;
        params.SourceString = SourceString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.FindSubstring
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SearchIn                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Substring                      (CPF_Parm, CPF_ZeroConstructor)
    // bool                           bUseCase                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bSearchFromEnd                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            StartPosition                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetStringLibrary::STATIC_FindSubstring(const struct FString& SearchIn, const struct FString& Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.FindSubstring");

        UKismetStringLibrary_FindSubstring_Params params;
        params.SearchIn = SearchIn;
        params.Substring = Substring;
        params.bUseCase = bUseCase;
        params.bSearchFromEnd = bSearchFromEnd;
        params.StartPosition = StartPosition;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.EqualEqual_StrStr
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 A                              (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 B                              (CPF_Parm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetStringLibrary::STATIC_EqualEqual_StrStr(const struct FString& A, const struct FString& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.EqualEqual_StrStr");

        UKismetStringLibrary_EqualEqual_StrStr_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.EqualEqual_StriStri
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 A                              (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 B                              (CPF_Parm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetStringLibrary::STATIC_EqualEqual_StriStri(const struct FString& A, const struct FString& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.EqualEqual_StriStri");

        UKismetStringLibrary_EqualEqual_StriStri_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.EndsWith
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 InSuffix                       (CPF_Parm, CPF_ZeroConstructor)
    // TEnumAsByte<ESearchCase>       SearchCase                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetStringLibrary::STATIC_EndsWith(const struct FString& SourceString, const struct FString& InSuffix, TEnumAsByte<ESearchCase> SearchCase)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.EndsWith");

        UKismetStringLibrary_EndsWith_Params params;
        params.SourceString = SourceString;
        params.InSuffix = InSuffix;
        params.SearchCase = SearchCase;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.CullArray
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SourceString                   (CPF_Parm, CPF_ZeroConstructor)
    // TArray<struct FString>         inArray                        (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetStringLibrary::STATIC_CullArray(const struct FString& SourceString, TArray<struct FString>* inArray)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.CullArray");

        UKismetStringLibrary_CullArray_Params params;
        params.SourceString = SourceString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (inArray != nullptr)
            *inArray = params.inArray;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Conv_VectorToString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 InVec                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Conv_VectorToString(const struct FVector& InVec)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_VectorToString");

        UKismetStringLibrary_Conv_VectorToString_Params params;
        params.InVec = InVec;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Conv_Vector2dToString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               InVec                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Conv_Vector2dToString(const struct FVector2D& InVec)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_Vector2dToString");

        UKismetStringLibrary_Conv_Vector2dToString_Params params;
        params.InVec = InVec;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Conv_TransformToString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTransform              InTrans                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Conv_TransformToString(const struct FTransform& InTrans)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_TransformToString");

        UKismetStringLibrary_Conv_TransformToString_Params params;
        params.InTrans = InTrans;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Conv_StringToVector2D
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 inString                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FVector2D               OutConvertedVector2D           (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           OutIsValid                     (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetStringLibrary::STATIC_Conv_StringToVector2D(const struct FString& inString, struct FVector2D* OutConvertedVector2D, bool* OutIsValid)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_StringToVector2D");

        UKismetStringLibrary_Conv_StringToVector2D_Params params;
        params.inString = inString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutConvertedVector2D != nullptr)
            *OutConvertedVector2D = params.OutConvertedVector2D;
        if (OutIsValid != nullptr)
            *OutIsValid = params.OutIsValid;
    }


    // Function Engine.KismetStringLibrary.Conv_StringToVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 inString                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FVector                 OutConvertedVector             (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           OutIsValid                     (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetStringLibrary::STATIC_Conv_StringToVector(const struct FString& inString, struct FVector* OutConvertedVector, bool* OutIsValid)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_StringToVector");

        UKismetStringLibrary_Conv_StringToVector_Params params;
        params.inString = inString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutConvertedVector != nullptr)
            *OutConvertedVector = params.OutConvertedVector;
        if (OutIsValid != nullptr)
            *OutIsValid = params.OutIsValid;
    }


    // Function Engine.KismetStringLibrary.Conv_StringToRotator
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 inString                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FRotator                OutConvertedRotator            (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           OutIsValid                     (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetStringLibrary::STATIC_Conv_StringToRotator(const struct FString& inString, struct FRotator* OutConvertedRotator, bool* OutIsValid)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_StringToRotator");

        UKismetStringLibrary_Conv_StringToRotator_Params params;
        params.inString = inString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutConvertedRotator != nullptr)
            *OutConvertedRotator = params.OutConvertedRotator;
        if (OutIsValid != nullptr)
            *OutIsValid = params.OutIsValid;
    }


    // Function Engine.KismetStringLibrary.Conv_StringToName
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 inString                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FName UKismetStringLibrary::STATIC_Conv_StringToName(const struct FString& inString)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_StringToName");

        UKismetStringLibrary_Conv_StringToName_Params params;
        params.inString = inString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Conv_StringToInt
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 inString                       (CPF_Parm, CPF_ZeroConstructor)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UKismetStringLibrary::STATIC_Conv_StringToInt(const struct FString& inString)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_StringToInt");

        UKismetStringLibrary_Conv_StringToInt_Params params;
        params.inString = inString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Conv_StringToFloat
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 inString                       (CPF_Parm, CPF_ZeroConstructor)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UKismetStringLibrary::STATIC_Conv_StringToFloat(const struct FString& inString)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_StringToFloat");

        UKismetStringLibrary_Conv_StringToFloat_Params params;
        params.inString = inString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Conv_StringToColor
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 inString                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FLinearColor            OutConvertedColor              (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // bool                           OutIsValid                     (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UKismetStringLibrary::STATIC_Conv_StringToColor(const struct FString& inString, struct FLinearColor* OutConvertedColor, bool* OutIsValid)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_StringToColor");

        UKismetStringLibrary_Conv_StringToColor_Params params;
        params.inString = inString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutConvertedColor != nullptr)
            *OutConvertedColor = params.OutConvertedColor;
        if (OutIsValid != nullptr)
            *OutIsValid = params.OutIsValid;
    }


    // Function Engine.KismetStringLibrary.Conv_RotatorToString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                InRot                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Conv_RotatorToString(const struct FRotator& InRot)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_RotatorToString");

        UKismetStringLibrary_Conv_RotatorToString_Params params;
        params.InRot = InRot;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Conv_ObjectToString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 InObj                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Conv_ObjectToString(class UObject* InObj)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_ObjectToString");

        UKismetStringLibrary_Conv_ObjectToString_Params params;
        params.InObj = InObj;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Conv_NameToString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FName                   InName                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Conv_NameToString(const struct FName& InName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_NameToString");

        UKismetStringLibrary_Conv_NameToString_Params params;
        params.InName = InName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Conv_IntVectorToString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FIntVector              InIntVec                       (CPF_Parm)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Conv_IntVectorToString(const struct FIntVector& InIntVec)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_IntVectorToString");

        UKismetStringLibrary_Conv_IntVectorToString_Params params;
        params.InIntVec = InIntVec;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Conv_IntToString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            inInt                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Conv_IntToString(int inInt)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_IntToString");

        UKismetStringLibrary_Conv_IntToString_Params params;
        params.inInt = inInt;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Conv_FloatToString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          InFloat                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Conv_FloatToString(float InFloat)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_FloatToString");

        UKismetStringLibrary_Conv_FloatToString_Params params;
        params.InFloat = InFloat;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Conv_ColorToString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FLinearColor            InColor                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Conv_ColorToString(const struct FLinearColor& InColor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_ColorToString");

        UKismetStringLibrary_Conv_ColorToString_Params params;
        params.InColor = InColor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Conv_ByteToString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // unsigned char                  InByte                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Conv_ByteToString(unsigned char InByte)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_ByteToString");

        UKismetStringLibrary_Conv_ByteToString_Params params;
        params.InByte = InByte;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Conv_BoolToString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           InBool                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Conv_BoolToString(bool InBool)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_BoolToString");

        UKismetStringLibrary_Conv_BoolToString_Params params;
        params.InBool = InBool;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Contains
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 SearchIn                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Substring                      (CPF_Parm, CPF_ZeroConstructor)
    // bool                           bUseCase                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bSearchFromEnd                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetStringLibrary::STATIC_Contains(const struct FString& SearchIn, const struct FString& Substring, bool bUseCase, bool bSearchFromEnd)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Contains");

        UKismetStringLibrary_Contains_Params params;
        params.SearchIn = SearchIn;
        params.Substring = Substring;
        params.bUseCase = bUseCase;
        params.bSearchFromEnd = bSearchFromEnd;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.Concat_StrStr
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 A                              (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 B                              (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_Concat_StrStr(const struct FString& A, const struct FString& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Concat_StrStr");

        UKismetStringLibrary_Concat_StrStr_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.BuildString_Vector2d
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 AppendTo                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Prefix                         (CPF_Parm, CPF_ZeroConstructor)
    // struct FVector2D               InVector2D                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FString                 Suffix                         (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_BuildString_Vector2d(const struct FString& AppendTo, const struct FString& Prefix, const struct FVector2D& InVector2D, const struct FString& Suffix)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_Vector2d");

        UKismetStringLibrary_BuildString_Vector2d_Params params;
        params.AppendTo = AppendTo;
        params.Prefix = Prefix;
        params.InVector2D = InVector2D;
        params.Suffix = Suffix;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.BuildString_Vector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 AppendTo                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Prefix                         (CPF_Parm, CPF_ZeroConstructor)
    // struct FVector                 InVector                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FString                 Suffix                         (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_BuildString_Vector(const struct FString& AppendTo, const struct FString& Prefix, const struct FVector& InVector, const struct FString& Suffix)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_Vector");

        UKismetStringLibrary_BuildString_Vector_Params params;
        params.AppendTo = AppendTo;
        params.Prefix = Prefix;
        params.InVector = InVector;
        params.Suffix = Suffix;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.BuildString_Rotator
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 AppendTo                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Prefix                         (CPF_Parm, CPF_ZeroConstructor)
    // struct FRotator                InRot                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FString                 Suffix                         (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_BuildString_Rotator(const struct FString& AppendTo, const struct FString& Prefix, const struct FRotator& InRot, const struct FString& Suffix)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_Rotator");

        UKismetStringLibrary_BuildString_Rotator_Params params;
        params.AppendTo = AppendTo;
        params.Prefix = Prefix;
        params.InRot = InRot;
        params.Suffix = Suffix;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.BuildString_Object
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 AppendTo                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Prefix                         (CPF_Parm, CPF_ZeroConstructor)
    // class UObject*                 InObj                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 Suffix                         (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_BuildString_Object(const struct FString& AppendTo, const struct FString& Prefix, class UObject* InObj, const struct FString& Suffix)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_Object");

        UKismetStringLibrary_BuildString_Object_Params params;
        params.AppendTo = AppendTo;
        params.Prefix = Prefix;
        params.InObj = InObj;
        params.Suffix = Suffix;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.BuildString_Name
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 AppendTo                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Prefix                         (CPF_Parm, CPF_ZeroConstructor)
    // struct FName                   InName                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 Suffix                         (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_BuildString_Name(const struct FString& AppendTo, const struct FString& Prefix, const struct FName& InName, const struct FString& Suffix)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_Name");

        UKismetStringLibrary_BuildString_Name_Params params;
        params.AppendTo = AppendTo;
        params.Prefix = Prefix;
        params.InName = InName;
        params.Suffix = Suffix;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.BuildString_IntVector
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 AppendTo                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Prefix                         (CPF_Parm, CPF_ZeroConstructor)
    // struct FIntVector              InIntVector                    (CPF_Parm)
    // struct FString                 Suffix                         (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_BuildString_IntVector(const struct FString& AppendTo, const struct FString& Prefix, const struct FIntVector& InIntVector, const struct FString& Suffix)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_IntVector");

        UKismetStringLibrary_BuildString_IntVector_Params params;
        params.AppendTo = AppendTo;
        params.Prefix = Prefix;
        params.InIntVector = InIntVector;
        params.Suffix = Suffix;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.BuildString_Int
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 AppendTo                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Prefix                         (CPF_Parm, CPF_ZeroConstructor)
    // int                            inInt                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 Suffix                         (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_BuildString_Int(const struct FString& AppendTo, const struct FString& Prefix, int inInt, const struct FString& Suffix)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_Int");

        UKismetStringLibrary_BuildString_Int_Params params;
        params.AppendTo = AppendTo;
        params.Prefix = Prefix;
        params.inInt = inInt;
        params.Suffix = Suffix;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.BuildString_Float
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 AppendTo                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Prefix                         (CPF_Parm, CPF_ZeroConstructor)
    // float                          InFloat                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 Suffix                         (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_BuildString_Float(const struct FString& AppendTo, const struct FString& Prefix, float InFloat, const struct FString& Suffix)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_Float");

        UKismetStringLibrary_BuildString_Float_Params params;
        params.AppendTo = AppendTo;
        params.Prefix = Prefix;
        params.InFloat = InFloat;
        params.Suffix = Suffix;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.BuildString_Color
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 AppendTo                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Prefix                         (CPF_Parm, CPF_ZeroConstructor)
    // struct FLinearColor            InColor                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FString                 Suffix                         (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_BuildString_Color(const struct FString& AppendTo, const struct FString& Prefix, const struct FLinearColor& InColor, const struct FString& Suffix)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_Color");

        UKismetStringLibrary_BuildString_Color_Params params;
        params.AppendTo = AppendTo;
        params.Prefix = Prefix;
        params.InColor = InColor;
        params.Suffix = Suffix;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringLibrary.BuildString_Bool
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 AppendTo                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Prefix                         (CPF_Parm, CPF_ZeroConstructor)
    // bool                           InBool                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 Suffix                         (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringLibrary::STATIC_BuildString_Bool(const struct FString& AppendTo, const struct FString& Prefix, bool InBool, const struct FString& Suffix)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_Bool");

        UKismetStringLibrary_BuildString_Bool_Params params;
        params.AppendTo = AppendTo;
        params.Prefix = Prefix;
        params.InBool = InBool;
        params.Suffix = Suffix;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringTableLibrary.IsRegisteredTableId
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FName                   TableId                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetStringTableLibrary::STATIC_IsRegisteredTableId(const struct FName& TableId)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringTableLibrary.IsRegisteredTableId");

        UKismetStringTableLibrary_IsRegisteredTableId_Params params;
        params.TableId = TableId;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringTableLibrary.IsRegisteredTableEntry
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FName                   TableId                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 Key                            (CPF_Parm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetStringTableLibrary::STATIC_IsRegisteredTableEntry(const struct FName& TableId, const struct FString& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringTableLibrary.IsRegisteredTableEntry");

        UKismetStringTableLibrary_IsRegisteredTableEntry_Params params;
        params.TableId = TableId;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringTableLibrary.GetTableNamespace
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FName                   TableId                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringTableLibrary::STATIC_GetTableNamespace(const struct FName& TableId)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringTableLibrary.GetTableNamespace");

        UKismetStringTableLibrary_GetTableNamespace_Params params;
        params.TableId = TableId;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringTableLibrary.GetTableEntrySourceString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FName                   TableId                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 Key                            (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringTableLibrary::STATIC_GetTableEntrySourceString(const struct FName& TableId, const struct FString& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringTableLibrary.GetTableEntrySourceString");

        UKismetStringTableLibrary_GetTableEntrySourceString_Params params;
        params.TableId = TableId;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringTableLibrary.GetTableEntryMetaData
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FName                   TableId                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 Key                            (CPF_Parm, CPF_ZeroConstructor)
    // struct FName                   MetaDataId                     (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetStringTableLibrary::STATIC_GetTableEntryMetaData(const struct FName& TableId, const struct FString& Key, const struct FName& MetaDataId)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringTableLibrary.GetTableEntryMetaData");

        UKismetStringTableLibrary_GetTableEntryMetaData_Params params;
        params.TableId = TableId;
        params.Key = Key;
        params.MetaDataId = MetaDataId;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringTableLibrary.GetRegisteredStringTables
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // TArray<struct FName>           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    TArray<struct FName> UKismetStringTableLibrary::STATIC_GetRegisteredStringTables()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringTableLibrary.GetRegisteredStringTables");

        UKismetStringTableLibrary_GetRegisteredStringTables_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringTableLibrary.GetMetaDataIdsFromStringTableEntry
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FName                   TableId                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 Key                            (CPF_Parm, CPF_ZeroConstructor)
    // TArray<struct FName>           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    TArray<struct FName> UKismetStringTableLibrary::STATIC_GetMetaDataIdsFromStringTableEntry(const struct FName& TableId, const struct FString& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringTableLibrary.GetMetaDataIdsFromStringTableEntry");

        UKismetStringTableLibrary_GetMetaDataIdsFromStringTableEntry_Params params;
        params.TableId = TableId;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetStringTableLibrary.GetKeysFromStringTable
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FName                   TableId                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<struct FString>         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    TArray<struct FString> UKismetStringTableLibrary::STATIC_GetKeysFromStringTable(const struct FName& TableId)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringTableLibrary.GetKeysFromStringTable");

        UKismetStringTableLibrary_GetKeysFromStringTable_Params params;
        params.TableId = TableId;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.TextTrimTrailing
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FText                   InText                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_TextTrimTrailing(const struct FText& InText)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.TextTrimTrailing");

        UKismetTextLibrary_TextTrimTrailing_Params params;
        params.InText = InText;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FText                   InText                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_TextTrimPrecedingAndTrailing(const struct FText& InText)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing");

        UKismetTextLibrary_TextTrimPrecedingAndTrailing_Params params;
        params.InText = InText;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.TextTrimPreceding
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FText                   InText                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_TextTrimPreceding(const struct FText& InText)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.TextTrimPreceding");

        UKismetTextLibrary_TextTrimPreceding_Params params;
        params.InText = InText;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.TextToUpper
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FText                   InText                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_TextToUpper(const struct FText& InText)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.TextToUpper");

        UKismetTextLibrary_TextToUpper_Params params;
        params.InText = InText;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.TextToLower
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FText                   InText                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_TextToLower(const struct FText& InText)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.TextToLower");

        UKismetTextLibrary_TextToLower_Params params;
        params.InText = InText;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.TextIsTransient
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FText                   InText                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetTextLibrary::STATIC_TextIsTransient(const struct FText& InText)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.TextIsTransient");

        UKismetTextLibrary_TextIsTransient_Params params;
        params.InText = InText;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.TextIsFromStringTable
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FText                   Text                           (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetTextLibrary::STATIC_TextIsFromStringTable(const struct FText& Text)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.TextIsFromStringTable");

        UKismetTextLibrary_TextIsFromStringTable_Params params;
        params.Text = Text;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.TextIsEmpty
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FText                   InText                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetTextLibrary::STATIC_TextIsEmpty(const struct FText& InText)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.TextIsEmpty");

        UKismetTextLibrary_TextIsEmpty_Params params;
        params.InText = InText;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.TextIsCultureInvariant
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FText                   InText                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetTextLibrary::STATIC_TextIsCultureInvariant(const struct FText& InText)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.TextIsCultureInvariant");

        UKismetTextLibrary_TextIsCultureInvariant_Params params;
        params.InText = InText;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.TextFromStringTable
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FName                   TableId                        (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 Key                            (CPF_Parm, CPF_ZeroConstructor)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_TextFromStringTable(const struct FName& TableId, const struct FString& Key)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.TextFromStringTable");

        UKismetTextLibrary_TextFromStringTable_Params params;
        params.TableId = TableId;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.StringTableIdAndKeyFromText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FText                   Text                           (CPF_Parm)
    // struct FName                   OutTableId                     (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 OutKey                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetTextLibrary::STATIC_StringTableIdAndKeyFromText(const struct FText& Text, struct FName* OutTableId, struct FString* OutKey)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.StringTableIdAndKeyFromText");

        UKismetTextLibrary_StringTableIdAndKeyFromText_Params params;
        params.Text = Text;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutTableId != nullptr)
            *OutTableId = params.OutTableId;
        if (OutKey != nullptr)
            *OutKey = params.OutKey;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.NotEqual_TextText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FText                   A                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FText                   B                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetTextLibrary::STATIC_NotEqual_TextText(const struct FText& A, const struct FText& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.NotEqual_TextText");

        UKismetTextLibrary_NotEqual_TextText_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FText                   A                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FText                   B                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetTextLibrary::STATIC_NotEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText");

        UKismetTextLibrary_NotEqual_IgnoreCase_TextText_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.GetEmptyText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_GetEmptyText()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.GetEmptyText");

        UKismetTextLibrary_GetEmptyText_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.Format
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FText                   InPattern                      (CPF_Parm)
    // TArray<struct FFormatArgumentData> InArgs                         (CPF_Parm, CPF_ZeroConstructor)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_Format(const struct FText& InPattern, TArray<struct FFormatArgumentData> InArgs)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Format");

        UKismetTextLibrary_Format_Params params;
        params.InPattern = InPattern;
        params.InArgs = InArgs;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.FindTextInLocalizationTable
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 Namespace                      (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Key                            (CPF_Parm, CPF_ZeroConstructor)
    // struct FText                   OutText                        (CPF_Parm, CPF_OutParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetTextLibrary::STATIC_FindTextInLocalizationTable(const struct FString& Namespace, const struct FString& Key, struct FText* OutText)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.FindTextInLocalizationTable");

        UKismetTextLibrary_FindTextInLocalizationTable_Params params;
        params.Namespace = Namespace;
        params.Key = Key;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutText != nullptr)
            *OutText = params.OutText;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.EqualEqual_TextText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FText                   A                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FText                   B                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetTextLibrary::STATIC_EqualEqual_TextText(const struct FText& A, const struct FText& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.EqualEqual_TextText");

        UKismetTextLibrary_EqualEqual_TextText_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FText                   A                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FText                   B                              (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UKismetTextLibrary::STATIC_EqualEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText");

        UKismetTextLibrary_EqualEqual_IgnoreCase_TextText_Params params;
        params.A = A;
        params.B = B;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.Conv_VectorToText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector                 InVec                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_Conv_VectorToText(const struct FVector& InVec)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_VectorToText");

        UKismetTextLibrary_Conv_VectorToText_Params params;
        params.InVec = InVec;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.Conv_Vector2dToText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FVector2D               InVec                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_Conv_Vector2dToText(const struct FVector2D& InVec)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_Vector2dToText");

        UKismetTextLibrary_Conv_Vector2dToText_Params params;
        params.InVec = InVec;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.Conv_TransformToText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTransform              InTrans                        (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_Conv_TransformToText(const struct FTransform& InTrans)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_TransformToText");

        UKismetTextLibrary_Conv_TransformToText_Params params;
        params.InTrans = InTrans;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.Conv_TextToString
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FText                   InText                         (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UKismetTextLibrary::STATIC_Conv_TextToString(const struct FText& InText)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_TextToString");

        UKismetTextLibrary_Conv_TextToString_Params params;
        params.InText = InText;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.Conv_StringToText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FString                 inString                       (CPF_Parm, CPF_ZeroConstructor)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_Conv_StringToText(const struct FString& inString)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_StringToText");

        UKismetTextLibrary_Conv_StringToText_Params params;
        params.inString = inString;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.Conv_RotatorToText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FRotator                InRot                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_Conv_RotatorToText(const struct FRotator& InRot)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_RotatorToText");

        UKismetTextLibrary_Conv_RotatorToText_Params params;
        params.InRot = InRot;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.Conv_ObjectToText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class UObject*                 InObj                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_Conv_ObjectToText(class UObject* InObj)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_ObjectToText");

        UKismetTextLibrary_Conv_ObjectToText_Params params;
        params.InObj = InObj;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.Conv_NameToText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FName                   InName                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_Conv_NameToText(const struct FName& InName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_NameToText");

        UKismetTextLibrary_Conv_NameToText_Params params;
        params.InName = InName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.Conv_IntToText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseGrouping                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MinimumIntegralDigits          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MaximumIntegralDigits          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_Conv_IntToText(int Value, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_IntToText");

        UKismetTextLibrary_Conv_IntToText_Params params;
        params.Value = Value;
        params.bUseGrouping = bUseGrouping;
        params.MinimumIntegralDigits = MinimumIntegralDigits;
        params.MaximumIntegralDigits = MaximumIntegralDigits;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.Conv_FloatToText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ERoundingMode>     RoundingMode                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseGrouping                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MinimumIntegralDigits          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MaximumIntegralDigits          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MinimumFractionalDigits        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MaximumFractionalDigits        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_Conv_FloatToText(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_FloatToText");

        UKismetTextLibrary_Conv_FloatToText_Params params;
        params.Value = Value;
        params.RoundingMode = RoundingMode;
        params.bUseGrouping = bUseGrouping;
        params.MinimumIntegralDigits = MinimumIntegralDigits;
        params.MaximumIntegralDigits = MaximumIntegralDigits;
        params.MinimumFractionalDigits = MinimumFractionalDigits;
        params.MaximumFractionalDigits = MaximumFractionalDigits;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.Conv_ColorToText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FLinearColor            InColor                        (CPF_Parm, CPF_IsPlainOldData)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_Conv_ColorToText(const struct FLinearColor& InColor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_ColorToText");

        UKismetTextLibrary_Conv_ColorToText_Params params;
        params.InColor = InColor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.Conv_ByteToText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // unsigned char                  Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_Conv_ByteToText(unsigned char Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_ByteToText");

        UKismetTextLibrary_Conv_ByteToText_Params params;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.Conv_BoolToText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // bool                           InBool                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_Conv_BoolToText(bool InBool)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_BoolToText");

        UKismetTextLibrary_Conv_BoolToText_Params params;
        params.InBool = InBool;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.AsTimeZoneTime_DateTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               InDateTime                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FString                 InTimeZone                     (CPF_Parm, CPF_ZeroConstructor)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_AsTimeZoneTime_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.AsTimeZoneTime_DateTime");

        UKismetTextLibrary_AsTimeZoneTime_DateTime_Params params;
        params.InDateTime = InDateTime;
        params.InTimeZone = InTimeZone;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.AsTimeZoneDateTime_DateTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               InDateTime                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FString                 InTimeZone                     (CPF_Parm, CPF_ZeroConstructor)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_AsTimeZoneDateTime_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.AsTimeZoneDateTime_DateTime");

        UKismetTextLibrary_AsTimeZoneDateTime_DateTime_Params params;
        params.InDateTime = InDateTime;
        params.InTimeZone = InTimeZone;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.AsTimeZoneDate_DateTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               InDateTime                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FString                 InTimeZone                     (CPF_Parm, CPF_ZeroConstructor)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_AsTimeZoneDate_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.AsTimeZoneDate_DateTime");

        UKismetTextLibrary_AsTimeZoneDate_DateTime_Params params;
        params.InDateTime = InDateTime;
        params.InTimeZone = InTimeZone;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.AsTimespan_Timespan
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FTimespan               InTimespan                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_AsTimespan_Timespan(const struct FTimespan& InTimespan)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.AsTimespan_Timespan");

        UKismetTextLibrary_AsTimespan_Timespan_Params params;
        params.InTimespan = InTimespan;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.AsTime_DateTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               In                             (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_AsTime_DateTime(const struct FDateTime& In)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.AsTime_DateTime");

        UKismetTextLibrary_AsTime_DateTime_Params params;
        params.In = In;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.AsPercent_Float
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ERoundingMode>     RoundingMode                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseGrouping                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MinimumIntegralDigits          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MaximumIntegralDigits          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MinimumFractionalDigits        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MaximumFractionalDigits        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_AsPercent_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.AsPercent_Float");

        UKismetTextLibrary_AsPercent_Float_Params params;
        params.Value = Value;
        params.RoundingMode = RoundingMode;
        params.bUseGrouping = bUseGrouping;
        params.MinimumIntegralDigits = MinimumIntegralDigits;
        params.MaximumIntegralDigits = MaximumIntegralDigits;
        params.MinimumFractionalDigits = MinimumFractionalDigits;
        params.MaximumFractionalDigits = MaximumFractionalDigits;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.AsDateTime_DateTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               In                             (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_AsDateTime_DateTime(const struct FDateTime& In)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.AsDateTime_DateTime");

        UKismetTextLibrary_AsDateTime_DateTime_Params params;
        params.In = In;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.AsDate_DateTime
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // struct FDateTime               InDateTime                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_AsDate_DateTime(const struct FDateTime& InDateTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.AsDate_DateTime");

        UKismetTextLibrary_AsDate_DateTime_Params params;
        params.InDateTime = InDateTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.AsCurrencyBase
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            BaseValue                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 CurrencyCode                   (CPF_Parm, CPF_ZeroConstructor)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_AsCurrencyBase(int BaseValue, const struct FString& CurrencyCode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.AsCurrencyBase");

        UKismetTextLibrary_AsCurrencyBase_Params params;
        params.BaseValue = BaseValue;
        params.CurrencyCode = CurrencyCode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.AsCurrency_Integer
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ERoundingMode>     RoundingMode                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseGrouping                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MinimumIntegralDigits          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MaximumIntegralDigits          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MinimumFractionalDigits        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MaximumFractionalDigits        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 CurrencyCode                   (CPF_Parm, CPF_ZeroConstructor)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_AsCurrency_Integer(int Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.AsCurrency_Integer");

        UKismetTextLibrary_AsCurrency_Integer_Params params;
        params.Value = Value;
        params.RoundingMode = RoundingMode;
        params.bUseGrouping = bUseGrouping;
        params.MinimumIntegralDigits = MinimumIntegralDigits;
        params.MaximumIntegralDigits = MaximumIntegralDigits;
        params.MinimumFractionalDigits = MinimumFractionalDigits;
        params.MaximumFractionalDigits = MaximumFractionalDigits;
        params.CurrencyCode = CurrencyCode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.KismetTextLibrary.AsCurrency_Float
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TEnumAsByte<ERoundingMode>     RoundingMode                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bUseGrouping                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MinimumIntegralDigits          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MaximumIntegralDigits          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MinimumFractionalDigits        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            MaximumFractionalDigits        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 CurrencyCode                   (CPF_Parm, CPF_ZeroConstructor)
    // struct FText                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

    struct FText UKismetTextLibrary::STATIC_AsCurrency_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.AsCurrency_Float");

        UKismetTextLibrary_AsCurrency_Float_Params params;
        params.Value = Value;
        params.RoundingMode = RoundingMode;
        params.bUseGrouping = bUseGrouping;
        params.MinimumIntegralDigits = MinimumIntegralDigits;
        params.MaximumIntegralDigits = MaximumIntegralDigits;
        params.MinimumFractionalDigits = MinimumFractionalDigits;
        params.MaximumFractionalDigits = MaximumFractionalDigits;
        params.CurrencyCode = CurrencyCode;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UStaticMeshComponent*    StaticMeshComponent            (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

    void UMeshVertexPainterKismetLibrary::STATIC_RemovePaintedVertices(class UStaticMeshComponent* StaticMeshComponent)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices");

        UMeshVertexPainterKismetLibrary_RemovePaintedVertices_Params params;
        params.StaticMeshComponent = StaticMeshComponent;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesSingleColor
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UStaticMeshComponent*    StaticMeshComponent            (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FLinearColor            FillColor                      (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bConvertToSRGB                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UMeshVertexPainterKismetLibrary::STATIC_PaintVerticesSingleColor(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& FillColor, bool bConvertToSRGB)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesSingleColor");

        UMeshVertexPainterKismetLibrary_PaintVerticesSingleColor_Params params;
        params.StaticMeshComponent = StaticMeshComponent;
        params.FillColor = FillColor;
        params.bConvertToSRGB = bConvertToSRGB;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesLerpAlongAxis
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UStaticMeshComponent*    StaticMeshComponent            (CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FLinearColor            StartColor                     (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FLinearColor            EndColor                       (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // EVertexPaintAxis               Axis                           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bConvertToSRGB                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UMeshVertexPainterKismetLibrary::STATIC_PaintVerticesLerpAlongAxis(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& StartColor, const struct FLinearColor& EndColor, EVertexPaintAxis Axis, bool bConvertToSRGB)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesLerpAlongAxis");

        UMeshVertexPainterKismetLibrary_PaintVerticesLerpAlongAxis_Params params;
        params.StaticMeshComponent = StaticMeshComponent;
        params.StartColor = StartColor;
        params.EndColor = EndColor;
        params.Axis = Axis;
        params.bConvertToSRGB = bConvertToSRGB;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.StereoLayerFunctionLibrary.ShowSplashScreen
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)

    void UStereoLayerFunctionLibrary::STATIC_ShowSplashScreen()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerFunctionLibrary.ShowSplashScreen");

        UStereoLayerFunctionLibrary_ShowSplashScreen_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.StereoLayerFunctionLibrary.SetSplashScreen
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UTexture*                Texture                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               Scale                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               Offset                         (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bShowLoadingMovie              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bShowOnSet                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UStereoLayerFunctionLibrary::STATIC_SetSplashScreen(class UTexture* Texture, const struct FVector2D& Scale, const struct FVector2D& Offset, bool bShowLoadingMovie, bool bShowOnSet)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerFunctionLibrary.SetSplashScreen");

        UStereoLayerFunctionLibrary_SetSplashScreen_Params params;
        params.Texture = Texture;
        params.Scale = Scale;
        params.Offset = Offset;
        params.bShowLoadingMovie = bShowLoadingMovie;
        params.bShowOnSet = bShowOnSet;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.StereoLayerFunctionLibrary.HideSplashScreen
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)

    void UStereoLayerFunctionLibrary::STATIC_HideSplashScreen()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerFunctionLibrary.HideSplashScreen");

        UStereoLayerFunctionLibrary_HideSplashScreen_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.StereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           InAutoShowEnabled              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UStereoLayerFunctionLibrary::STATIC_EnableAutoLoadingSplashScreen(bool InAutoShowEnabled)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen");

        UStereoLayerFunctionLibrary_EnableAutoLoadingSplashScreen_Params params;
        params.InAutoShowEnabled = InAutoShowEnabled;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.VisualLoggerKismetLibrary.LogText
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 Text                           (CPF_Parm, CPF_ZeroConstructor)
    // struct FName                   LogCategory                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UVisualLoggerKismetLibrary::STATIC_LogText(class UObject* WorldContextObject, const struct FString& Text, const struct FName& LogCategory)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.VisualLoggerKismetLibrary.LogText");

        UVisualLoggerKismetLibrary_LogText_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Text = Text;
        params.LogCategory = LogCategory;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.VisualLoggerKismetLibrary.LogLocation
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 Location                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FString                 Text                           (CPF_Parm, CPF_ZeroConstructor)
    // struct FLinearColor            ObjectColor                    (CPF_Parm, CPF_IsPlainOldData)
    // float                          Radius                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FName                   LogCategory                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UVisualLoggerKismetLibrary::STATIC_LogLocation(class UObject* WorldContextObject, const struct FVector& Location, const struct FString& Text, const struct FLinearColor& ObjectColor, float Radius, const struct FName& LogCategory)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.VisualLoggerKismetLibrary.LogLocation");

        UVisualLoggerKismetLibrary_LogLocation_Params params;
        params.WorldContextObject = WorldContextObject;
        params.Location = Location;
        params.Text = Text;
        params.ObjectColor = ObjectColor;
        params.Radius = Radius;
        params.LogCategory = LogCategory;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.VisualLoggerKismetLibrary.LogBox
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FBox                    BoxShape                       (CPF_Parm, CPF_IsPlainOldData)
    // struct FString                 Text                           (CPF_Parm, CPF_ZeroConstructor)
    // struct FLinearColor            ObjectColor                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FName                   LogCategory                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UVisualLoggerKismetLibrary::STATIC_LogBox(class UObject* WorldContextObject, const struct FBox& BoxShape, const struct FString& Text, const struct FLinearColor& ObjectColor, const struct FName& LogCategory)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.VisualLoggerKismetLibrary.LogBox");

        UVisualLoggerKismetLibrary_LogBox_Params params;
        params.WorldContextObject = WorldContextObject;
        params.BoxShape = BoxShape;
        params.Text = Text;
        params.ObjectColor = ObjectColor;
        params.LogCategory = LogCategory;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraAnimInst.Stop
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bImmediate                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCameraAnimInst::Stop(bool bImmediate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.Stop");

        UCameraAnimInst_Stop_Params params;
        params.bImmediate = bImmediate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraAnimInst.SetScale
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewDuration                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCameraAnimInst::SetScale(float NewDuration)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.SetScale");

        UCameraAnimInst_SetScale_Params params;
        params.NewDuration = NewDuration;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraAnimInst.SetDuration
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // float                          NewDuration                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCameraAnimInst::SetDuration(float NewDuration)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.SetDuration");

        UCameraAnimInst_SetDuration_Params params;
        params.NewDuration = NewDuration;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraModifier.IsDisabled
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UCameraModifier::IsDisabled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.IsDisabled");

        UCameraModifier_IsDisabled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CameraModifier.GetViewTarget
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class AActor* UCameraModifier::GetViewTarget()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.GetViewTarget");

        UCameraModifier_GetViewTarget_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CameraModifier.EnableModifier
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UCameraModifier::EnableModifier()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.EnableModifier");

        UCameraModifier_EnableModifier_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraModifier.DisableModifier
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bImmediate                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCameraModifier::DisableModifier(bool bImmediate)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.DisableModifier");

        UCameraModifier_DisableModifier_Params params;
        params.bImmediate = bImmediate;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CameraModifier.BlueprintModifyPostProcess
    // (FUNC_BlueprintCosmetic, FUNC_Event, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintEvent)
    // Parameters:
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          PostProcessBlendWeight         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FPostProcessSettings    PostProcessSettings            (CPF_Parm, CPF_OutParm)

    void UCameraModifier::BlueprintModifyPostProcess(float DeltaTime, float* PostProcessBlendWeight, struct FPostProcessSettings* PostProcessSettings)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.BlueprintModifyPostProcess");

        UCameraModifier_BlueprintModifyPostProcess_Params params;
        params.DeltaTime = DeltaTime;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (PostProcessBlendWeight != nullptr)
            *PostProcessBlendWeight = params.PostProcessBlendWeight;
        if (PostProcessSettings != nullptr)
            *PostProcessSettings = params.PostProcessSettings;
    }


    // Function Engine.CameraModifier.BlueprintModifyCamera
    // (FUNC_BlueprintCosmetic, FUNC_Event, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintEvent)
    // Parameters:
    // float                          DeltaTime                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ViewLocation                   (CPF_Parm, CPF_IsPlainOldData)
    // struct FRotator                ViewRotation                   (CPF_Parm, CPF_IsPlainOldData)
    // float                          FOV                            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 NewViewLocation                (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FRotator                NewViewRotation                (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // float                          NewFOV                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCameraModifier::BlueprintModifyCamera(float DeltaTime, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float FOV, struct FVector* NewViewLocation, struct FRotator* NewViewRotation, float* NewFOV)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.BlueprintModifyCamera");

        UCameraModifier_BlueprintModifyCamera_Params params;
        params.DeltaTime = DeltaTime;
        params.ViewLocation = ViewLocation;
        params.ViewRotation = ViewRotation;
        params.FOV = FOV;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (NewViewLocation != nullptr)
            *NewViewLocation = params.NewViewLocation;
        if (NewViewRotation != nullptr)
            *NewViewRotation = params.NewViewRotation;
        if (NewFOV != nullptr)
            *NewFOV = params.NewFOV;
    }


    // Function Engine.Canvas.K2_TextSize
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UFont*                   RenderFont                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 RenderText                     (CPF_Parm, CPF_ZeroConstructor)
    // struct FVector2D               Scale                          (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UCanvas::K2_TextSize(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& Scale)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_TextSize");

        UCanvas_K2_TextSize_Params params;
        params.RenderFont = RenderFont;
        params.RenderText = RenderText;
        params.Scale = Scale;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Canvas.K2_StrLen
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UFont*                   RenderFont                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 RenderText                     (CPF_Parm, CPF_ZeroConstructor)
    // struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector2D UCanvas::K2_StrLen(class UFont* RenderFont, const struct FString& RenderText)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_StrLen");

        UCanvas_K2_StrLen_Params params;
        params.RenderFont = RenderFont;
        params.RenderText = RenderText;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Canvas.K2_Project
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector                 WorldLocation                  (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UCanvas::K2_Project(const struct FVector& WorldLocation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_Project");

        UCanvas_K2_Project_Params params;
        params.WorldLocation = WorldLocation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Canvas.K2_DrawTriangle
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UTexture*                RenderTexture                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<struct FCanvasUVTri>    Triangles                      (CPF_Parm, CPF_ZeroConstructor)

    void UCanvas::K2_DrawTriangle(class UTexture* RenderTexture, TArray<struct FCanvasUVTri> Triangles)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawTriangle");

        UCanvas_K2_DrawTriangle_Params params;
        params.RenderTexture = RenderTexture;
        params.Triangles = Triangles;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Canvas.K2_DrawTexture
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UTexture*                RenderTexture                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               ScreenPosition                 (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               ScreenSize                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               CoordinatePosition             (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               CoordinateSize                 (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            RenderColor                    (CPF_Parm, CPF_IsPlainOldData)
    // TEnumAsByte<EBlendMode>        BlendMode                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Rotation                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               PivotPoint                     (CPF_Parm, CPF_IsPlainOldData)

    void UCanvas::K2_DrawTexture(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, TEnumAsByte<EBlendMode> BlendMode, float Rotation, const struct FVector2D& PivotPoint)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawTexture");

        UCanvas_K2_DrawTexture_Params params;
        params.RenderTexture = RenderTexture;
        params.ScreenPosition = ScreenPosition;
        params.ScreenSize = ScreenSize;
        params.CoordinatePosition = CoordinatePosition;
        params.CoordinateSize = CoordinateSize;
        params.RenderColor = RenderColor;
        params.BlendMode = BlendMode;
        params.Rotation = Rotation;
        params.PivotPoint = PivotPoint;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Canvas.K2_DrawText
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UFont*                   RenderFont                     (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 RenderText                     (CPF_Parm, CPF_ZeroConstructor)
    // struct FVector2D               ScreenPosition                 (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            RenderColor                    (CPF_Parm, CPF_IsPlainOldData)
    // float                          Kerning                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            ShadowColor                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               ShadowOffset                   (CPF_Parm, CPF_IsPlainOldData)
    // bool                           bCentreX                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bCentreY                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           bOutlined                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            OutlineColor                   (CPF_Parm, CPF_IsPlainOldData)

    void UCanvas::K2_DrawText(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& ScreenPosition, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawText");

        UCanvas_K2_DrawText_Params params;
        params.RenderFont = RenderFont;
        params.RenderText = RenderText;
        params.ScreenPosition = ScreenPosition;
        params.RenderColor = RenderColor;
        params.Kerning = Kerning;
        params.ShadowColor = ShadowColor;
        params.ShadowOffset = ShadowOffset;
        params.bCentreX = bCentreX;
        params.bCentreY = bCentreY;
        params.bOutlined = bOutlined;
        params.OutlineColor = OutlineColor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Canvas.K2_DrawPolygon
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UTexture*                RenderTexture                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               ScreenPosition                 (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               Radius                         (CPF_Parm, CPF_IsPlainOldData)
    // int                            NumberOfSides                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            RenderColor                    (CPF_Parm, CPF_IsPlainOldData)

    void UCanvas::K2_DrawPolygon(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& Radius, int NumberOfSides, const struct FLinearColor& RenderColor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawPolygon");

        UCanvas_K2_DrawPolygon_Params params;
        params.RenderTexture = RenderTexture;
        params.ScreenPosition = ScreenPosition;
        params.Radius = Radius;
        params.NumberOfSides = NumberOfSides;
        params.RenderColor = RenderColor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Canvas.K2_DrawMaterialTriangle
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterialInterface*      RenderMaterial                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // TArray<struct FCanvasUVTri>    Triangles                      (CPF_Parm, CPF_ZeroConstructor)

    void UCanvas::K2_DrawMaterialTriangle(class UMaterialInterface* RenderMaterial, TArray<struct FCanvasUVTri> Triangles)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawMaterialTriangle");

        UCanvas_K2_DrawMaterialTriangle_Params params;
        params.RenderMaterial = RenderMaterial;
        params.Triangles = Triangles;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Canvas.K2_DrawMaterial
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterialInterface*      RenderMaterial                 (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               ScreenPosition                 (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               ScreenSize                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               CoordinatePosition             (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               CoordinateSize                 (CPF_Parm, CPF_IsPlainOldData)
    // float                          Rotation                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               PivotPoint                     (CPF_Parm, CPF_IsPlainOldData)

    void UCanvas::K2_DrawMaterial(class UMaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float Rotation, const struct FVector2D& PivotPoint)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawMaterial");

        UCanvas_K2_DrawMaterial_Params params;
        params.RenderMaterial = RenderMaterial;
        params.ScreenPosition = ScreenPosition;
        params.ScreenSize = ScreenSize;
        params.CoordinatePosition = CoordinatePosition;
        params.CoordinateSize = CoordinateSize;
        params.Rotation = Rotation;
        params.PivotPoint = PivotPoint;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Canvas.K2_DrawLine
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector2D               ScreenPositionA                (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               ScreenPositionB                (CPF_Parm, CPF_IsPlainOldData)
    // float                          Thickness                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            RenderColor                    (CPF_Parm, CPF_IsPlainOldData)

    void UCanvas::K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawLine");

        UCanvas_K2_DrawLine_Params params;
        params.ScreenPositionA = ScreenPositionA;
        params.ScreenPositionB = ScreenPositionB;
        params.Thickness = Thickness;
        params.RenderColor = RenderColor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Canvas.K2_DrawBox
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector2D               ScreenPosition                 (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               ScreenSize                     (CPF_Parm, CPF_IsPlainOldData)
    // float                          Thickness                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCanvas::K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawBox");

        UCanvas_K2_DrawBox_Params params;
        params.ScreenPosition = ScreenPosition;
        params.ScreenSize = ScreenSize;
        params.Thickness = Thickness;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Canvas.K2_DrawBorder
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UTexture*                BorderTexture                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UTexture*                BackgroundTexture              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UTexture*                LeftBorderTexture              (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UTexture*                RightBorderTexture             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UTexture*                TopBorderTexture               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UTexture*                BottomBorderTexture            (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               ScreenPosition                 (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               ScreenSize                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               CoordinatePosition             (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               CoordinateSize                 (CPF_Parm, CPF_IsPlainOldData)
    // struct FLinearColor            RenderColor                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               BorderScale                    (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               BackgroundScale                (CPF_Parm, CPF_IsPlainOldData)
    // float                          Rotation                       (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector2D               PivotPoint                     (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector2D               CornerSize                     (CPF_Parm, CPF_IsPlainOldData)

    void UCanvas::K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float Rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawBorder");

        UCanvas_K2_DrawBorder_Params params;
        params.BorderTexture = BorderTexture;
        params.BackgroundTexture = BackgroundTexture;
        params.LeftBorderTexture = LeftBorderTexture;
        params.RightBorderTexture = RightBorderTexture;
        params.TopBorderTexture = TopBorderTexture;
        params.BottomBorderTexture = BottomBorderTexture;
        params.ScreenPosition = ScreenPosition;
        params.ScreenSize = ScreenSize;
        params.CoordinatePosition = CoordinatePosition;
        params.CoordinateSize = CoordinateSize;
        params.RenderColor = RenderColor;
        params.BorderScale = BorderScale;
        params.BackgroundScale = BackgroundScale;
        params.Rotation = Rotation;
        params.PivotPoint = PivotPoint;
        params.CornerSize = CornerSize;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.Canvas.K2_Deproject
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FVector2D               ScreenPosition                 (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 WorldOrigin                    (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)
    // struct FVector                 WorldDirection                 (CPF_Parm, CPF_OutParm, CPF_IsPlainOldData)

    void UCanvas::K2_Deproject(const struct FVector2D& ScreenPosition, struct FVector* WorldOrigin, struct FVector* WorldDirection)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_Deproject");

        UCanvas_K2_Deproject_Params params;
        params.ScreenPosition = ScreenPosition;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (WorldOrigin != nullptr)
            *WorldOrigin = params.WorldOrigin;
        if (WorldDirection != nullptr)
            *WorldDirection = params.WorldDirection;
    }


    // Function Engine.CurveLinearColor.GetLinearColorValue
    // (FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          InTime                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FLinearColor UCurveLinearColor::GetLinearColorValue(float InTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveLinearColor.GetLinearColorValue");

        UCurveLinearColor_GetLinearColorValue_Params params;
        params.InTime = InTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CurveVector.GetVectorValue
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          InTime                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector UCurveVector::GetVectorValue(float InTime)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveVector.GetVectorValue");

        UCurveVector_GetVectorValue_Params params;
        params.InTime = InTime;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CurveSourceInterface.GetCurveValue
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent, FUNC_Const)
    // Parameters:
    // struct FName                   CurveName                      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UCurveSourceInterface::GetCurveValue(const struct FName& CurveName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveSourceInterface.GetCurveValue");

        UCurveSourceInterface_GetCurveValue_Params params;
        params.CurveName = CurveName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CurveSourceInterface.GetCurves
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintEvent, FUNC_Const)
    // Parameters:
    // TArray<struct FNamedCurveValue> OutValues                      (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)

    void UCurveSourceInterface::GetCurves(TArray<struct FNamedCurveValue>* OutValues)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveSourceInterface.GetCurves");

        UCurveSourceInterface_GetCurves_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (OutValues != nullptr)
            *OutValues = params.OutValues;
    }


    // Function Engine.CurveSourceInterface.GetBindingName
    // (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_BlueprintEvent, FUNC_Const)
    // Parameters:
    // struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FName UCurveSourceInterface::GetBindingName()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveSourceInterface.GetBindingName");

        UCurveSourceInterface_GetBindingName_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.LevelStreaming.IsStreamingStatePending
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool ULevelStreaming::IsStreamingStatePending()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.IsStreamingStatePending");

        ULevelStreaming_IsStreamingStatePending_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.LevelStreaming.IsLevelVisible
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool ULevelStreaming::IsLevelVisible()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.IsLevelVisible");

        ULevelStreaming_IsLevelVisible_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.LevelStreaming.IsLevelLoaded
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool ULevelStreaming::IsLevelLoaded()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.IsLevelLoaded");

        ULevelStreaming_IsLevelLoaded_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.LevelStreaming.GetLevelScriptActor
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // class ALevelScriptActor*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class ALevelScriptActor* ULevelStreaming::GetLevelScriptActor()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.GetLevelScriptActor");

        ULevelStreaming_GetLevelScriptActor_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.LevelStreaming.CreateInstance
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FString                 UniqueInstanceName             (CPF_Parm, CPF_ZeroConstructor)
    // class ULevelStreaming*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class ULevelStreaming* ULevelStreaming::CreateInstance(const struct FString& UniqueInstanceName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.CreateInstance");

        ULevelStreaming_CreateInstance_Params params;
        params.UniqueInstanceName = UniqueInstanceName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.LevelStreamingKismet.LoadLevelInstance
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 LevelName                      (CPF_Parm, CPF_ZeroConstructor)
    // struct FVector                 Location                       (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // struct FRotator                Rotation                       (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ReferenceParm, CPF_IsPlainOldData)
    // bool                           bOutSuccess                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class ULevelStreamingKismet*   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class ULevelStreamingKismet* ULevelStreamingKismet::STATIC_LoadLevelInstance(class UObject* WorldContextObject, const struct FString& LevelName, const struct FVector& Location, const struct FRotator& Rotation, bool* bOutSuccess)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreamingKismet.LoadLevelInstance");

        ULevelStreamingKismet_LoadLevelInstance_Params params;
        params.WorldContextObject = WorldContextObject;
        params.LevelName = LevelName;
        params.Location = Location;
        params.Rotation = Rotation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (bOutSuccess != nullptr)
            *bOutSuccess = params.bOutSuccess;

        return params.ReturnValue;
    }


    // Function Engine.MaterialInstanceDynamic.SetVectorParameterValue
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            Value                          (CPF_Parm, CPF_IsPlainOldData)

    void UMaterialInstanceDynamic::SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.SetVectorParameterValue");

        UMaterialInstanceDynamic_SetVectorParameterValue_Params params;
        params.ParameterName = ParameterName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MaterialInstanceDynamic.SetTextureParameterValue
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UTexture*                Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UMaterialInstanceDynamic::SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.SetTextureParameterValue");

        UMaterialInstanceDynamic_SetTextureParameterValue_Params params;
        params.ParameterName = ParameterName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MaterialInstanceDynamic.SetScalarParameterValue
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Value                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UMaterialInstanceDynamic::SetScalarParameterValue(const struct FName& ParameterName, float Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.SetScalarParameterValue");

        UMaterialInstanceDynamic_SetScalarParameterValue_Params params;
        params.ParameterName = ParameterName;
        params.Value = Value;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterialInstance*       SourceA                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UMaterialInstance*       SourceB                        (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          Alpha                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UMaterialInstanceDynamic::K2_InterpolateMaterialInstanceParams(class UMaterialInstance* SourceA, class UMaterialInstance* SourceB, float Alpha)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams");

        UMaterialInstanceDynamic_K2_InterpolateMaterialInstanceParams_Params params;
        params.SourceA = SourceA;
        params.SourceB = SourceB;
        params.Alpha = Alpha;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FLinearColor UMaterialInstanceDynamic::K2_GetVectorParameterValue(const struct FName& ParameterName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue");

        UMaterialInstanceDynamic_K2_GetVectorParameterValue_Params params;
        params.ParameterName = ParameterName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UTexture*                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UTexture* UMaterialInstanceDynamic::K2_GetTextureParameterValue(const struct FName& ParameterName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue");

        UMaterialInstanceDynamic_K2_GetTextureParameterValue_Params params;
        params.ParameterName = ParameterName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // struct FName                   ParameterName                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UMaterialInstanceDynamic::K2_GetScalarParameterValue(const struct FName& ParameterName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue");

        UMaterialInstanceDynamic_K2_GetScalarParameterValue_Params params;
        params.ParameterName = ParameterName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterialInterface*      Source                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UMaterialInstanceDynamic::K2_CopyMaterialInstanceParameters(class UMaterialInterface* Source)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters");

        UMaterialInstanceDynamic_K2_CopyMaterialInstanceParameters_Params params;
        params.Source = Source;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MaterialInstanceDynamic.CopyParameterOverrides
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UMaterialInstance*       MaterialInstance               (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UMaterialInstanceDynamic::CopyParameterOverrides(class UMaterialInstance* MaterialInstance)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.CopyParameterOverrides");

        UMaterialInstanceDynamic_CopyParameterOverrides_Params params;
        params.MaterialInstance = MaterialInstance;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.MaterialInstanceDynamic.CopyInterpParameters
    // (FUNC_Final, FUNC_Native, FUNC_Public)
    // Parameters:
    // class UMaterialInstance*       Source                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UMaterialInstanceDynamic::CopyInterpParameters(class UMaterialInstance* Source)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.CopyInterpParameters");

        UMaterialInstanceDynamic_CopyInterpParameters_Params params;
        params.Source = Source;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.NavigationPath.IsValid
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UNavigationPath::IsValid()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPath.IsValid");

        UNavigationPath_IsValid_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavigationPath.IsStringPulled
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UNavigationPath::IsStringPulled()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPath.IsStringPulled");

        UNavigationPath_IsStringPulled_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavigationPath.IsPartial
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UNavigationPath::IsPartial()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPath.IsPartial");

        UNavigationPath_IsPartial_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavigationPath.GetPathLength
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UNavigationPath::GetPathLength()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPath.GetPathLength");

        UNavigationPath_GetPathLength_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavigationPath.GetPathCost
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    float UNavigationPath::GetPathCost()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPath.GetPathCost");

        UNavigationPath_GetPathCost_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavigationPath.GetDebugString
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UNavigationPath::GetDebugString()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPath.GetDebugString");

        UNavigationPath_GetDebugString_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.NavigationPath.EnableRecalculationOnInvalidation
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // TEnumAsByte<ENavigationOptionFlag> DoRecalculation                (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UNavigationPath::EnableRecalculationOnInvalidation(TEnumAsByte<ENavigationOptionFlag> DoRecalculation)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPath.EnableRecalculationOnInvalidation");

        UNavigationPath_EnableRecalculationOnInvalidation_Params params;
        params.DoRecalculation = DoRecalculation;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.NavigationPath.EnableDebugDrawing
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // bool                           bShouldDrawDebugData           (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FLinearColor            PathColor                      (CPF_Parm, CPF_IsPlainOldData)

    void UNavigationPath::EnableDebugDrawing(bool bShouldDrawDebugData, const struct FLinearColor& PathColor)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPath.EnableDebugDrawing");

        UNavigationPath_EnableDebugDrawing_Params params;
        params.bShouldDrawDebugData = bShouldDrawDebugData;
        params.PathColor = PathColor;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TwitterIntegrationBase.TwitterRequest
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
    // Parameters:
    // struct FString                 URL                            (CPF_Parm, CPF_ZeroConstructor)
    // TArray<struct FString>         ParamKeysAndValues             (CPF_ConstParm, CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReferenceParm)
    // TEnumAsByte<ETwitterRequestMethod> RequestMethod                  (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            AccountIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UTwitterIntegrationBase::TwitterRequest(const struct FString& URL, TArray<struct FString> ParamKeysAndValues, TEnumAsByte<ETwitterRequestMethod> RequestMethod, int AccountIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.TwitterRequest");

        UTwitterIntegrationBase_TwitterRequest_Params params;
        params.URL = URL;
        params.ParamKeysAndValues = ParamKeysAndValues;
        params.RequestMethod = RequestMethod;
        params.AccountIndex = AccountIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.TwitterIntegrationBase.ShowTweetUI
    // (FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FString                 InitialMessage                 (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 URL                            (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 Picture                        (CPF_Parm, CPF_ZeroConstructor)
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UTwitterIntegrationBase::ShowTweetUI(const struct FString& InitialMessage, const struct FString& URL, const struct FString& Picture)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.ShowTweetUI");

        UTwitterIntegrationBase_ShowTweetUI_Params params;
        params.InitialMessage = InitialMessage;
        params.URL = URL;
        params.Picture = Picture;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.TwitterIntegrationBase.Init
    // (FUNC_Native, FUNC_Public)

    void UTwitterIntegrationBase::Init()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.Init");

        UTwitterIntegrationBase_Init_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.TwitterIntegrationBase.GetNumAccounts
    // (FUNC_Native, FUNC_Public)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UTwitterIntegrationBase::GetNumAccounts()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.GetNumAccounts");

        UTwitterIntegrationBase_GetNumAccounts_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.TwitterIntegrationBase.GetAccountName
    // (FUNC_Native, FUNC_Public)
    // Parameters:
    // int                            AccountIndex                   (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UTwitterIntegrationBase::GetAccountName(int AccountIndex)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.GetAccountName");

        UTwitterIntegrationBase_GetAccountName_Params params;
        params.AccountIndex = AccountIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.TwitterIntegrationBase.CanShowTweetUI
    // (FUNC_Native, FUNC_Public)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UTwitterIntegrationBase::CanShowTweetUI()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.CanShowTweetUI");

        UTwitterIntegrationBase_CanShowTweetUI_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.TwitterIntegrationBase.AuthorizeAccounts
    // (FUNC_Native, FUNC_Public)
    // Parameters:
    // bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    bool UTwitterIntegrationBase::AuthorizeAccounts()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.AuthorizeAccounts");

        UTwitterIntegrationBase_AuthorizeAccounts_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlatformInterfaceWebResponse.GetNumHeaders
    // (FUNC_Native, FUNC_Public)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UPlatformInterfaceWebResponse::GetNumHeaders()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceWebResponse.GetNumHeaders");

        UPlatformInterfaceWebResponse_GetNumHeaders_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlatformInterfaceWebResponse.GetHeaderValue
    // (FUNC_Native, FUNC_Public)
    // Parameters:
    // struct FString                 HeaderName                     (CPF_Parm, CPF_ZeroConstructor)
    // struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm)

    struct FString UPlatformInterfaceWebResponse::GetHeaderValue(const struct FString& HeaderName)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceWebResponse.GetHeaderValue");

        UPlatformInterfaceWebResponse_GetHeaderValue_Params params;
        params.HeaderName = HeaderName;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.PlatformInterfaceWebResponse.GetHeader
    // (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
    // Parameters:
    // int                            HeaderIndex                    (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // struct FString                 Header                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)
    // struct FString                 Value                          (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor)

    void UPlatformInterfaceWebResponse::GetHeader(int HeaderIndex, struct FString* Header, struct FString* Value)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceWebResponse.GetHeader");

        UPlatformInterfaceWebResponse_GetHeader_Params params;
        params.HeaderIndex = HeaderIndex;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Header != nullptr)
            *Header = params.Header;
        if (Value != nullptr)
            *Value = params.Value;
    }


    // Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable)
    // Parameters:
    // class USkeletalMeshComponent*  SkelComp                       (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FVector                 WorldLocation                  (CPF_Parm, CPF_IsPlainOldData)
    // struct FVector                 WorldNormal                    (CPF_Parm, CPF_IsPlainOldData)

    void USkeletalMeshSocket::InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, const struct FVector& WorldLocation, const struct FVector& WorldNormal)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation");

        USkeletalMeshSocket_InitializeSocketFromLocation_Params params;
        params.SkelComp = SkelComp;
        params.WorldLocation = WorldLocation;
        params.WorldNormal = WorldNormal;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.SkeletalMeshSocket.GetSocketLocation
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // class USkeletalMeshComponent*  SkelComp                       (CPF_ConstParm, CPF_Parm, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
    // struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FVector USkeletalMeshSocket::GetSocketLocation(class USkeletalMeshComponent* SkelComp)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshSocket.GetSocketLocation");

        USkeletalMeshSocket_GetSocketLocation_Params params;
        params.SkelComp = SkelComp;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.StaticMesh.GetNumSections
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            InLOD                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UStaticMesh::GetNumSections(int InLOD)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetNumSections");

        UStaticMesh_GetNumSections_Params params;
        params.InLOD = InLOD;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.StaticMesh.GetNumLODs
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UStaticMesh::GetNumLODs()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetNumLODs");

        UStaticMesh_GetNumLODs_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.StaticMesh.GetBounds
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FBoxSphereBounds        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FBoxSphereBounds UStaticMesh::GetBounds()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetBounds");

        UStaticMesh_GetBounds_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.StaticMesh.GetBoundingBox
    // (FUNC_Final, FUNC_RequiredAPI, FUNC_Native, FUNC_Public, FUNC_HasDefaults, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // struct FBox                    ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_IsPlainOldData)

    struct FBox UStaticMesh::GetBoundingBox()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetBoundingBox");

        UStaticMesh_GetBoundingBox_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Texture2D.Blueprint_GetSizeY
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UTexture2D::Blueprint_GetSizeY()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2D.Blueprint_GetSizeY");

        UTexture2D_Blueprint_GetSizeY_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.Texture2D.Blueprint_GetSizeX
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_BlueprintCallable, FUNC_BlueprintPure, FUNC_Const)
    // Parameters:
    // int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    int UTexture2D::Blueprint_GetSizeX()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2D.Blueprint_GetSizeX");

        UTexture2D_Blueprint_GetSizeX_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


    // Function Engine.CanvasRenderTarget2D.UpdateResource
    // (FUNC_Native, FUNC_Public, FUNC_BlueprintCallable)

    void UCanvasRenderTarget2D::UpdateResource()
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CanvasRenderTarget2D.UpdateResource");

        UCanvasRenderTarget2D_UpdateResource_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CanvasRenderTarget2D.ReceiveUpdate
    // (FUNC_Event, FUNC_Public, FUNC_BlueprintEvent)
    // Parameters:
    // class UCanvas*                 Canvas                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Width                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Height                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCanvasRenderTarget2D::ReceiveUpdate(class UCanvas* Canvas, int Width, int Height)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CanvasRenderTarget2D.ReceiveUpdate");

        UCanvasRenderTarget2D_ReceiveUpdate_Params params;
        params.Canvas = Canvas;
        params.Width = Width;
        params.Height = Height;

        auto flags = fn->FunctionFlags;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;
    }


    // Function Engine.CanvasRenderTarget2D.GetSize
    // (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms, FUNC_BlueprintCallable, FUNC_BlueprintPure)
    // Parameters:
    // int                            Width                          (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Height                         (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_IsPlainOldData)

    void UCanvasRenderTarget2D::GetSize(int* Width, int* Height)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CanvasRenderTarget2D.GetSize");

        UCanvasRenderTarget2D_GetSize_Params params;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        if (Width != nullptr)
            *Width = params.Width;
        if (Height != nullptr)
            *Height = params.Height;
    }


    // Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D
    // (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_BlueprintCallable)
    // Parameters:
    // class UObject*                 WorldContextObject             (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UClass*                  CanvasRenderTarget2DClass      (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Width                          (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // int                            Height                         (CPF_Parm, CPF_ZeroConstructor, CPF_IsPlainOldData)
    // class UCanvasRenderTarget2D*   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ZeroConstructor, CPF_ReturnParm, CPF_IsPlainOldData)

    class UCanvasRenderTarget2D* UCanvasRenderTarget2D::STATIC_CreateCanvasRenderTarget2D(class UObject* WorldContextObject, class UClass* CanvasRenderTarget2DClass, int Width, int Height)
    {
        static auto fn = UObject::FindObject<UFunction>("Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D");

        UCanvasRenderTarget2D_CreateCanvasRenderTarget2D_Params params;
        params.WorldContextObject = WorldContextObject;
        params.CanvasRenderTarget2DClass = CanvasRenderTarget2DClass;
        params.Width = Width;
        params.Height = Height;

        auto flags = fn->FunctionFlags;
        fn->FunctionFlags |= 0x400;

        UObject::ProcessEvent(fn, &params);

        fn->FunctionFlags = flags;

        return params.ReturnValue;
    }


}

#ifdef _MSC_VER
#pragma pack(pop)
#endif
